<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
>
	<channel>
		<atom:link href="https://rustacean-station.org/podcast.rss" rel="self" type="application/rss+xml" />
		<link>https://rustacean-station.org</link>

		<title><![CDATA[ Rustacean Station ]]></title>
		<itunes:subtitle><![CDATA[ A community project for creating podcast content for the Rust programming language. ]]></itunes:subtitle>
		<itunes:summary><![CDATA[ Come journey with us into the weird, wonderful, and wily world of Rust. ]]></itunes:summary>
		<description><![CDATA[ Come journey with us into the weird, wonderful, and wily world of Rust. ]]></description>

		<itunes:category text="Technology" />
		<itunes:keywords></itunes:keywords>
		<itunes:explicit>false</itunes:explicit>
		<image>
			<link>https://rustacean-station.org</link>
			<url>https://rustacean-station.org/images/artwork.jpg</url>
			<title>Rustacean Station</title>
		</image>
		<itunes:image href="https://rustacean-station.org/images/artwork.jpg" />

		<language>en-us</language>
		<pubDate>Sat, 28 Jun 2025 09:40:44 +0000</pubDate>
		<lastBuildDate>Sat, 28 Jun 2025 09:40:44 +0000</lastBuildDate>

		<managingEditor><![CDATA[ podcast@rustacean-station.org (Rustacean Station) ]]></managingEditor>
		<webMaster>jon@thesquareplanet.com (Jon Gjengset)</webMaster>
		<itunes:author><![CDATA[ Rustacean Station ]]></itunes:author>
		<!-- <googleplay:email>jon@tsp.io</googleplay:email> -->
		<itunes:owner>
			<itunes:name>Jon Gjengset</itunes:name>
			<itunes:email>jon@thesquareplanet.com</itunes:email>
		</itunes:owner>

		
		
		<item>
			<link>https://rustacean-station.org/episode/jonathan-kelley/</link>
			<pubDate>Sat, 28 Jun 2025 09:37:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/jonathan-kelley/</guid>
			

			<title><![CDATA[ Dioxus with Jonathan Kelley ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Jonathan Kelley, creator of Dioxus, a framework for building web, mobile, and desktop apps with a single Rust codebase.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Jonathan Kelley, creator of Dioxus, a framework for building web, mobile, and desktop apps with a single Rust codebase.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet Jonathan Kelley, Creator of Dioxus
  [@01:55] - The Origin &amp; Core Technology of Dioxus
  [@24:45] - Hot Reloading for a Faster Workflow
  [@30:20] - The Road to a Stable 1.0 Release
  [@36:36] - The Future Vision: Full-Stack, Native APIs, and Beyond
  [@42:55] - Collaboration within the Rust UI Ecosystem


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://jonathan-kelley.com/">Jonathan Kelley</a>, creator of <a href="https://dioxuslabs.com/">Dioxus</a>, a framework for building web, mobile, and desktop apps with a single Rust codebase.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet Jonathan Kelley, Creator of Dioxus</li>
  <li>[@01:55] - The Origin &amp; Core Technology of Dioxus</li>
  <li>[@24:45] - Hot Reloading for a Faster Workflow</li>
  <li>[@30:20] - The Road to a Stable 1.0 Release</li>
  <li>[@36:36] - The Future Vision: Full-Stack, Native APIs, and Beyond</li>
  <li>[@42:55] - Collaboration within the Rust UI Ecosystem</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-06-28-jonathan-kelley.mp3" length="143907840" type="audio/mpeg"/>
			<itunes:duration>59:58</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/adi-seredinschi/</link>
			<pubDate>Fri, 20 Jun 2025 06:53:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/adi-seredinschi/</guid>
			

			<title><![CDATA[ Malachite with Adi Seredinschi ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Adi Seredinschi, creator of Malachite, a Byzantine-fault tolerant (BFT) consensus engine implemented in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Adi Seredinschi, creator of Malachite, a Byzantine-fault tolerant (BFT) consensus engine implemented in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Meet Adi Seredinsky, Director of Product at Informal Systems
  [@5:23] - From Go to Rust: The Malachite rewrite of Tendermint
  [@9:26] - Technical challenges of the original Go codebase
  [@16:56] - Why Rust was chosen for the rewrite
  [@22:23] - Quint: A developer-friendly language for formal methods
  [@33:48] - Performance gains from the Rust rewrites
  [@40:42] - Closing thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.adi.monster/">Adi Seredinschi</a>, creator of <a href="https://github.com/informalsystems/malachite">Malachite</a>, a Byzantine-fault tolerant (BFT) consensus engine implemented in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Meet Adi Seredinsky, Director of Product at Informal Systems</li>
  <li>[@5:23] - From Go to Rust: The Malachite rewrite of <a href="https://tendermint.com/">Tendermint</a></li>
  <li>[@9:26] - Technical challenges of the original Go codebase</li>
  <li>[@16:56] - Why Rust was chosen for the rewrite</li>
  <li>[@22:23] - <a href="https://quint-lang.org/">Quint</a>: A developer-friendly language for formal methods</li>
  <li>[@33:48] - Performance gains from the Rust rewrites</li>
  <li>[@40:42] - Closing thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-06-20-adi-seredinschi.mp3" length="102855360" type="audio/mpeg"/>
			<itunes:duration>42:51</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/eli-shalom-and-igal-tabachnik/</link>
			<pubDate>Sat, 14 Jun 2025 07:15:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/eli-shalom-and-igal-tabachnik/</guid>
			

			<title><![CDATA[ Rust at Work - conversation with Eli Shalom and Igal Tabachnik of Eureka Labs ]]></title>
			<itunes:summary><![CDATA[ In this episode, host Gábor Szabó talks to Eli Shalom, Eureka Labs’ Co-Founder and CTO, and Senior Software Engineer Igal Tabachnik about how Rust is powering infrastructure at Eureka Labs - a blockchain company operating in a low-latency, high-throughput environment.
 ]]></itunes:summary>
			<description><![CDATA[ In this episode, host Gábor Szabó talks to Eli Shalom, Eureka Labs’ Co-Founder and CTO, and Senior Software Engineer Igal Tabachnik about how Rust is powering infrastructure at Eureka Labs - a blockchain company operating in a low-latency, high-throughput environment.

Eureka Labs’ work focuses on advancing the logic of block construction to support more efficient execution and expand the functionality that can be packed into each block’s limited timeframe.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@0:00] - The Code-Maven live meeting series on Rust at Work.
  [@1:14] - Eli Shalom Co-Founder and CTO of Eureka Labs.
  [@2:20] - Igal Tabachnik Senior Software Engineer.
    
      Scala
    
  
  [@4:00] - About Eureka Labs and the “block builder”.
    
      Blockchain
      Ethereum Networks
    
  
  [@7:10] - What is blockchain? What is block building?
    
      Smart contract
      Smart contracts on Ethereum
      NP-Hard problem
    
  
  [@15:00] - Why Rust?
    
      reth
    
  
  [@25:45] - Ethereum implementation and deployment
    
      Ethereum specs and standards
      EIP - Ethereum Improvement Proposals
    
  
  [@35:06] - How did you get started with Rust?
    
      Scala
      Haskell
      functional programming
      virtual threads / green threads / tokio
      Eq trait
      F#
      Constraints Liberate, Liberties Constrain talk by Runar Bjarnason.
    
  
  [@48:40] - How do you select the crates you use?
    
      Elm
    
  
  [@55:03] - How much do you use AI? Which AI tools do you use?
    
      Claude Code
      Amp of Sourcegraph
      GitHub Co-pilot
      ChatGPT
      LLMs
      Perlexity
      JetBrains
    
  
  [@1:04:05] - What should people do in order to be a better candidate for a job at your company?
    
      Vibe coding
    
  
  [@1:08:30] - Things to take into account when selecting a language
  [@1:10:48] - Training and mentoring new developers
    
      Redis
      Learning Rust: The Rust Book.
      Live coding streams by Jon Gjengset.
      Rust for Rustaceans book by Jon Gjengset.
    
  
  [@1:16:00] - Final notes
    
      Igal can be contacted on X/twitter @hmemcpy or via email at hmemcpy@gmail.com
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Gábor Szabó

Hosting Infrastructure: Jon Gjengset

Show Notes: Gábor Szabó

Hosts: Gábor Szabó

 ]]></description>
			<content:encoded><![CDATA[ <p>In this episode, host Gábor Szabó talks to <a href="https://www.linkedin.com/in/elishalom/">Eli Shalom</a>, Eureka Labs’ Co-Founder and CTO, and Senior Software Engineer <a href="https://www.linkedin.com/in/igaltabachnik/">Igal Tabachnik</a> about how Rust is powering infrastructure at <a href="https://eurekalabs.xyz/">Eureka Labs</a> - a blockchain company operating in a low-latency, high-throughput environment.</p>

<p>Eureka Labs’ work focuses on advancing the logic of block construction to support more efficient execution and expand the functionality that can be packed into each block’s limited timeframe.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@0:00] - The <a href="https://live.code-maven.com/">Code-Maven live</a> meeting series on Rust at Work.</li>
  <li>[@1:14] - <a href="https://www.linkedin.com/in/elishalom/">Eli Shalom</a> Co-Founder and CTO of <a href="https://eurekalabs.xyz/">Eureka Labs</a>.</li>
  <li>[@2:20] - <a href="https://www.linkedin.com/in/igaltabachnik/">Igal Tabachnik</a> Senior Software Engineer.
    <ul>
      <li><a href="https://www.scala-lang.org/">Scala</a></li>
    </ul>
  </li>
  <li>[@4:00] - About Eureka Labs and the “block builder”.
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Blockchain">Blockchain</a></li>
      <li><a href="https://ethereum.org/en/developers/docs/networks/">Ethereum Networks</a></li>
    </ul>
  </li>
  <li>[@7:10] - What is blockchain? What is block building?
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Smart_contract">Smart contract</a></li>
      <li><a href="https://ethereum.org/en/developers/docs/smart-contracts/">Smart contracts on Ethereum</a></li>
      <li><a href="https://en.wikipedia.org/wiki/NP-hardness">NP-Hard problem</a></li>
    </ul>
  </li>
  <li>[@15:00] - Why Rust?
    <ul>
      <li><a href="https://reth.rs/">reth</a></li>
    </ul>
  </li>
  <li>[@25:45] - Ethereum implementation and deployment
    <ul>
      <li><a href="https://ethereum.org/en/developers/docs/standards/">Ethereum specs and standards</a></li>
      <li><a href="https://eips.ethereum.org/">EIP - Ethereum Improvement Proposals</a></li>
    </ul>
  </li>
  <li>[@35:06] - How did you get started with Rust?
    <ul>
      <li><a href="https://www.scala-lang.org/">Scala</a></li>
      <li><a href="https://www.haskell.org/">Haskell</a></li>
      <li><a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a></li>
      <li>virtual threads / green threads / <a href="https://tokio.rs/">tokio</a></li>
      <li><a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">Eq trait</a></li>
      <li><a href="https://fsharp.org/">F#</a></li>
      <li><a href="https://www.youtube.com/watch?v=GqmsQeSzMdw">Constraints Liberate, Liberties Constrain</a> talk by Runar Bjarnason.</li>
    </ul>
  </li>
  <li>[@48:40] - How do you select the crates you use?
    <ul>
      <li><a href="https://elm-lang.org/">Elm</a></li>
    </ul>
  </li>
  <li>[@55:03] - How much do you use AI? Which AI tools do you use?
    <ul>
      <li><a href="https://claude.ai/">Claude Code</a></li>
      <li><a href="https://sourcegraph.com/">Amp of Sourcegraph</a></li>
      <li><a href="https://github.com/features/copilot">GitHub Co-pilot</a></li>
      <li><a href="https://chatgpt.com/">ChatGPT</a></li>
      <li><a href="https://en.wikipedia.org/wiki/Large_language_model">LLMs</a></li>
      <li><a href="https://www.perplexity.ai/">Perlexity</a></li>
      <li><a href="https://www.jetbrains.com/">JetBrains</a></li>
    </ul>
  </li>
  <li>[@1:04:05] - What should people do in order to be a better candidate for a job at your company?
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Vibe_coding">Vibe coding</a></li>
    </ul>
  </li>
  <li>[@1:08:30] - Things to take into account when selecting a language</li>
  <li>[@1:10:48] - Training and mentoring new developers
    <ul>
      <li><a href="https://redis.io/">Redis</a></li>
      <li>Learning Rust: <a href="https://doc.rust-lang.org/book/">The Rust Book</a>.</li>
      <li>Live coding streams by <a href="https://www.youtube.com/c/JonGjengset">Jon Gjengset</a>.</li>
      <li><a href="https://rust-for-rustaceans.com/">Rust for Rustaceans</a> book by Jon Gjengset.</li>
    </ul>
  </li>
  <li>[@1:16:00] - Final notes
    <ul>
      <li>Igal can be contacted on X/twitter <a href="https://x.com/hmemcpy">@hmemcpy</a> or via email at hmemcpy@gmail.com</li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Gábor Szabó</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: Gábor Szabó</p>

<p>Hosts: <a href="https://www.linkedin.com/in/szabgab/">Gábor Szabó</a></p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-06-14-eli-shalom-and-igal-tabachnik.mp3" length="56739526" type="audio/mpeg"/>
			<itunes:duration>1:18:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/dongyoon-kang/</link>
			<pubDate>Sat, 31 May 2025 07:01:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/dongyoon-kang/</guid>
			

			<title><![CDATA[ SWC with DongYoon Kang ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with DongYoon Kang aka kdy, creator of SWC, a Rust-based platform for creating fast developer tools. It’s used in existing projects such as Next.js, Parcel, and Deno.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with DongYoon Kang aka kdy, creator of SWC, a Rust-based platform for creating fast developer tools. It’s used in existing projects such as Next.js, Parcel, and Deno.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Meet DongYoon Kang, creator of SWC, the Rust-based platform for the Web
  [@1:54] - SWC creation &amp; background
  [@5:00] - Adoption by Deno, Next.js, and others
  [@8:45] - Learning Rust and building SWC
  [@11:14] - Community contributions and team structure
  [@14:48] - Performance improvements with Chili
  [@17:57] - SWC modules and supported languages
  [@20:28] - Exploring Dart support
  [@21:37] - Future plans for SWC


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://kdy1.dev/">DongYoon Kang</a> aka kdy, creator of <a href="https://swc.rs/">SWC</a>, a Rust-based platform for creating fast developer tools. It’s used in existing projects such as Next.js, Parcel, and Deno.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Meet DongYoon Kang, creator of SWC, the Rust-based platform for the Web</li>
  <li>[@1:54] - SWC creation &amp; background</li>
  <li>[@5:00] - Adoption by Deno, Next.js, and others</li>
  <li>[@8:45] - Learning Rust and building SWC</li>
  <li>[@11:14] - Community contributions and team structure</li>
  <li>[@14:48] - Performance improvements with Chili</li>
  <li>[@17:57] - SWC modules and supported languages</li>
  <li>[@20:28] - Exploring Dart support</li>
  <li>[@21:37] - Future plans for SWC</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-05-31-dongyoon-kang.mp3" length="59634240" type="audio/mpeg"/>
			<itunes:duration>24:50</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/accesskit-with-matt-campbell-and-arnold-loubriat/</link>
			<pubDate>Thu, 29 May 2025 08:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/accesskit-with-matt-campbell-and-arnold-loubriat/</guid>
			

			<title><![CDATA[ AccessKit with Matt Campbell and Arnold Loubriat ]]></title>
			<itunes:summary><![CDATA[ With AccessKit, Matt Campbell and Arnold Loubriat took on the ambitious task of abstracting over
the accessibility APIs of several target OS’ to offer toolkit providers one unified way to make their UIs accessible across platforms.
This interview was recorded live at RustWeek 2025 with your host Luuk van der Duim.
 ]]></itunes:summary>
			<description><![CDATA[ With AccessKit, Matt Campbell and Arnold Loubriat took on the ambitious task of abstracting over
the accessibility APIs of several target OS’ to offer toolkit providers one unified way to make their UIs accessible across platforms.
This interview was recorded live at RustWeek 2025 with your host Luuk van der Duim.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@1:11] - Introducing Matt and Arnold.
  [@1:45] - “What are you working on?”
  [@2:00] - “What does it offer?”
  [@2:28] - “Who would use AccessKit?”
  [@2:51] - AccessKit bindings in languages besides Rust.
  [@3:14] - Unifying accessibility protocols.
  [@4:47] - AccessKit’s API.
  [@6:58] - AccessKit tree concepts.
  [@8:47] - When Arnold got involved.
  [@9:08] - 6000 lines of code to find Matt.
  [@12:56] - Matt’s history with Windows and Microsoft.
  [@14:00] - How Quorum relates to AccessKit,
    
      Quorum
    
  
  [@15:52] - Challenges Quorum UI development faced.
  [@18:12] - Arnold and Matt on the necessity for back-end testing, Android, iOS - Linux.
  [@21:45] - On Newton and its Chromium relation.
    
      Newton
    
  
  [@27:55] - Newton on other compositers.
  [@29:20] - Wayland protocol purists versus Gnome D-Bus frictions.
    
      “Next-generation accessibility architecture” document
    
  
  [@31:03] - Where can people find Arnold?
    
      Arnold on GitHub as ‘DataTriny’
      Arnold Loubriat on LinkedIn
      DataTriny on Mastodon
    
  
  [@31:39] Where can people find Matt?
    
      Matt Campbell on GitHub
      AccessKit website.
    
  
  [@31:53] Your host can be found on GitHub.
    
      Luuk van der Duim
      Odilia screen reader
      atspi crate
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Luuk van der Duim

Samples used in interruption:


  “Vinyl - 45RPM - Start 2”
by: day-garwood
License: Attribution 3.0
  Record Scratch #3
by: musicvision31
License: Creative Commons 0


Hosting Infrastructure: Jon Gjengset

Show Notes: Luuk van der Duim

Hosts: Luuk van der Duim
 ]]></description>
			<content:encoded><![CDATA[ <p>With <a href="https://accesskit.dev/">AccessKit</a>, <a href="https://github.com/mwcampbell">Matt Campbell</a> and <a href="https://github.com/DataTriny">Arnold Loubriat</a> took on the ambitious task of abstracting over
the accessibility APIs of several target OS’ to offer toolkit providers one unified way to make their UIs accessible across platforms.
This interview was recorded live at <a href="https://rustweek.org/">RustWeek 2025</a> with your host <a href="https://github.com/luukvanderduim">Luuk van der Duim</a>.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@1:11] - Introducing Matt and Arnold.</li>
  <li>[@1:45] - “What are you working on?”</li>
  <li>[@2:00] - “What does it offer?”</li>
  <li>[@2:28] - “Who would use AccessKit?”</li>
  <li>[@2:51] - AccessKit bindings in languages besides Rust.</li>
  <li>[@3:14] - Unifying accessibility protocols.</li>
  <li>[@4:47] - AccessKit’s API.</li>
  <li>[@6:58] - AccessKit tree concepts.</li>
  <li>[@8:47] - When Arnold got involved.</li>
  <li>[@9:08] - 6000 lines of code to find Matt.</li>
  <li>[@12:56] - Matt’s history with Windows and Microsoft.</li>
  <li>[@14:00] - How Quorum relates to AccessKit,
    <ul>
      <li><a href="https://www.washington.edu/accesscomputing/quorum-programming-language-0">Quorum</a></li>
    </ul>
  </li>
  <li>[@15:52] - Challenges Quorum UI development faced.</li>
  <li>[@18:12] - Arnold and Matt on the necessity for back-end testing, Android, iOS - Linux.</li>
  <li>[@21:45] - On Newton and its Chromium relation.
    <ul>
      <li><a href="https://blogs.gnome.org/a11y/2024/06/18/update-on-newton-the-wayland-native-accessibility-project/">Newton</a></li>
    </ul>
  </li>
  <li>[@27:55] - Newton on other compositers.</li>
  <li>[@29:20] - Wayland protocol purists versus Gnome D-Bus frictions.
    <ul>
      <li><a href="https://gitlab.gnome.org/GNOME/at-spi2-core/-/blob/main/devel-docs/new-protocol.rst?ref_type=heads">“Next-generation accessibility architecture” document</a></li>
    </ul>
  </li>
  <li>[@31:03] - Where can people find Arnold?
    <ul>
      <li><a href="https://github.com/DataTriny">Arnold on GitHub as ‘DataTriny’</a></li>
      <li><a href="https://www.linkedin.com/in/datatriny/">Arnold Loubriat on LinkedIn</a></li>
      <li><a href="https://fosstodon.org/@DataTriny">DataTriny on Mastodon</a></li>
    </ul>
  </li>
  <li>[@31:39] Where can people find Matt?
    <ul>
      <li><a href="https://github.com/mwcampbell">Matt Campbell on GitHub</a></li>
      <li><a href="http://accesskit.dev">AccessKit website</a>.</li>
    </ul>
  </li>
  <li>[@31:53] Your host can be found on GitHub.
    <ul>
      <li><a href="https://github.com/luukvanderduim">Luuk van der Duim</a></li>
      <li><a href="https://github.com/odilia-app/odilia">Odilia screen reader</a></li>
      <li><a href="https://github.com/odilia-app/atspi">atspi crate</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Luuk van der Duim</p>

<p>Samples used in interruption:</p>

<ul>
  <li><a href="https://freesound.org/people/day-garwood/sounds/619302/">“Vinyl - 45RPM - Start 2”</a>
by: <a href="https://freesound.org/people/day-garwood/">day-garwood</a>
License: <a href="https://creativecommons.org/licenses/by/3.0/">Attribution 3.0</a></li>
  <li><a href="https://freesound.org/people/musicvision31/sounds/431778/">Record Scratch #3</a>
by: <a href="https://freesound.org/people/musicvision31/">musicvision31</a>
License: <a href="http://creativecommons.org/publicdomain/zero/1.0/">Creative Commons 0</a></li>
</ul>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: Luuk van der Duim</p>

<p>Hosts: <a href="https://github.com/luukvanderduim/">Luuk van der Duim</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-05-29-accesskit-with-matt-campbell-and-arnold-loubriat.mp3" length="25041195" type="audio/mpeg"/>
			<itunes:duration>32:52</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/ran-reichman/</link>
			<pubDate>Sat, 24 May 2025 07:21:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/ran-reichman/</guid>
			

			<title><![CDATA[ Rust at Work with Ran Reichman Co-Founder and CEO of Flarion ]]></title>
			<itunes:summary><![CDATA[ Gábor Szabó talks with Ran Reichman, Co-Founder and CEO of Flarion, a company building high-performance data processing systems using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Gábor Szabó talks with Ran Reichman, Co-Founder and CEO of Flarion, a company building high-performance data processing systems using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@0:00] - The Code-Maven live meeting series on Rust at Work.
  [@1:03] - Welcome to Ran Reichman, Co-Founder and CEO of Flarion.
    
      Talpiot program
      Wiz, About Wiz
    
  
  [@3:19] - When did you start using Rust?
  [@3:58] - Why did you think that Rust is good for this start-up company? And has it proven to be?
    
      Polars
      Apache Data Fusion
    
  
  [@5:43] - Inviting the audience in the live conversation to ask questions in the chat.
  [@6:22] - Have you considered other languages?
  [@7:02] - What kind of Rust developers do you work with?
  [@8:23] - Is any part of Flarion open source? Is it on GitHub?
  [@9:22] - How do you handle the hundreds of open source dependencies of Flarion?
  [@12:13] - Have you considered sponsoring open source developers? Bug bounties?
  [@13:23] - What do you mainly do with Rust?
    
      Scala
      Apache Spark
      Python
      Ray
      JNI
    
  
  [@14:38] - Besides Rust, what other programming languages do you use?
  [@15:18] - Do you expect new joiners to know Rust, or can they learn on the job?
  [@17:44] - Are there parts of Rust that you avoid using?
  [@18:41] - How easy for you to recruit developers?
  [@20:56] - What are resources you recommend for people learning Rust?
    
      The Rust book
    
  
  [@25:04] - Do you have any suggestions for someone who’d like to move from web dev to Rust/C/etc.?
  [@27:01] - What should I do to increase my chances of being hired?
    
      Proof of work
    
  
  [@36:11] - How do you evaluate your decision to use Rust?
  [@37:19] - What are the good and bad parts of Rust and its ecosystem?
  [@42:05] - Home assignments where candidates fix issues in open source projects
  [@43:18] - Debuging distributed and high-performance use cases
    
      Tracy Frame profiler
    
  
  [@46:35] - What is your experience using AI tools writing Rust code?
    
      Claude
      ChatGPT
      Deep Seek R1
    
  
  [@49:45] - What would you tell other founders, CTOs, and technology manager considering Rust?
  [@51:43] - What is next for Flarion?
    
      Flarion on Linkedin for available jobs.
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Gábor Szabó

Hosting Infrastructure: Jon Gjengset

Show Notes: Gábor Szabó

Hosts: Gábor Szabó
 ]]></description>
			<content:encoded><![CDATA[ <p>Gábor Szabó talks with <a href="https://www.linkedin.com/in/ran-reichman-740163b7/">Ran Reichman</a>, Co-Founder and CEO of <a href="https://www.flarion.io/">Flarion</a>, a company building high-performance data processing systems using Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@0:00] - The <a href="https://live.code-maven.com/">Code-Maven live</a> meeting series on Rust at Work.</li>
  <li>[@1:03] - Welcome to <a href="https://www.linkedin.com/in/ran-reichman-740163b7/">Ran Reichman</a>, Co-Founder and CEO of <a href="https://www.flarion.io/">Flarion</a>.
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Talpiot_program">Talpiot program</a></li>
      <li><a href="https://www.wiz.io/">Wiz</a>, <a href="https://en.wikipedia.org/wiki/Wiz,_Inc.">About Wiz</a></li>
    </ul>
  </li>
  <li>[@3:19] - When did you start using Rust?</li>
  <li>[@3:58] - Why did you think that Rust is good for this start-up company? And has it proven to be?
    <ul>
      <li><a href="https://pola.rs/">Polars</a></li>
      <li><a href="https://datafusion.apache.org/">Apache Data Fusion</a></li>
    </ul>
  </li>
  <li>[@5:43] - Inviting the audience in the live conversation to ask questions in the chat.</li>
  <li>[@6:22] - Have you considered other languages?</li>
  <li>[@7:02] - What kind of Rust developers do you work with?</li>
  <li>[@8:23] - Is any part of Flarion open source? Is it on GitHub?</li>
  <li>[@9:22] - How do you handle the hundreds of open source dependencies of Flarion?</li>
  <li>[@12:13] - Have you considered sponsoring open source developers? Bug bounties?</li>
  <li>[@13:23] - What do you mainly do with Rust?
    <ul>
      <li><a href="https://www.scala-lang.org/">Scala</a></li>
      <li><a href="https://spark.apache.org/">Apache Spark</a></li>
      <li><a href="https://www.python.org/">Python</a></li>
      <li><a href="https://www.ray.io/">Ray</a></li>
      <li><a href="https://en.wikipedia.org/wiki/Java_Native_Interface">JNI</a></li>
    </ul>
  </li>
  <li>[@14:38] - Besides Rust, what other programming languages do you use?</li>
  <li>[@15:18] - Do you expect new joiners to know Rust, or can they learn on the job?</li>
  <li>[@17:44] - Are there parts of Rust that you avoid using?</li>
  <li>[@18:41] - How easy for you to recruit developers?</li>
  <li>[@20:56] - What are resources you recommend for people learning Rust?
    <ul>
      <li><a href="https://doc.rust-lang.org/book/">The Rust book</a></li>
    </ul>
  </li>
  <li>[@25:04] - Do you have any suggestions for someone who’d like to move from web dev to Rust/C/etc.?</li>
  <li>[@27:01] - What should I do to increase my chances of being hired?
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Proof_of_work">Proof of work</a></li>
    </ul>
  </li>
  <li>[@36:11] - How do you evaluate your decision to use Rust?</li>
  <li>[@37:19] - What are the good and bad parts of Rust and its ecosystem?</li>
  <li>[@42:05] - Home assignments where candidates fix issues in open source projects</li>
  <li>[@43:18] - Debuging distributed and high-performance use cases
    <ul>
      <li><a href="https://github.com/wolfpld/tracy">Tracy</a> Frame profiler</li>
    </ul>
  </li>
  <li>[@46:35] - What is your experience using AI tools writing Rust code?
    <ul>
      <li><a href="https://claude.ai/">Claude</a></li>
      <li><a href="https://chatgpt.com/">ChatGPT</a></li>
      <li><a href="https://www.deepseek.com/">Deep Seek</a> <a href="https://github.com/deepseek-ai/DeepSeek-R1">R1</a></li>
    </ul>
  </li>
  <li>[@49:45] - What would you tell other founders, CTOs, and technology manager considering Rust?</li>
  <li>[@51:43] - What is next for Flarion?
    <ul>
      <li><a href="https://www.linkedin.com/company/flarion/">Flarion on Linkedin</a> for available jobs.</li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Gábor Szabó</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: Gábor Szabó</p>

<p>Hosts: <a href="https://www.linkedin.com/in/szabgab/">Gábor Szabó</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-05-24-ran-reichman.mp3" length="40874711" type="audio/mpeg"/>
			<itunes:duration>56:47</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.79-1.80/</link>
			<pubDate>Sat, 10 May 2025 08:09:10 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.79-1.80/</guid>
			

			<title><![CDATA[ What's New in Rust 1.79 and 1.80 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.79 and 1.80 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.79 and 1.80 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:02] - Rust 1.79


  [@01:02] - Inline const expressions
  [@08:33] - Bounds in associated type position
  [@14:11] - Extending automatic temporary lifetime extension
    
      Mara’s blog post on temporary lifetimes
    
  
  [@21:55] - Frame pointers enabled in standard library builds
    
      Does omitting the frame pointer really affect performance?
    
  
  [@25:37] - Stabilized APIs
    
      [@25:37] - {integer}::unchecked_add
      [@27:39] - &lt;*const [T]&gt;::len
      [@29:21] - &lt;[u8]&gt;::utf8_chunks
      [@31:21] - CStr::count_bytes
      [@32:41] - num::NonZero&lt;T&gt;
      [@36:30] - io::Error::downcast
      [@36:50] - path::absolute
    
  
  [@38:18] - Changelog deep-dive
    
      [@38:31] - Stabilize WASM target features that are in phase 4 and 5
      [@39:15] - Document overrides of clone_from() in core/std
      [@41:46] - Switch to using gitoxide by default for listing files in cargo
      [@43:03] - Stabilize lint unnameable_types
      [@44:46] - manual_clamp lint
    
  


[@45:46] - Rust 1.80


  [@46:09] - LazyCell and LazyLock
  [@53:42] - Checked cfg names and values
    
      Detailed blog post on checked cfg
    
  
  [@56:41] - Exclusive ranges in patterns
  [@58:52] - Stabilized APIs
    
      [@59:05] - Vec::&lt;[T; N]&gt;::into_flattened
        
          &lt;[[T; N]]&gt;::as_flattened
        
      
      [@1:00:31] - &lt;[u8]&gt;::trim_ascii
      [@1:02:06] - NonNull::add and other ptr-like methods
      [@1:03:41] - impl IntoIterator for Box&lt;[T]&gt;
      [@1:05:46] - Option::take_if
      [@1:07:30] - Ipv4Addr::to_bits
    
  
  [@1:09:10] - Changelog deep-dive
    
      [@1:09:25] - x86_64-unknown-linux-none
      [@1:11:07] - Add size_of and align_of to the prelude
      [@1:12:34] - Never type fallback flowing into unsafe
      [@1:17:29] - New panics and aborts in the standard library
        
          Abort when OwnedFd is violated
          Panic if set_extension adds /
        
      
      [@1:20:28] - Restore enum variants in rustdoc for type aliases
      [@1:21:12] - Change assigning_clones lint to pedantic
      [@1:22:15] - Turn lints into hard errors
      [@1:22:49] - env::set_var regression
      [@1:24:34] - StdoutLock regression
    
  


[@1:26:00] - Rust 1.80.1

Fixes miscompilation when comparing
floats
and false positives in the dead_code
lint.

Credits

Intro Theme: Aerocity

Audio Editing: Jon Gjengset

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.79 and 1.80 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0102---rust-179">[@01:02] - <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0/">Rust 1.79</a></h4>

<ul>
  <li>[@01:02] - <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0/#inline-const-expressions">Inline const expressions</a></li>
  <li>[@08:33] - <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0/#bounds-in-associated-type-position">Bounds in associated type position</a></li>
  <li>[@14:11] - <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0/#extending-automatic-temporary-lifetime-extension">Extending automatic temporary lifetime extension</a>
    <ul>
      <li><a href="https://blog.m-ou.se/super-let/">Mara’s blog post on temporary lifetimes</a></li>
    </ul>
  </li>
  <li>[@21:55] - <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0/#frame-pointers-enabled-in-standard-library-builds">Frame pointers enabled in standard library builds</a>
    <ul>
      <li><a href="https://stackoverflow.com/questions/13006371/does-omitting-the-frame-pointers-really-have-a-positive-effect-on-performance-an">Does omitting the frame pointer really affect performance?</a></li>
    </ul>
  </li>
  <li>[@25:37] - <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0/#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@25:37] - <a href="https://doc.rust-lang.org/stable/core/primitive.i32.html#method.unchecked_add"><code>{integer}::unchecked_add</code></a></li>
      <li>[@27:39] - <a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.len"><code>&lt;*const [T]&gt;::len</code></a></li>
      <li>[@29:21] - <a href="https://doc.rust-lang.org/stable/core/primitive.slice.html#method.utf8_chunks"><code>&lt;[u8]&gt;::utf8_chunks</code></a></li>
      <li>[@31:21] - <a href="https://doc.rust-lang.org/stable/core/ffi/c_str/struct.CStr.html#method.count_bytes"><code>CStr::count_bytes</code></a></li>
      <li>[@32:41] - <a href="https://doc.rust-lang.org/stable/core/num/struct.NonZero.html"><code>num::NonZero&lt;T&gt;</code></a></li>
      <li>[@36:30] - <a href="https://doc.rust-lang.org/stable/std/io/struct.Error.html#method.downcast"><code>io::Error::downcast</code></a></li>
      <li>[@36:50] - <a href="https://doc.rust-lang.org/stable/std/path/fn.absolute.html"><code>path::absolute</code></a></li>
    </ul>
  </li>
  <li>[@38:18] - Changelog deep-dive
    <ul>
      <li>[@38:31] - <a href="https://github.com/rust-lang/rust/pull/117457/">Stabilize WASM target features that are in phase 4 and 5</a></li>
      <li>[@39:15] - <a href="https://github.com/rust-lang/rust/pull/122201">Document overrides of <code>clone_from()</code> in core/std</a></li>
      <li>[@41:46] - <a href="https://github.com/rust-lang/cargo/pull/13696">Switch to using gitoxide by default for listing files in cargo</a></li>
      <li>[@43:03] - <a href="https://github.com/rust-lang/rust/pull/120144/">Stabilize lint unnameable_types</a></li>
      <li>[@44:46] - <a href="https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp"><code>manual_clamp</code> lint</a></li>
    </ul>
  </li>
</ul>

<h4 id="4546---rust-180">[@45:46] - <a href="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0/">Rust 1.80</a></h4>

<ul>
  <li>[@46:09] - <a href="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0/#lazycell-and-lazylock"><code>LazyCell</code> and <code>LazyLock</code></a></li>
  <li>[@53:42] - <a href="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0/#checked-cfg-names-and-values">Checked <code>cfg</code> names and values</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2024/05/06/check-cfg/">Detailed blog post on checked <code>cfg</code></a></li>
    </ul>
  </li>
  <li>[@56:41] - <a href="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0/#exclusive-ranges-in-patterns">Exclusive ranges in patterns</a></li>
  <li>[@58:52] - <a href="https://blog.rust-lang.org/2024/07/25/Rust-1.80.0/#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@59:05] - <a href="https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#method.into_flattened"><code>Vec::&lt;[T; N]&gt;::into_flattened</code></a>
        <ul>
          <li><a href="https://doc.rust-lang.org/stable/core/primitive.slice.html#method.as_flattened"><code>&lt;[[T; N]]&gt;::as_flattened</code></a></li>
        </ul>
      </li>
      <li>[@1:00:31] - <a href="https://doc.rust-lang.org/stable/core/primitive.slice.html#method.trim_ascii"><code>&lt;[u8]&gt;::trim_ascii</code></a></li>
      <li>[@1:02:06] - <a href="https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.add"><code>NonNull::add</code> and other <code>ptr</code>-like methods</a></li>
      <li>[@1:03:41] - <a href="https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html#impl-IntoIterator-for-Box%3C%5BI%5D,+A%3E"><code>impl IntoIterator for Box&lt;[T]&gt;</code></a></li>
      <li>[@1:05:46] - <a href="https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.take_if"><code>Option::take_if</code></a></li>
      <li>[@1:07:30] - <a href="https://doc.rust-lang.org/stable/core/net/struct.Ipv4Addr.html#method.to_bits"><code>Ipv4Addr::to_bits</code></a></li>
    </ul>
  </li>
  <li>[@1:09:10] - Changelog deep-dive
    <ul>
      <li>[@1:09:25] - <a href="https://github.com/rust-lang/rust/pull/125023"><code>x86_64-unknown-linux-none</code></a></li>
      <li>[@1:11:07] - <a href="https://github.com/rust-lang/rust/pull/123168/">Add <code>size_of</code> and <code>align_of</code> to the prelude</a></li>
      <li>[@1:12:34] - <a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#never-type-fallback-flowing-into-unsafe">Never type fallback flowing into unsafe</a></li>
      <li>[@1:17:29] - New panics and aborts in the standard library
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/124210/">Abort when <code>OwnedFd</code> is violated</a></li>
          <li><a href="https://github.com/rust-lang/rust/pull/125070/">Panic if <code>set_extension</code> adds <code>/</code></a></li>
        </ul>
      </li>
      <li>[@1:20:28] - <a href="https://github.com/rust-lang/rust/pull/125300/">Restore enum variants in rustdoc for type aliases</a></li>
      <li>[@1:21:12] - <a href="https://github.com/rust-lang/rust-clippy/pull/12779">Change <code>assigning_clones</code> lint to <code>pedantic</code></a></li>
      <li>[@1:22:15] - <a href="https://github.com/rust-lang/rust/pull/124661/">Turn lints into hard errors</a></li>
      <li>[@1:22:49] - <a href="https://github.com/rust-lang/rust/pull/124636#issuecomment-2195022993"><code>env::set_var</code> regression</a></li>
      <li>[@1:24:34] - <a href="https://github.com/rust-lang/rust/issues/127340#issuecomment-2210173785"><code>StdoutLock</code> regression</a></li>
    </ul>
  </li>
</ul>

<h4 id="12600---rust-1801">[@1:26:00] - <a href="https://blog.rust-lang.org/2024/08/08/Rust-1.80.1/">Rust 1.80.1</a></h4>

<p>Fixes <a href="https://blog.rust-lang.org/2024/08/08/Rust-1.80.1/#miscompilation-when-comparing-floats">miscompilation when comparing
floats</a>
and <a href="https://blog.rust-lang.org/2024/08/08/Rust-1.80.1/#false-positives-in-the-dead-code-lint">false positives in the <code>dead_code</code>
lint</a>.</p>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-05-10-rust-1.79-1.80.mp3" length="63252629" type="audio/mpeg"/>
			<itunes:duration>01:27:46</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/howard-zuo/</link>
			<pubDate>Fri, 09 May 2025 08:36:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/howard-zuo/</guid>
			

			<title><![CDATA[ Dataland with Howard Zuo ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Howard Zuo, CEO at Dataland, a software company that builds AI agents for customer support teams, using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Howard Zuo, CEO at Dataland, a software company that builds AI agents for customer support teams, using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction to Howard Zuo and Dataland
  [@2:21] - Supported data sources and plugins
  [@5:36] - Challenges with data diversity
  [@9:12] - Focus on customer support teams
  [@13:02] - Choosing Rust for performance and safety
  [@18:39] - Comparing Rust to Go
  [@24:10] - Learning async and debugging
  [@30:28] - Rust’s ecosystem for data processing
  [@48:32] - Rust and WebAssembly for UI performance
  [@57:14] - Closing thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/hzuo">Howard Zuo</a>, CEO at <a href="https://dataland.io/">Dataland</a>, a software company that builds AI agents for customer support teams, using Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction to Howard Zuo and Dataland</li>
  <li>[@2:21] - Supported data sources and plugins</li>
  <li>[@5:36] - Challenges with data diversity</li>
  <li>[@9:12] - Focus on customer support teams</li>
  <li>[@13:02] - Choosing Rust for performance and safety</li>
  <li>[@18:39] - Comparing Rust to Go</li>
  <li>[@24:10] - Learning async and debugging</li>
  <li>[@30:28] - Rust’s ecosystem for data processing</li>
  <li>[@48:32] - Rust and WebAssembly for UI performance</li>
  <li>[@57:14] - Closing thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-05-09-howard-zuo.mp3" length="146322240" type="audio/mpeg"/>
			<itunes:duration>01:00:58</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/windsoilder/</link>
			<pubDate>Fri, 18 Apr 2025 11:43:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/windsoilder/</guid>
			

			<title><![CDATA[ Nushell with WindSoilder ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with WindSoilder, a contributor to Nushell, a shell that treats data as structured tables. WindSoilder shares his journey into programming, his work on Nushell, and how Rust has shaped his development experience.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with WindSoilder, a contributor to Nushell, a shell that treats data as structured tables. WindSoilder shares his journey into programming, his work on Nushell, and how Rust has shaped his development experience.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet WindSoilder: Python developer and Rust enthusiast
  [@04:15] - Discovering Rust and starting with Nushell
  [@09:30] - Structured data pipelines in Nushell
  [@15:20] - Using Nushell for CSV, JSON, and HTTP tasks
  [@20:45] - Integrating Nushell with external commands and plugins
  [@27:35] - From contributor to core team member
  [@33:10] - Learning Rust through Nushell: Challenges and rewards
  [@38:50] - Upcoming features and improvements in Nushell
  [@44:25] - Advice for new contributors and Rust beginners
  [@47:40] - Final thoughts and community resources


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/WindSoilder">WindSoilder</a>, a contributor to <a href="https://github.com/nushell/nushell">Nushell</a>, a shell that treats data as structured tables. WindSoilder shares his journey into programming, his work on Nushell, and how Rust has shaped his development experience.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet WindSoilder: Python developer and Rust enthusiast</li>
  <li>[@04:15] - Discovering Rust and starting with Nushell</li>
  <li>[@09:30] - Structured data pipelines in Nushell</li>
  <li>[@15:20] - Using Nushell for CSV, JSON, and HTTP tasks</li>
  <li>[@20:45] - Integrating Nushell with external commands and plugins</li>
  <li>[@27:35] - From contributor to core team member</li>
  <li>[@33:10] - Learning Rust through Nushell: Challenges and rewards</li>
  <li>[@38:50] - Upcoming features and improvements in Nushell</li>
  <li>[@44:25] - Advice for new contributors and Rust beginners</li>
  <li>[@47:40] - Final thoughts and community resources</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-04-18-windsoilder.mp3" length="47726707" type="audio/mpeg"/>
			<itunes:duration>33:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/pete-membrey/</link>
			<pubDate>Mon, 24 Mar 2025 08:09:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/pete-membrey/</guid>
			

			<title><![CDATA[ ExpressVPN with Pete Membrey ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Pete Membrey, Chief Research Officer at Kape Technologies. Pete is a software engineer with a passion for bringing technology to better the world.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Pete Membrey, Chief Research Officer at Kape Technologies. Pete is a software engineer with a passion for bringing technology to better the world.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet Peter Memery, Chief Research Officer at ExpressVPN
  [@02:21] - Peter’s programming journey and transition to ExpressVPN
  [@11:15] - Building Lightway: From C to Rust
  [@24:10] - Why Rust is ideal for high-performance, secure systems
  [@35:48] - How ExpressVPN collaborates and scales with Rust
  [@42:00] - Advice for Rust beginners and high-performance programming
  [@48:38] - ExpressVPN’s contributions to open source and RUSTAsia 2025
  [@54:48] - Why Rust is “the way forward” for the industry


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://the.engineer/">Pete Membrey</a>, Chief Research Officer at <a href="https://www.kape.com/">Kape Technologies</a>. Pete is a software engineer with a passion for bringing technology to better the world.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet Peter Memery, Chief Research Officer at ExpressVPN</li>
  <li>[@02:21] - Peter’s programming journey and transition to ExpressVPN</li>
  <li>[@11:15] - Building <a href="https://www.expressvpn.com/lightway">Lightway</a>: From C to Rust</li>
  <li>[@24:10] - Why Rust is ideal for high-performance, secure systems</li>
  <li>[@35:48] - How ExpressVPN collaborates and scales with Rust</li>
  <li>[@42:00] - Advice for Rust beginners and high-performance programming</li>
  <li>[@48:38] - ExpressVPN’s contributions to open source and RUSTAsia 2025</li>
  <li>[@54:48] - Why Rust is “the way forward” for the industry</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2025-03-24-pete-membrey">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-03-24-pete-membrey.mp3" length="83998188" type="audio/mpeg"/>
			<itunes:duration>58:07</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/guillaume-gomez/</link>
			<pubDate>Sat, 08 Mar 2025 08:46:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/guillaume-gomez/</guid>
			

			<title><![CDATA[ Rust with Guillaume Gomez ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Guillaume Gomez, Principal Engineer at Huawei. Guillaume is an IT engineer who is a frequent contributor and reviewer of the Rust language and also participates in other opensource projects such as Servo.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Guillaume Gomez, Principal Engineer at Huawei. Guillaume is an IT engineer who is a frequent contributor and reviewer of the Rust language and also participates in other opensource projects such as Servo.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Meet Guillaume: how he got into Rust and his early contributions
  [11:09] - Exploring async in Rust
  [18:09] - GTK and other UI frameworks
  [28:53] - Discussing GCC’s Rust backend
  [43:39] - Guillaume’s recent work
  [46:46] - Concluding discussion


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma and Zeeshan Ali Khan
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma and <a href="https://toot.cat/@zeenix">Zeeshan Ali Khan</a> talk with <a href="https://guillaume-gomez.fr/">Guillaume Gomez</a>, Principal Engineer at <a href="https://www.huawei.com/">Huawei</a>. Guillaume is an IT engineer who is a frequent contributor and reviewer of the Rust language and also participates in other opensource projects such as <a href="https://github.com/servo/servo">Servo</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Meet Guillaume: how he got into Rust and his early contributions</li>
  <li>[11:09] - Exploring async in Rust</li>
  <li>[18:09] - GTK and other UI frameworks</li>
  <li>[28:53] - Discussing GCC’s Rust backend</li>
  <li>[43:39] - Guillaume’s recent work</li>
  <li>[46:46] - Concluding discussion</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2025-03-07-guillaume-gomez">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a> and <a href="https://toot.cat/@zeenix">Zeeshan Ali Khan</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-03-08-guillaume-gomez.mp3" length="73251810" type="audio/mpeg"/>
			<itunes:duration>50:42</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/vitaly-bragilevsky-rustrover/</link>
			<pubDate>Thu, 20 Feb 2025 07:45:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/vitaly-bragilevsky-rustrover/</guid>
			

			<title><![CDATA[ RustRover with Vitaly Bragilevsky ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Vitaly Bragilevsky, developer advocatge at JetBrains. RustRover is an IDE for Rust that is created by JetBrains that is free for non-commercial use.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Vitaly Bragilevsky, developer advocatge at JetBrains. RustRover is an IDE for Rust that is created by JetBrains that is free for non-commercial use.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet Vitaly Bragilevsky, Developer Advocate at JetBrains
  [@12:42] - What JetBrains does in Rust and their IDE products
  [@18:05] - Which IDE to use for Rust developers
  [@24:25] - Open source vs. commercial products at JetBrains
  [@37:45] - Any upcoming features for RustRover
  [@43:36] - Pricing and free use cases
  [@49:17] - Other programs at JetBrains


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://bravit.pro/">Vitaly Bragilevsky</a>, developer advocatge at <a href="https://www.jetbrains.com/">JetBrains</a>. <a href="https://www.jetbrains.com/rust/">RustRover</a> is an IDE for Rust that is created by JetBrains that is free for non-commercial use.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet Vitaly Bragilevsky, Developer Advocate at JetBrains</li>
  <li>[@12:42] - What JetBrains does in Rust and their IDE products</li>
  <li>[@18:05] - Which IDE to use for Rust developers</li>
  <li>[@24:25] - Open source vs. commercial products at JetBrains</li>
  <li>[@37:45] - Any upcoming features for RustRover</li>
  <li>[@43:36] - Pricing and free use cases</li>
  <li>[@49:17] - Other programs at JetBrains</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2025-02-17-vitaly-bragilevsky">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-02-20-vitaly-bragilevsky.mp3" length="79118260" type="audio/mpeg"/>
			<itunes:duration>54:47</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/matthias-endler/</link>
			<pubDate>Mon, 13 Jan 2025 18:14:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/matthias-endler/</guid>
			

			<title><![CDATA[ Lychee with Matthias Endler ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Matthias Endler, the creator of lychee, a stream-based link checker written in Rust that finds broken hyperlinks and mail addresses inside of HTML and Markdown documents as well as websites.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Matthias Endler, the creator of lychee, a stream-based link checker written in Rust that finds broken hyperlinks and mail addresses inside of HTML and Markdown documents as well as websites.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet Matthias: Rust consultant and creator of lychee
  [@01:55] - Protocol support, valid links, and lychee features
  [@14:51] - What inspired the creation of lychee
  [@19:25] - Supporting open-source projects and advice for creators starting their own
  [@32:17] - Staying on top of dependencies: why upgrading matters
  [@47:45] - New features being added to lychee


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://endler.dev/">Matthias Endler</a>, the creator of <a href="https://github.com/lycheeverse/lychee">lychee</a>, a stream-based link checker written in Rust that finds broken hyperlinks and mail addresses inside of HTML and Markdown documents as well as websites.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet Matthias: Rust consultant and creator of lychee</li>
  <li>[@01:55] - Protocol support, valid links, and lychee features</li>
  <li>[@14:51] - What inspired the creation of lychee</li>
  <li>[@19:25] - Supporting open-source projects and advice for creators starting their own</li>
  <li>[@32:17] - Staying on top of dependencies: why upgrading matters</li>
  <li>[@47:45] - New features being added to lychee</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2025-01-10-matthias-endler">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-01-13-matthias-endler.mp3" length="77474380" type="audio/mpeg"/>
			<itunes:duration>53:42</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/brenden-matthews-idiomatic-rust/</link>
			<pubDate>Sat, 04 Jan 2025 08:33:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/brenden-matthews-idiomatic-rust/</guid>
			

			<title><![CDATA[ Idiomatic Rust with Brenden Matthews ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Brenden Matthews, the author of the book Idiomatic Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Brenden Matthews, the author of the book Idiomatic Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet Brenden Matthews, author of Idiomatic Rust
  [@02:52] - Writing idiomatic Rust and the evolution of the book
  [@06:47] - Design patterns, idioms, and Rust coding practices
  [@12:36] - Structuring idiomatic Rust code
  [@33:57] - Advanced Rust features: pattern matching and traits
  [@42:51] - Coroutines, generators, and learning Rust idioms


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://brndn.io/">Brenden Matthews</a>, the author of the book <a href="https://www.manning.com/books/idiomatic-rust">Idiomatic Rust</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet Brenden Matthews, author of Idiomatic Rust</li>
  <li>[@02:52] - Writing idiomatic Rust and the evolution of the book</li>
  <li>[@06:47] - Design patterns, idioms, and Rust coding practices</li>
  <li>[@12:36] - Structuring idiomatic Rust code</li>
  <li>[@33:57] - Advanced Rust features: pattern matching and traits</li>
  <li>[@42:51] - Coroutines, generators, and learning Rust idioms</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2025-01-03-brenden-matthews">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2025-01-04-brenden-matthews.mp3" length="81466160" type="audio/mpeg"/>
			<itunes:duration>56:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/lars-bergstrom/</link>
			<pubDate>Fri, 27 Dec 2024 14:23:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/lars-bergstrom/</guid>
			

			<title><![CDATA[ Rust in Google with Lars Bergstrom ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Lars Bergstrom, Director of Engineering at Google, about Google’s use of Rust within Android. Android is Google’s main mobile operating system deployed to over 3 billion devices around the world.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Lars Bergstrom, Director of Engineering at Google, about Google’s use of Rust within Android. Android is Google’s main mobile operating system deployed to over 3 billion devices around the world.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Meet Lars Bergstrom
  [@03:06] - Updates on Android devices
  [@06:49] - Rust usage at Google and in Android development
  [@10:26] - Zig as a security-focused alternative
  [@22:52] - Native code development on Android
  [@24:56] - Comparing Rust and Go
  [@27:26] - Rust as an app development language
  [@32:12] - LLVM vs GCC
  [@40:15] - Concluding discussion


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://lars.com/">Lars Bergstrom</a>, Director of Engineering at Google, about Google’s use of Rust within Android. Android is Google’s main mobile operating system deployed to over 3 billion devices around the world.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Meet Lars Bergstrom</li>
  <li>[@03:06] - Updates on Android devices</li>
  <li>[@06:49] - Rust usage at Google and in Android development</li>
  <li>[@10:26] - <a href="https://ziglang.org/">Zig</a> as a security-focused alternative</li>
  <li>[@22:52] - Native code development on Android</li>
  <li>[@24:56] - Comparing Rust and Go</li>
  <li>[@27:26] - Rust as an app development language</li>
  <li>[@32:12] - LLVM vs GCC</li>
  <li>[@40:15] - Concluding discussion</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2024-12-23-lars-bergstrom">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-12-27-lars-bergstrom.mp3" length="60942802" type="audio/mpeg"/>
			<itunes:duration>42:12</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/daniel-thompson-yvetot/</link>
			<pubDate>Thu, 19 Dec 2024 07:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/daniel-thompson-yvetot/</guid>
			

			<title><![CDATA[ Tauri 2.0 with Daniel Thompson-Yvetot ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Daniel Thompson-Yvetot, co-founder of Tauri about Tauri’s 2.0 release. Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Daniel Thompson-Yvetot, co-founder of Tauri about Tauri’s 2.0 release. Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:33] - Daniel’s introduction to Tauri
  [@10:12] - Making Tauri small and secure
  [@18:38] - Multiplatform testing
  [@28:26] - CrabNebula &amp; its connection to Tauri
  [@35:31] - Running Tauri
  [@42:57] - Tauri 2.0 status


Other Resources

  Tauri’s Github


Other links

  RUSTAsia Conf 2025


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/nothingismagick">Daniel Thompson-Yvetot</a>, co-founder of <a href="https://tauri.app/">Tauri</a> about Tauri’s 2.0 release. Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:33] - Daniel’s introduction to Tauri</li>
  <li>[@10:12] - Making Tauri small and secure</li>
  <li>[@18:38] - Multiplatform testing</li>
  <li>[@28:26] - CrabNebula &amp; its connection to Tauri</li>
  <li>[@35:31] - Running Tauri</li>
  <li>[@42:57] - Tauri 2.0 status</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/tauri-apps/tauri">Tauri’s Github</a></li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2024-12-19-daniel-thompson">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-12-19-daniel-thompson-yvetot.mp3" length="64279919" type="audio/mpeg"/>
			<itunes:duration>44:28</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/pete-levasseur/</link>
			<pubDate>Sat, 02 Nov 2024 03:54:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/pete-levasseur/</guid>
			

			<title><![CDATA[ Eclipse uProtocol with Pete LeVasseur ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Pete LeVasseur about Eclipse uProtocol. uProtocol is a library to make services within automobiles to easily communicate with each other, no matter where they are in the vehicle.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Pete LeVasseur about Eclipse uProtocol. uProtocol is a library to make services within automobiles to easily communicate with each other, no matter where they are in the vehicle.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Pete LeVasseur, maintainer of Eclipse uProtocol, a software-defined communications framework
  [@15:34] - Journey to uProtocol
  [@22:19] - Understanding uProtocol
  [@43:25] - Rust adoption in the project and the automotive industry
  [@48:03] - Announcements &amp; concluding discussion


Other links

  RUSTAsia Conf 2025
  Pete’s Blog


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://petelevasseur.com/">Pete LeVasseur</a> about <a href="https://github.com/eclipse-uprotocol">Eclipse uProtocol</a>. uProtocol is a library to make services within automobiles to easily communicate with each other, no matter where they are in the vehicle.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Pete LeVasseur, maintainer of Eclipse uProtocol, a software-defined communications framework</li>
  <li>[@15:34] - Journey to uProtocol</li>
  <li>[@22:19] - Understanding uProtocol</li>
  <li>[@43:25] - Rust adoption in the project and the automotive industry</li>
  <li>[@48:03] - Announcements &amp; concluding discussion</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/">RUSTAsia Conf 2025</a></li>
  <li><a href="https://petelevasseur.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2024-11-02-pete-levasseur">Pete’s Blog</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-11-02-pete-levasseur.mp3" length="73171057" type="audio/mpeg"/>
			<itunes:duration>50:24</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.76-1.77-1.78/</link>
			<pubDate>Sat, 26 Oct 2024 08:36:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.76-1.77-1.78/</guid>
			

			<title><![CDATA[ What's New in Rust 1.76, 1.77, and 1.78 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.76, 1.77, and 1.78 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.76, 1.77, and 1.78 releases of Rust.

This episode was recorded as part of a YouTube live stream on
2024-05-18, which you can still
watch.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:34] - Rust 1.76


  [@01:18] - ABI compatibility updates
    
      The updated ABI section
      An interesting article on ABIs in Swift vs Rust
    
  
  [@08:53] - Type names from references
    
      type_name
      type_name_of_val
    
  
  [@10:35] - Stabilized APIs
    
      [@10:56] - Result::inspect
      [@13:53] - Arc::unwrap_or_clone
      [@15:25] - std::hash::DefaultHasher
      [@18:01] - ptr::addr_eq
    
  
  [@21:30] - Changelog deep-dive
    
      [@21:33] - Resize/hide rustdoc bars
    
  


[@22:40] - Rust 1.77


  [@22:51] - C-string literals
    
      std::ffi::CStr
    
  
  [@28:20] - Support for recursion in async fn
  [@31:43] - offset_of!
  [@36:32] - Enable strip in release profiles by default
  [@39:35] - Stabilized APIs
    
      [@39:36] - core::net
      [@40:59] - f64::round_ties_even
      [@42:05] - Mutex::clear_poison
      [@43:43] - File::create_new
        
          OpenOptions
        
      
    
  
  [@46:15] - Changelog deep-dive
    
      [@46:46] - Lint on references to static mut
        
          SyncUnsafeCell
        
      
      [@50:05] - Undeprecate unstable_features lint
      [@51:37] - Deny braced macro invocation in let-else
        
          Details from dtolnay comment
        
      
      [@55:45] - cargo:: in build scripts
      [@56:20] - Standardized package ID spec in Cargo
      [@57:36] - slice::first_chunk
    
  


[@59:55] - Rust 1.77.1

Stripping debug info in release builds broke Windows.

[@1:00:58] - Rust 1.77.2

Fixes CVE-2024-24576.

Detailed advisory,
fix, and current
logic.

[@1:04:54] - Rust 1.78


  [@1:07:55] - Diagnostic attributes
    
      #[diagnostic] documentation
    
  
  [@1:13:13] - Asserting unsafe preconditions
    
      Implementation PR
    
  
  [@1:19:56] - Deterministic realignment
  [@1:23:24] - Stabilized APIs
    
      [@1:23:33] - impl Read for &amp;Stdin
      [@1:24:03] - Relax bounds on Error trait implementations
    
  
  [@1:25:40] - Compatibility notes
    
      [@1:25:40] - Windows requirement bump
        
          Replace pthread RwLock
          Slim reader/writer locks
        
      
      [@1:29:25] - LLVM 18 brings *128 ABI change
    
  
  [@1:32:04] - Changelog deep-dive
    
      [@1:32:04] - Make non-PartialEq-typed consts as patterns a hard error
      [@1:34:59] - Suggest moving definition if non-found macro_rules! is defined later
      [@1:36:08] - Stabilize v4 of Cargo lockfile
      [@1:37:36] - cargo update highlights stale dependencies
      [@1:38:23] - Deprecate non-extension .cargo/config files
      [@1:39:19] - Clippy lint assigning_clones
      [@1:40:49] - Clippy lint incompatible_msrv
      [@1:42:22] - cargo new stopped commenting in Cargo.toml
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.76, 1.77, and 1.78 releases of Rust.</p>

<p>This episode was recorded as part of a YouTube live stream on
2024-05-18, which you can <a href="https://www.youtube.com/live/VpSXTJXX1YA?t=7037s">still
watch</a>.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0034---rust-176">[@00:34] - <a href="https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html">Rust 1.76</a></h4>

<ul>
  <li>[@01:18] - <a href="https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html#abi-compatibility-updates">ABI compatibility updates</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/primitive.fn.html#abi-compatibility">The updated ABI section</a></li>
      <li><a href="https://faultlore.com/blah/swift-abi/">An interesting article on ABIs in Swift vs Rust</a></li>
    </ul>
  </li>
  <li>[@08:53] - <a href="https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html#type-names-from-references">Type names from references</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/any/fn.type_name.html"><code>type_name</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/any/fn.type_name_of_val.html"><code>type_name_of_val</code></a></li>
    </ul>
  </li>
  <li>[@10:35] - <a href="https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@10:56] - <a href="https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.inspect"><code>Result::inspect</code></a></li>
      <li>[@13:53] - <a href="https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.unwrap_or_clone"><code>Arc::unwrap_or_clone</code></a></li>
      <li>[@15:25] - <a href="https://doc.rust-lang.org/stable/std/hash/index.html#structs"><code>std::hash::DefaultHasher</code></a></li>
      <li>[@18:01] - <a href="https://doc.rust-lang.org/stable/std/ptr/fn.addr_eq.html"><code>ptr::addr_eq</code></a></li>
    </ul>
  </li>
  <li>[@21:30] - Changelog deep-dive
    <ul>
      <li>[@21:33] - <a href="https://github.com/rust-lang/rust/pull/115660/">Resize/hide rustdoc bars</a></li>
    </ul>
  </li>
</ul>

<h4 id="2240---rust-177">[@22:40] - <a href="https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html">Rust 1.77</a></h4>

<ul>
  <li>[@22:51] - <a href="https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html#c-string-literals">C-string literals</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/ffi/struct.CStr.html"><code>std::ffi::CStr</code></a></li>
    </ul>
  </li>
  <li>[@28:20] - <a href="https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html#support-for-recursion-in-async-fn">Support for recursion in <code>async fn</code></a></li>
  <li>[@31:43] - <a href="https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html#offset_of"><code>offset_of!</code></a></li>
  <li>[@36:32] - <a href="https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html#enable-strip-in-release-profiles-by-default">Enable strip in release profiles by default</a></li>
  <li>[@39:35] - <a href="https://blog.rust-lang.org/2024/03/21/Rust-1.77.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@39:36] - <a href="https://doc.rust-lang.org/stable/core/net/index.html"><code>core::net</code></a></li>
      <li>[@40:59] - <a href="https://doc.rust-lang.org/stable/std/primitive.f64.html#method.round_ties_even"><code>f64::round_ties_even</code></a></li>
      <li>[@42:05] - <a href="https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html#method.clear_poison"><code>Mutex::clear_poison</code></a></li>
      <li>[@43:43] - <a href="https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.create_new"><code>File::create_new</code></a>
        <ul>
          <li><a href="https://doc.rust-lang.org/std/fs/struct.OpenOptions.html"><code>OpenOptions</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[@46:15] - Changelog deep-dive
    <ul>
      <li>[@46:46] - <a href="https://github.com/rust-lang/rust/pull/117556/">Lint on references to <code>static mut</code></a>
        <ul>
          <li><a href="https://doc.rust-lang.org/std/cell/struct.SyncUnsafeCell.html"><code>SyncUnsafeCell</code></a></li>
        </ul>
      </li>
      <li>[@50:05] - <a href="https://github.com/rust-lang/rust/pull/118639/">Undeprecate <code>unstable_features</code> lint</a></li>
      <li>[@51:37] - <a href="https://github.com/rust-lang/rust/pull/119062/">Deny braced macro invocation in let-else</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/issues/119057#issuecomment-1859319858">Details from <code>dtolnay</code> comment</a></li>
        </ul>
      </li>
      <li>[@55:45] - <a href="https://github.com/rust-lang/cargo/pull/12201"><code>cargo::</code> in build scripts</a></li>
      <li>[@56:20] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/pkgid-spec.html">Standardized package ID spec in Cargo</a></li>
      <li>[@57:36] - <a href="https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first_chunk"><code>slice::first_chunk</code></a></li>
    </ul>
  </li>
</ul>

<h4 id="5955---rust-1771">[@59:55] - <a href="https://blog.rust-lang.org/2024/03/28/Rust-1.77.1.html">Rust 1.77.1</a></h4>

<p>Stripping debug info in release builds broke Windows.</p>

<h4 id="10058---rust-1772">[@1:00:58] - <a href="https://blog.rust-lang.org/2024/04/09/Rust-1.77.2.html">Rust 1.77.2</a></h4>

<p>Fixes <a href="https://www.cve.org/CVERecord?id=CVE-2024-24576">CVE-2024-24576</a>.</p>

<p><a href="https://blog.rust-lang.org/2024/04/09/cve-2024-24576.html">Detailed advisory</a>,
<a href="https://github.com/rust-lang/rust/pull/123681">fix</a>, and <a href="https://github.com/rust-lang/rust/blob/ae4c6b66402cdbda8daa626216efd94e2dbe94b2/library/std/src/sys/pal/windows/args.rs#L324">current
logic</a>.</p>

<h4 id="10454---rust-178">[@1:04:54] - <a href="https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html">Rust 1.78</a></h4>

<ul>
  <li>[@1:07:55] - <a href="https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html#diagnostic-attributes">Diagnostic attributes</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/nightly/reference/attributes/diagnostics.html#the-diagnostic-tool-attribute-namespace"><code>#[diagnostic]</code> documentation</a></li>
    </ul>
  </li>
  <li>[@1:13:13] - <a href="https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html#asserting-unsafe-preconditions">Asserting <code>unsafe</code> preconditions</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/120594/">Implementation PR</a></li>
    </ul>
  </li>
  <li>[@1:19:56] - <a href="https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html#deterministic-realignment">Deterministic realignment</a></li>
  <li>[@1:23:24] - <a href="https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@1:23:33] - <a href="https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#impl-Read-for-%26Stdin"><code>impl Read for &amp;Stdin</code></a></li>
      <li>[@1:24:03] - <a href="https://github.com/rust-lang/rust/pull/113833/">Relax bounds on <code>Error</code> trait implementations</a></li>
    </ul>
  </li>
  <li>[@1:25:40] - <a href="https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html#compatibility-notes">Compatibility notes</a>
    <ul>
      <li>[@1:25:40] - <a href="https://blog.rust-lang.org/2024/02/26/Windows-7.html">Windows requirement bump</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/110211/">Replace pthread <code>RwLock</code></a></li>
          <li><a href="https://learn.microsoft.com/en-us/windows/win32/sync/slim-reader-writer--srw--locks">Slim reader/writer locks</a></li>
        </ul>
      </li>
      <li>[@1:29:25] - <a href="https://blog.rust-lang.org/2024/03/30/i128-layout-update.html">LLVM 18 brings <code>*128</code> ABI change</a></li>
    </ul>
  </li>
  <li>[@1:32:04] - Changelog deep-dive
    <ul>
      <li>[@1:32:04] - <a href="https://github.com/rust-lang/rust/pull/120805/">Make non-<code>PartialEq</code>-typed consts as patterns a hard error</a></li>
      <li>[@1:34:59] - <a href="https://github.com/rust-lang/rust/pull/121130/">Suggest moving definition if non-found macro_rules! is defined later</a></li>
      <li>[@1:36:08] - <a href="https://github.com/rust-lang/cargo/pull/12852">Stabilize v4 of Cargo lockfile</a></li>
      <li>[@1:37:36] - <a href="https://github.com/rust-lang/cargo/pull/13372"><code>cargo update</code> highlights stale dependencies</a></li>
      <li>[@1:38:23] - <a href="https://github.com/rust-lang/cargo/pull/13349">Deprecate non-extension <code>.cargo</code>/<code>config</code> files</a></li>
      <li>[@1:39:19] - <a href="https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones">Clippy lint <code>assigning_clones</code></a></li>
      <li>[@1:40:49] - <a href="https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv">Clippy lint <code>incompatible_msrv</code></a></li>
      <li>[@1:42:22] - <a href="https://github.com/rust-lang/cargo/pull/13371"><code>cargo new</code> stopped commenting in <code>Cargo.toml</code></a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://thesquareplanet.com/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-10-26-rust-1.76-1.77-1.78.mp3" length="126680293" type="audio/mpeg"/>
			<itunes:duration>01:45:34</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/stephen-blum/</link>
			<pubDate>Sun, 13 Oct 2024 07:17:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/stephen-blum/</guid>
			

			<title><![CDATA[ PubNub with Stephen Blum ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Stephen Blum about PubNub. PubNub is a real-time communication platform and infrastructure-as-a-service company that is integrating Rust into their stack.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Stephen Blum about PubNub. PubNub is a real-time communication platform and infrastructure-as-a-service company that is integrating Rust into their stack.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Stephen Blum, CTO &amp; Co-founder of PubNub
  [@06:43] - Implementing Rust in PubNub’s infrastructure
  [@15:19] - Rust rewrite insights
  [@16:41] - PubNub’s hiring process
  [@19:35] - Discussing concurrency
  [@22:07] - Pros and cons of full vs partial Rust rewrites
  [@30:39] - Closing discussion


Other links

  RUSTAsia Conf 2025


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://x.com/stephenlb">Stephen Blum</a> about <a href="https://www.pubnub.com/">PubNub</a>. PubNub is a real-time communication platform and infrastructure-as-a-service company that is integrating Rust into their stack.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Stephen Blum, CTO &amp; Co-founder of PubNub</li>
  <li>[@06:43] - Implementing Rust in PubNub’s infrastructure</li>
  <li>[@15:19] - Rust rewrite insights</li>
  <li>[@16:41] - PubNub’s hiring process</li>
  <li>[@19:35] - Discussing concurrency</li>
  <li>[@22:07] - Pros and cons of full vs partial Rust rewrites</li>
  <li>[@30:39] - Closing discussion</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2024-10-13-stephen-blum">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-10-13-stephen-blum.mp3" length="47559570" type="audio/mpeg"/>
			<itunes:duration>32:48</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.74-1.75/</link>
			<pubDate>Wed, 09 Oct 2024 06:47:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.74-1.75/</guid>
			

			<title><![CDATA[ What's New in Rust 1.74 and 1.75 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.74 and 1.75 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.74 and 1.75 releases of Rust.

This episode was recorded as part of a YouTube live stream on
2024-05-18, which you can still
watch.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:13] - Rust 1.74


  [@00:21] - Lint configuration through Cargo
  [@07:42] - Cargo registry authentication
    
      Cargo documentation
    
  
  [@11:02] - Projections into opaque return types
  [@14:23] - Stabilized APIs
    
      [@14:23] - io::Error::other
      [@15:38] - Saturating wrapper type
      [@18:43] - const transmute_copy
    
  
  [@18:03] - Compatibility notes
  [@20:51] - Changelog deep-dive
    
      [@20:51] - --keep-going
      [@22:42] - Cargo -p partial versions
      [@24:21] - Warning boxes in rustdoc
      [@26:02] - Generic parameters in rustdoc search
      [@29:08] - impl Step for Ipv4
      [@31:33] - private_in_public lint
        
          RFC 2145
        
      
      [@36:02] - New Cargo lockfile recommendation
        
          Rationale
        
      
    
  


[@37:34] - Rust 1.74.1

No super interesting changes.

But, check in on PR filed during stream.

[@41:56] - Rust 1.75


  [@41:56] - async fn and -&gt; impl Trait in traits
    
      Blog announcing what’s actually stabilizing
      Jon’s impl Trait talk
    
  
  [@55:34] - Pointer byte offset APIs
  [@58:22] - Code layout optimizations for rustc
    
      BOLT
    
  
  [@1:04:34] - Stabilized APIs
    
      [@1:04:34] - Atomic*::from_ptr
      [@1:06:42] - OS-independent file times
      [@1:07:46] - Option::as_slice
        
          Long reddit comment
        
      
    
  
  [@1:09:59] - Changelog deep-dive
    
      [@1:09:59] - impl BufRead for VecDeque&lt;u8&gt;
      [@1:12:40] - Workspace-aware cargo new
      [@1:13:20] - matching with exhaustive integer ranges
      [@1:14:52] - Cross-crate auto-inlining for small fns
      [@1:18:31] - Cargo output hyperlinking
    
  


[@1:22:00] - Mid-stream PR check-in

Another PR check-in and tracking in homu rustc build queue.

Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.74 and 1.75 releases of Rust.</p>

<p>This episode was recorded as part of a YouTube live stream on
2024-05-18, which you can <a href="https://www.youtube.com/live/VpSXTJXX1YA?t=7037s">still
watch</a>.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0013---rust-174">[@00:13] - <a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html">Rust 1.74</a></h4>

<ul>
  <li>[@00:21] - <a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html#lint-configuration-through-cargo">Lint configuration through Cargo</a></li>
  <li>[@07:42] - <a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html#cargo-registry-authentication">Cargo registry authentication</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/beta/cargo/reference/registry-authentication.html">Cargo documentation</a></li>
    </ul>
  </li>
  <li>[@11:02] - <a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html#projections-in-opaque-return-types">Projections into opaque return types</a></li>
  <li>[@14:23] - <a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html#projections-in-opaque-return-types">Stabilized APIs</a>
    <ul>
      <li>[@14:23] - <a href="https://doc.rust-lang.org/stable/std/io/struct.Error.html#method.other"><code>io::Error::other</code></a></li>
      <li>[@15:38] - <a href="https://doc.rust-lang.org/stable/std/num/struct.Saturating.html"><code>Saturating</code> wrapper type</a></li>
      <li>[@18:43] - <a href="https://doc.rust-lang.org/stable/std/mem/fn.transmute_copy.html"><code>const transmute_copy</code></a></li>
    </ul>
  </li>
  <li>[@18:03] - <a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html#compatibility-notes">Compatibility notes</a></li>
  <li>[@20:51] - Changelog deep-dive
    <ul>
      <li>[@20:51] - <a href="https://github.com/rust-lang/cargo/pull/12568/"><code>--keep-going</code></a></li>
      <li>[@22:42] - <a href="https://github.com/rust-lang/cargo/pull/12614/">Cargo <code>-p</code> partial versions</a></li>
      <li>[@24:21] - <a href="https://github.com/rust-lang/rust/pull/106561/">Warning boxes in rustdoc</a></li>
      <li>[@26:02] - <a href="https://github.com/rust-lang/rust/pull/112725/">Generic parameters in rustdoc search</a></li>
      <li>[@29:08] - <a href="https://github.com/rust-lang/rust/pull/113748/"><code>impl Step for Ipv4</code></a></li>
      <li>[@31:33] - <a href="https://github.com/rust-lang/rust/pull/113126/"><code>private_in_public</code> lint</a>
        <ul>
          <li><a href="https://rust-lang.github.io/rfcs/2145-type-privacy.html">RFC 2145</a></li>
        </ul>
      </li>
      <li>[@36:02] - <a href="https://doc.rust-lang.org/nightly/cargo/guide/cargo-toml-vs-cargo-lock.html">New Cargo lockfile recommendation</a>
        <ul>
          <li><a href="https://doc.rust-lang.org/nightly/cargo/faq.html#why-have-cargolock-in-version-control">Rationale</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="3734---rust-1741">[@37:34] - <a href="https://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html">Rust 1.74.1</a></h4>

<p>No super interesting changes.</p>

<p>But, check in on <a href="https://github.com/rust-lang/rust/pull/125251">PR filed during stream</a>.</p>

<h4 id="4156---rust-175">[@41:56] - <a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html">Rust 1.75</a></h4>

<ul>
  <li>[@41:56] - <a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html#async-fn-and-return-position-impl-trait-in-traits"><code>async fn</code> and <code>-&gt; impl Trait</code> in traits</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-traits.html">Blog announcing what’s actually stabilizing</a></li>
      <li><a href="https://www.youtube.com/watch?v=CWiz_RtA1Hw">Jon’s <code>impl Trait</code> talk</a></li>
    </ul>
  </li>
  <li>[@55:34] - <a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html#pointer-byte-offset-apis">Pointer byte offset APIs</a></li>
  <li>[@58:22] - <a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html#code-layout-optimizations-for-rustc">Code layout optimizations for rustc</a>
    <ul>
      <li><a href="https://github.com/llvm/llvm-project/blob/main/bolt/README.md">BOLT</a></li>
    </ul>
  </li>
  <li>[@1:04:34] - <a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@1:04:34] - <a href="https://doc.rust-lang.org/stable/core/sync/atomic/struct.AtomicUsize.html#method.from_ptr"><code>Atomic*::from_ptr</code></a></li>
      <li>[@1:06:42] - <a href="https://doc.rust-lang.org/stable/std/fs/struct.FileTimes.html">OS-independent file times</a></li>
      <li>[@1:07:46] - <a href="https://doc.rust-lang.org/stable/core/option/enum.Option.html#method.as_slice"><code>Option::as_slice</code></a>
        <ul>
          <li><a href="https://www.reddit.com/r/rust/comments/18sxw4d/comment/kfajwbv/">Long reddit comment</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[@1:09:59] - Changelog deep-dive
    <ul>
      <li>[@1:09:59] - <a href="https://github.com/rust-lang/rust/pull/110604/"><code>impl BufRead for VecDeque&lt;u8&gt;</code></a></li>
      <li>[@1:12:40] - <a href="https://github.com/rust-lang/cargo/pull/12779/">Workspace-aware <code>cargo new</code></a></li>
      <li>[@1:13:20] - <a href="https://github.com/rust-lang/rust/pull/116692/">matching with exhaustive integer ranges</a></li>
      <li>[@1:14:52] - <a href="https://github.com/rust-lang/rust/pull/116505">Cross-crate auto-inlining for small <code>fn</code>s</a></li>
      <li>[@1:18:31] - <a href="https://github.com/rust-lang/cargo/pull/12889">Cargo output hyperlinking</a></li>
    </ul>
  </li>
</ul>

<h4 id="12200---mid-stream-pr-check-in">[@1:22:00] - Mid-stream PR check-in</h4>

<p>Another PR check-in and tracking in <a href="https://bors.rust-lang.org/queue/rust">homu rustc build queue</a>.</p>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-10-09-rust-1.74-1.75.mp3" length="100279902" type="audio/mpeg"/>
			<itunes:duration>01:23:33</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/andrew-lamb/</link>
			<pubDate>Sat, 31 Aug 2024 07:21:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/andrew-lamb/</guid>
			

			<title><![CDATA[ Rebuilding InfluxDB with Rust with Andrew Lamb ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Andrew Lamb about InfluxDB’s rewrite. InfluxDB is an open-source time series database.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Andrew Lamb about InfluxDB’s rewrite. InfluxDB is an open-source time series database.

As a Staff Engineer at InfluxData, he works on InfluxDB 3.0, a new time series database written in Rust, focusing on query processing and the Apache Arrow DataFusion and Apache Arrow ecosystems. In that capacity, he is a member and past chair of the Apache Arrow PMC and actively contributes to Apache Arrow DataFusion and the Apache Rust implementation query engine.

Andrew was a professional C/C++ programmer for 10 years before switching to Rust. His experience ranges from startups to large multinational corporations and distributed open source projects, and has paid leadership dues as an architect and manager/VP. He holds an SB and MEng from MIT in Electrical Engineering and Computer Science.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:52] - Meet Andrew Lamb, Staff Engineer at InfluxData, working on InfluxDB IOx
  [@2:57] - Transitioning from C++ to Rust: Andrew’s story
  [@11:24] - InfluxDB rewrite and its use cases
  [@22:13] - Compatibility of InfluxDB
  [@26:58] - Downsides of using Rust and other languages
  [@32:40] - Plans for the 3.0 alpha/beta release and different versions
  [@34:54] - Unique use of the async runtime Tokio
  [@55:28] - Rust as a tool for recruitment
  [@58:16] - Closing discussion


Other links

  Andrew’s X Account
  Using Rustlang’s Async Tokio Runtime for CPU-Bound Tasks
  Using the FDAP Architecture to build InfluxDB 3.0
  RUSTAsia Conf 2025


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="http://andrew.nerdnetworks.org/">Andrew Lamb</a> about <a href="https://www.influxdata.com/blog/flight-datafusion-arrow-parquet-fdap-architecture-influxdb/">InfluxDB’s rewrite</a>. InfluxDB is an open-source time series database.</p>

<p>As a Staff Engineer at InfluxData, he works on InfluxDB 3.0, a new time series database written in Rust, focusing on query processing and the Apache Arrow DataFusion and Apache Arrow ecosystems. In that capacity, he is a member and past chair of the Apache Arrow PMC and actively contributes to Apache Arrow DataFusion and the Apache Rust implementation query engine.</p>

<p>Andrew was a professional C/C++ programmer for 10 years before switching to Rust. His experience ranges from startups to large multinational corporations and distributed open source projects, and has paid leadership dues as an architect and manager/VP. He holds an SB and MEng from MIT in Electrical Engineering and Computer Science.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:52] - Meet Andrew Lamb, Staff Engineer at InfluxData, working on InfluxDB IOx</li>
  <li>[@2:57] - Transitioning from C++ to Rust: Andrew’s story</li>
  <li>[@11:24] - InfluxDB rewrite and its use cases</li>
  <li>[@22:13] - Compatibility of InfluxDB</li>
  <li>[@26:58] - Downsides of using Rust and other languages</li>
  <li>[@32:40] - Plans for the 3.0 alpha/beta release and different versions</li>
  <li>[@34:54] - Unique use of the async runtime Tokio</li>
  <li>[@55:28] - Rust as a tool for recruitment</li>
  <li>[@58:16] - Closing discussion</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://twitter.com/andrewlamb1111">Andrew’s X Account</a></li>
  <li><a href="https://thenewstack.io/using-rustlangs-async-tokio-runtime-for-cpu-bound-tasks/">Using Rustlang’s Async Tokio Runtime for CPU-Bound Tasks</a></li>
  <li><a href="https://www.influxdata.com/blog/flight-datafusion-arrow-parquet-fdap-architecture-influxdb/">Using the FDAP Architecture to build InfluxDB 3.0</a></li>
  <li><a href="https://www.rustasiaconf.com/?utm_source=podcast&amp;utm_medium=rustacean-station&amp;utm_campaign=2024-08-31-andrew-lamb">RUSTAsia Conf 2025</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-08-31-andrew-lamb.mp3" length="87557234" type="audio/mpeg"/>
			<itunes:duration>1:00:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/benno-van-den-berg/</link>
			<pubDate>Mon, 12 Aug 2024 06:41:01 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/benno-van-den-berg/</guid>
			

			<title><![CDATA[ Exploring Fiberplane's 3-Year Rust Journey, with Benno van den Berg ]]></title>
			<itunes:summary><![CDATA[ Benno van der Berg, Principal Software Engineer at Fiberplane, 
sits down with Luca Palmieri.
 ]]></itunes:summary>
			<description><![CDATA[ Benno van der Berg, Principal Software Engineer at Fiberplane, 
sits down with Luca Palmieri.

They discuss Fiberplane’s 3-years long journey with Rust, building an interactive observability notebook.
They touch on Benno’s experience switching from .NET to Rust and share insights on using Rust for a commercial product, 
including the reasons behind Fiberplane’s Rust adoption. They then dive into the challenges of maintaining Fiberplane’s 
codebase and conclude with a few tips for developers looking for Rust jobs.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:33] - Start of the interview
  [@01:17] - Benno’s journey as a Software Engineer
  [@04:29] - Fiberplane’s products
  [@07:05] - Building an observability product in Rust
  [@09:25] - Uses for Rust at Fiberplane
  [@13:30] - WASM and front end
  [@22:04] - Fiberplane’s 3-year experience with Rust
  [@32:43] - Benno’s advice for developers seeking Rust jobs
  [@35:28] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Luca Palmieri
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://www.linkedin.com/in/bennovandenberg/">Benno van der Berg</a>, Principal Software Engineer at <a href="https://fiberplane.com/">Fiberplane</a>, 
sits down with Luca Palmieri.</p>

<p>They discuss Fiberplane’s 3-years long journey with Rust, building an interactive observability notebook.<br />
They touch on Benno’s experience switching from .NET to Rust and share insights on using Rust for a commercial product, 
including the reasons behind Fiberplane’s Rust adoption. They then dive into the challenges of maintaining Fiberplane’s 
codebase and conclude with a few tips for developers looking for Rust jobs.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2024/04/11/fiberplanes-three-year-rust-journey/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:33] - Start of the interview</li>
  <li>[@01:17] - Benno’s journey as a Software Engineer</li>
  <li>[@04:29] - Fiberplane’s products</li>
  <li>[@07:05] - Building an observability product in Rust</li>
  <li>[@09:25] - Uses for Rust at Fiberplane</li>
  <li>[@13:30] - WASM and front end</li>
  <li>[@22:04] - Fiberplane’s 3-year experience with Rust</li>
  <li>[@32:43] - Benno’s advice for developers seeking Rust jobs</li>
  <li>[@35:28] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://lpalmieri.com/">Luca Palmieri</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-08-12-benno-van-den-berg-2.mp3" length="34966883" type="audio/mpeg"/>
			<itunes:duration>36:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/florent-becart/</link>
			<pubDate>Mon, 29 Jul 2024 09:49:01 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/florent-becart/</guid>
			

			<title><![CDATA[ Full-stack development of a B2B payment infrastructure in Rust, with Florent Bécart ]]></title>
			<itunes:summary><![CDATA[ Florent Bécart, CTO at Nikulipe, 
sits down with Luca Palmieri.
 ]]></itunes:summary>
			<description><![CDATA[ Florent Bécart, CTO at Nikulipe, 
sits down with Luca Palmieri.

Florent discusses Nikulipe’s reasons for adopting Rust: lower operational costs, scalability, safety, security and 
maintainability. Nikulipe has also made a bet on Rust for its frontend development needs, using Yew and WebAssembly.
The interview closes with an overview of the challenges they faced, including long compile times and workspace management.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:33] - Start of the interview
  [@01:22] - Florent’s presentation
  [@02:56] - Nikulipe’s decision to adopt Rust
  [@05:10] - Managing spiky workloads with Rust
  [@06:41] - Using Rust for frontend development
  [@13:05] - Nikulipe’s challenges working with Rust
  [@22:31] - The future of Rust at Nikulipe
  [@23:37] - Florent’s advice on Rust for decision-makers
  [@26:30] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Luca Palmieri
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://www.linkedin.com/in/florent-becart-89942922/">Florent Bécart</a>, CTO at <a href="https://nikulipe.com/">Nikulipe</a>, 
sits down with Luca Palmieri.</p>

<p>Florent discusses Nikulipe’s reasons for adopting Rust: lower operational costs, scalability, safety, security and 
maintainability. Nikulipe has also made a bet on Rust for its frontend development needs, using Yew and WebAssembly.<br />
The interview closes with an overview of the challenges they faced, including long compile times and workspace management.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2024/06/07/payment-infrastructure-with-rust/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:33] - Start of the interview</li>
  <li>[@01:22] - Florent’s presentation</li>
  <li>[@02:56] - Nikulipe’s decision to adopt Rust</li>
  <li>[@05:10] - Managing spiky workloads with Rust</li>
  <li>[@06:41] - Using Rust for frontend development</li>
  <li>[@13:05] - Nikulipe’s challenges working with Rust</li>
  <li>[@22:31] - The future of Rust at Nikulipe</li>
  <li>[@23:37] - Florent’s advice on Rust for decision-makers</li>
  <li>[@26:30] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://lpalmieri.com/">Luca Palmieri</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-07-29-florent-becart.mp3" length="67208730" type="audio/mpeg"/>
			<itunes:duration>27:13</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/sam-van-overmeire/</link>
			<pubDate>Fri, 21 Jun 2024 07:08:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/sam-van-overmeire/</guid>
			

			<title><![CDATA[ Write Powerful Rust Macros with Sam Van Overmeire ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Sam Van Overmeire about Write Powerful Rust Macros, a book about writing macros within your Rust apps. Manning discount code: podrustacean24
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Sam Van Overmeire about Write Powerful Rust Macros, a book about writing macros within your Rust apps. Manning discount code: podrustacean24

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Sam Van Overmeire, developer &amp; cloud consultant, author of Write Powerful Rust Macros
  [@09:00] - Why he chose to write about macros and the process of writing the book
  [@13:19] - Types of macros and book content
  [@19:38] - Macro security and more details about the book
  [@27:56] - Most interesting macros
  [@30:32] - When to write a macro and when not to
  [@36:59] - Manning Publishing and other Rust books
  [@41:51] - Closing discussion


Other links

  https://www.newline.co/fullstack-rust — one of the books with the most extensive info on macros
  Jetbrains has an interesting series of blog posts about macros, useful for beginners
  proc-macro workshop by David Tolnay, implemented in some great videos by Jon Gjengset: https://www.youtube.com/watch?v=geovSK3wMB8


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://medium.com/@sam.van.overmeire">Sam Van Overmeire</a> about <a href="https://www.manning.com/books/write-powerful-rust-macros">Write Powerful Rust Macros</a>, a book about writing macros within your Rust apps. Manning discount code: podrustacean24</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Sam Van Overmeire, developer &amp; cloud consultant, author of <em>Write Powerful Rust Macros</em></li>
  <li>[@09:00] - Why he chose to write about macros and the process of writing the book</li>
  <li>[@13:19] - Types of macros and book content</li>
  <li>[@19:38] - Macro security and more details about the book</li>
  <li>[@27:56] - Most interesting macros</li>
  <li>[@30:32] - When to write a macro and when not to</li>
  <li>[@36:59] - Manning Publishing and other Rust books</li>
  <li>[@41:51] - Closing discussion</li>
</ul>

<h2 id="other-links">Other links</h2>
<ul>
  <li><a href="https://www.newline.co/fullstack-rust">https://www.newline.co/fullstack-rust</a> — one of the books with the most extensive info on macros</li>
  <li><a href="https://blog.jetbrains.com/rust/2022/03/18/procedural-macros-under-the-hood-part-i/">Jetbrains has an interesting series of blog posts about macros, useful for beginners</a></li>
  <li><a href="https://github.com/dtolnay/proc-macro-workshop">proc-macro workshop by David Tolnay</a>, implemented in some great videos by Jon Gjengset: <a href="https://www.youtube.com/watch?v=geovSK3wMB8">https://www.youtube.com/watch?v=geovSK3wMB8</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-06-21-sam-van-overmeire.mp3" length="64985317" type="audio/mpeg"/>
			<itunes:duration>44:44</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.72-1.73/</link>
			<pubDate>Tue, 18 Jun 2024 06:54:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.72-1.73/</guid>
			

			<title><![CDATA[ What's New in Rust 1.72 and 1.73 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.72 and 1.73 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.72 and 1.73 releases of Rust.

This episode was recorded as part of a YouTube live stream on
2024-05-18, which you can still
watch.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@03:49] - Rust 1.72.0


  [@04:24] - Report cfg-hidden items
  [@08:49] - Unlimited const evaluation time
    
      The 2M limit
    
  
  [@12:52] - Uplifted clippy lints
  [@16:53] - Stabilized APIs
    
      impl Sync for mpsc::Sender
      String::leak
        
          ACP for String::leak
          PR filed live
        
      
    
  
  [@25:46] - Future Windows compatibility
  [@26:20] - Changelog deep-dive
    
      [@26:38] - -O -
      [@27:43] - Rustdoc search
        
          Whitespace as path separator
          Search for slices and arrays
        
      
      [@30:58] - Cargo will bail if build script uses cargo:: (actually in 1.73)
      [@34:13] - Cargo if workspace uses old resolver
      [@35:12] - cargo-add will better preserve Cargo.toml
      [@36:11] - rustfmt let-else
      [@37:49] - cargo -Zscript
    
  


[@41:05] - Rust 1.72.1

[@43:37] - Rust 1.73.0


  [@43:45] - Cleaner panic messages
  [@46:58] - Thread local initialization
  [@51:12] - Stabilized APIs
    
      {integer}::next_multiple_of
    
  
  [@54:53] - Changelog deep-dive
    
      [@55:00] - Unconditional recursion in drop
      [@56:04] - Write Rust’s version into .comment section
        
          Embed dependency versions into binary with cargo-sbom
        
      
      [@58:30] - I/O traits for Arc&lt;File&gt;
      [@59:34] - Make cargo --help easier to browse
      [@1:03:01] - Merge io::Sink into io::Empty
      [@1:05:11] - impl SliceIndex&lt;str&gt; for (Bound&lt;usize&gt;, Bound&lt;usize&gt;)
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.72 and 1.73 releases of Rust.</p>

<p>This episode was recorded as part of a YouTube live stream on
2024-05-18, which you can <a href="https://youtube.com/live/VpSXTJXX1YA">still
watch</a>.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0349---rust-1720">[@03:49] - <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html">Rust 1.72.0</a></h4>

<ul>
  <li>[@04:24] - <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html#rust-reports-potentially-useful-cfg-disabled-items-in-errors">Report cfg-hidden items</a></li>
  <li>[@08:49] - <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html#const-evaluation-time-is-now-unlimited">Unlimited <code>const</code> evaluation time</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/blob/bb97203e37bbdd4588bd684728002077d0073978/compiler/rustc_const_eval/src/const_eval/machine.rs#L38">The 2M limit</a></li>
    </ul>
  </li>
  <li>[@12:52] - <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html#uplifted-lints-from-clippy">Uplifted clippy lints</a></li>
  <li>[@16:53] - <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/sync/mpsc/struct.Sender.html#impl-Sync-for-Sender%3CT%3E"><code>impl Sync for mpsc::Sender</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/sync/mpsc/struct.Sender.html#impl-Sync-for-Sender%3CT%3E"><code>String::leak</code></a>
        <ul>
          <li><a href="https://github.com/rust-lang/libs-team/issues/109">ACP for <code>String::leak</code></a></li>
          <li><a href="https://github.com/rust-lang/rust/pull/125251">PR filed live</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[@25:46] - <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html#future-windows-compatibility">Future Windows compatibility</a></li>
  <li>[@26:20] - Changelog deep-dive
    <ul>
      <li>[@26:38] - <a href="https://github.com/rust-lang/rust/pull/111626/"><code>-O -</code></a></li>
      <li>[@27:43] - Rustdoc search
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/108537/">Whitespace as path separator</a></li>
          <li><a href="https://github.com/rust-lang/rust/pull/111958/">Search for slices and arrays</a></li>
        </ul>
      </li>
      <li>[@30:58] - <a href="https://github.com/rust-lang/cargo/pull/12332">Cargo will bail if build script uses <code>cargo::</code></a> (actually in 1.73)</li>
      <li>[@34:13] - <a href="https://github.com/rust-lang/cargo/pull/10910">Cargo if workspace uses old resolver</a></li>
      <li>[@35:12] - <a href="https://github.com/rust-lang/cargo/pull/12191">cargo-add will better preserve <code>Cargo.toml</code></a></li>
      <li>[@36:11] - <a href="https://blog.rust-lang.org/2023/07/01/rustfmt-supports-let-else-statements.html">rustfmt let-else</a></li>
      <li>[@37:49] - <a href="https://github.com/rust-lang/cargo/issues/12207"><code>cargo -Zscript</code></a></li>
    </ul>
  </li>
</ul>

<h4 id="4105---rust-1721">[@41:05] - <a href="https://blog.rust-lang.org/2023/09/19/Rust-1.72.1.html">Rust 1.72.1</a></h4>

<h4 id="4337---rust-1730">[@43:37] - <a href="https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html">Rust 1.73.0</a></h4>

<ul>
  <li>[@43:45] - <a href="https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#cleaner-panic-messages">Cleaner panic messages</a></li>
  <li>[@46:58] - <a href="https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#thread-local-initialization">Thread local initialization</a></li>
  <li>[@51:12] - <a href="https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/primitive.u32.html#method.next_multiple_of"><code>{integer}::next_multiple_of</code></a></li>
    </ul>
  </li>
  <li>[@54:53] - Changelog deep-dive
    <ul>
      <li>[@55:00] - <a href="https://github.com/rust-lang/rust/pull/113902/">Unconditional recursion in drop</a></li>
      <li>[@56:04] - <a href="https://github.com/rust-lang/rust/pull/97550/">Write Rust’s version into <code>.comment</code> section</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rfcs/pull/3553">Embed dependency versions into binary with <code>cargo-sbom</code></a></li>
        </ul>
      </li>
      <li>[@58:30] - <a href="https://github.com/rust-lang/rust/pull/94748/">I/O traits for <code>Arc&lt;File&gt;</code></a></li>
      <li>[@59:34] - <a href="https://github.com/rust-lang/cargo/pull/11905">Make <code>cargo --help</code> easier to browse</a></li>
      <li>[@1:03:01] - <a href="https://github.com/rust-lang/rust/pull/98154/">Merge <code>io::Sink</code> into <code>io::Empty</code></a></li>
      <li>[@1:05:11] - <a href="https://github.com/rust-lang/rust/pull/111081/"><code>impl SliceIndex&lt;str&gt; for (Bound&lt;usize&gt;, Bound&lt;usize&gt;)</code></a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-06-18-rust-1.72-1.73.mp3" length="83240228" type="audio/mpeg"/>
			<itunes:duration>01:09:22</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/glen-de-cauwsemaecker/</link>
			<pubDate>Sun, 19 May 2024 23:59:59 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/glen-de-cauwsemaecker/</guid>
			

			<title><![CDATA[ Rama with Glen De Cauwsemaecker ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Glen De Cauwsemaecker about Rama, a modular and customizable proxy built in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Glen De Cauwsemaecker about Rama, a modular and customizable proxy built in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introducing Glen De Cauwsemaecker
  [@01:26] - Rama functionality &amp; use cases
  [@14:38] - Discussing the development story leading up to Rama’s upcoming release
  [@36:19] - Rama architecture, Glen’s background in game development
  [@48:06] - Closing discussion


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.glendc.com/">Glen De Cauwsemaecker</a> about <a href="https://ramaproxy.org/">Rama</a>, a modular and customizable proxy built in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introducing Glen De Cauwsemaecker</li>
  <li>[@01:26] - Rama functionality &amp; use cases</li>
  <li>[@14:38] - Discussing the development story leading up to Rama’s upcoming release</li>
  <li>[@36:19] - Rama architecture, Glen’s background in game development</li>
  <li>[@48:06] - Closing discussion</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-05-19-glen-de-cauwsemaecker.mp3" length="71675212" type="audio/mpeg"/>
			<itunes:duration>49:27</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/orhun-parmaksiz/</link>
			<pubDate>Fri, 26 Apr 2024 06:24:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/orhun-parmaksiz/</guid>
			

			<title><![CDATA[ Ratatui with Orhun Parmaksiz ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Orhun Parmaksiz about Ratatui, a TUI library for Rust to create beautiful console-based applications in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Orhun Parmaksiz about Ratatui, a TUI library for Rust to create beautiful console-based applications in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Orhun Parmaksiz
  [@01:21] - Origins of the project and overview of TUIs
  [@09:32] - Rebranding from tui-rs and continuing previous work
  [@14:50] - Documentation of Ratatui
  [@16:18] - Collecting community feedback
  [@22:00] - Custom designs in Ratatui (ratatui-splash-screen)
  [@22:19] - Other terminal UI projects
  [@25:32] - Status and upcoming directions for Ratatui
  [@27:55] - Closing discussion


Other Resources

  Orhun’s Github


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://blog.orhun.dev/">Orhun Parmaksiz</a> about <a href="https://ratatui.rs/">Ratatui</a>, a TUI library for Rust to create beautiful console-based applications in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Orhun Parmaksiz</li>
  <li>[@01:21] - Origins of the project and overview of TUIs</li>
  <li>[@09:32] - Rebranding from tui-rs and continuing previous work</li>
  <li>[@14:50] - Documentation of Ratatui</li>
  <li>[@16:18] - Collecting community feedback</li>
  <li>[@22:00] - Custom designs in Ratatui (ratatui-splash-screen)</li>
  <li>[@22:19] - Other terminal UI projects</li>
  <li>[@25:32] - Status and upcoming directions for Ratatui</li>
  <li>[@27:55] - Closing discussion</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/orhun">Orhun’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-04-26-orhun-parmaksiz.mp3" length="45250497" type="audio/mpeg"/>
			<itunes:duration>31:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/robert-balicki/</link>
			<pubDate>Fri, 19 Apr 2024 21:05:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/robert-balicki/</guid>
			

			<title><![CDATA[ Isograph with Robert Balicki ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Robert Balicki about Isograph, a framework powered by Rust to speed up your React app development.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Robert Balicki about Isograph, a framework powered by Rust to speed up your React app development.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@10:48] - GraphQL basics
  [@21:20] - The role of Rust within the project
  [@32:24] - Isograph installation
  [@37:16] - Isograph development
  [@45:46] - Upcoming features
  [@01:00:01] - Closing discussion


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.robertbalicki.com/">Robert Balicki</a> about <a href="https://isograph.dev/">Isograph</a>, a framework powered by Rust to speed up your React app development.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@10:48] - <a href="https://graphql.org/">GraphQL</a> basics</li>
  <li>[@21:20] - The role of Rust within the project</li>
  <li>[@32:24] - Isograph installation</li>
  <li>[@37:16] - Isograph development</li>
  <li>[@45:46] - Upcoming features</li>
  <li>[@01:00:01] - Closing discussion</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-04-19-robert-balicki.mp3" length="90457585" type="audio/mpeg"/>
			<itunes:duration>1:02:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/marco-ieni/</link>
			<pubDate>Fri, 12 Apr 2024 12:19:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/marco-ieni/</guid>
			

			<title><![CDATA[ release-plz with Marco Ieni ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Marco Ieni about release-plz, a CLI-based tool that helps you to release your Rust crates by generating changelogs and bumping the version of your crates.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Marco Ieni about release-plz, a CLI-based tool that helps you to release your Rust crates by generating changelogs and bumping the version of your crates.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Marco Ieni, software engineer at Prisma, creator of release-plz
  [@01:17] - Release-plz creation &amp; features
  [@08:50] - Conventional commit standard
  [@17:41] - Potential upcoming features
  [@21:25] - Gitea, Gitlab, Github integration
  [@28:14] - Release-plz development
  [@31:24] - Windows support
  [@36:22] - Message from Marco
  [@37:07] - Marco’s Rust podcast RustShip


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.marcoieni.com/">Marco Ieni</a> about <a href="https://release-plz.ieni.dev/">release-plz</a>, a CLI-based tool that helps you to release your Rust crates by generating changelogs and bumping the version of your crates.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Marco Ieni, software engineer at <a href="https://www.prisma.io/">Prisma</a>, creator of release-plz</li>
  <li>[@01:17] - Release-plz creation &amp; features</li>
  <li>[@08:50] - Conventional commit standard</li>
  <li>[@17:41] - Potential upcoming features</li>
  <li>[@21:25] - Gitea, Gitlab, Github integration</li>
  <li>[@28:14] - Release-plz development</li>
  <li>[@31:24] - Windows support</li>
  <li>[@36:22] - Message from Marco</li>
  <li>[@37:07] - Marco’s Rust podcast <a href="https://www.marcoieni.com/2023/08/rustship-a-new-rust-podcast/">RustShip</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-04-12-marco-ieni.mp3" length="58615433" type="audio/mpeg"/>
			<itunes:duration>0:40:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/luca-palmieri-pavex/</link>
			<pubDate>Tue, 09 Apr 2024 07:06:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/luca-palmieri-pavex/</guid>
			

			<title><![CDATA[ Pavex with Luca Palmieri ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Luca Palmieri about Pavex, a new API-focused web framework for Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Luca Palmieri about Pavex, a new API-focused web framework for Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Luca Palmieri, software engineer, author of Zero To Production In Rust, open source maintainer &amp; contributor
  [@02:04] - Luca’s working experience, discussing time at AWS and moving to Mainmatter
    
      Smithy
      smithy-rs
    
  
  [@09:01] - Pavex: a Rust framework for professionals
    
      Pavex: re-imaging API development in Rust (RustNationUK 2024)
    
  
  [@22:57] - Rustdoc JSON &amp; the f macro
    
      Reasoning about Rust: an introduction to Rustdoc’s JSON format (EuroRust 2023)
      cargo-semver-checks
    
  
  [@37:19] - Lessons from maintaining open-source projects like rocket.rs
    
      Building a Better Foundation for Rocket’s Future
      The Economics of Programming Languages (Strange Loop 2023)
    
  
  [@52:17] - Pavex’s closed beta stage
  [@56:43] - Plans for production readiness
  [@01:10:43] - Potential pricing models
  [@01:12:39] - Closing discussion


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.lpalmieri.com/">Luca Palmieri</a> about <a href="https://pavex.dev/">Pavex</a>, a new API-focused web framework for Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Luca Palmieri, software engineer, author of <a href="https://www.zero2prod.com/">Zero To Production In Rust</a>, open source maintainer &amp; contributor</li>
  <li>[@02:04] - Luca’s working experience, discussing time at AWS and moving to Mainmatter
    <ul>
      <li><a href="https://smithy.io/2.0/index.html">Smithy</a></li>
      <li><a href="https://github.com/smithy-lang/smithy-rs"><code>smithy-rs</code></a></li>
    </ul>
  </li>
  <li>[@09:01] - Pavex: a Rust framework for professionals
    <ul>
      <li><a href="https://youtu.be/cMea6IMRk2s">Pavex: re-imaging API development in Rust (RustNationUK 2024)</a></li>
    </ul>
  </li>
  <li>[@22:57] - Rustdoc JSON &amp; the <code>f</code> macro
    <ul>
      <li><a href="https://youtu.be/OxQYyg_v3rw">Reasoning about Rust: an introduction to Rustdoc’s JSON format (EuroRust 2023)</a></li>
      <li><a href="https://github.com/obi1kenobi/cargo-semver-checks"><code>cargo-semver-checks</code></a></li>
    </ul>
  </li>
  <li>[@37:19] - Lessons from maintaining open-source projects like rocket.rs
    <ul>
      <li><a href="https://rocket.rs/news/2023-11-17-rwf2-prelaunch/">Building a Better Foundation for Rocket’s Future</a></li>
      <li><a href="https://www.youtube.com/watch?v=XZ3w_jec1v8">The Economics of Programming Languages (Strange Loop 2023)</a></li>
    </ul>
  </li>
  <li>[@52:17] - Pavex’s closed beta stage</li>
  <li>[@56:43] - Plans for production readiness</li>
  <li>[@01:10:43] - Potential pricing models</li>
  <li>[@01:12:39] - Closing discussion</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-04-09-luca-palmieri-pavex.mp3" length="113613338" type="audio/mpeg"/>
			<itunes:duration>1:18:29</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/vitaly-bragilevsky/</link>
			<pubDate>Thu, 04 Apr 2024 07:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/vitaly-bragilevsky/</guid>
			

			<title><![CDATA[ Launching RustRover: JetBrains' Investment in Rust ]]></title>
			<itunes:summary><![CDATA[ Vitaly Bragilevsky, Developer Advocate at JetBrains and author of 
Haskell in depth, sits down with Luca Palmieri.
 ]]></itunes:summary>
			<description><![CDATA[ Vitaly Bragilevsky, Developer Advocate at JetBrains and author of 
Haskell in depth, sits down with Luca Palmieri.

Vitaly explains what led JetBrains to launch a Rust-specific product, RustRover.
He covers, in particular, why it is a good time to invest further in Rust, touching as well on the state of the Rust ecosystem. 
Luca and Vitaly also touch on the status quo of Rust developer tooling, including debuggers, profilers (or the lack thereof!),
and framework-specific extensions.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@01:07] - Becoming a Developer Advocate for Rust at JetBrains
  [@04:34] - Vitaly’s transition from Haskell to Rust
    
      Haskell in depth
    
  
  [@08:13] - Introducing JetBrains’ RustRover
  [@18:56] - Usage and status quo of Rust developer tooling
  [@25:12] - Vitaly’s outlook on Rust’s future
  [@31:47] - New use cases for Rust adoption
  [@35:07] - Compiler and IDE suggestions
  [@38:08] - JetBrains’ role and future as a Rust tooling provider
  [@39:59] - Reasoning behind Rust’s increasing popularity
  [@46:18] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Luca Palmieri
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://bravit.pro/">Vitaly Bragilevsky</a>, Developer Advocate at <a href="https://www.jetbrains.com/">JetBrains</a> and author of 
<a href="https://www.manning.com/books/haskell-in-depth">Haskell in depth</a>, sits down with Luca Palmieri.</p>

<p>Vitaly explains what led JetBrains to launch a Rust-specific product, <a href="https://www.jetbrains.com/rust/">RustRover</a>.
He covers, in particular, why it is a good time to invest further in Rust, touching as well on the state of the Rust ecosystem. 
Luca and Vitaly also touch on the status quo of Rust developer tooling, including debuggers, profilers (or the lack thereof!),
and framework-specific extensions.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2024/02/29/launching-rustrover/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@01:07] - Becoming a Developer Advocate for Rust at JetBrains</li>
  <li>[@04:34] - Vitaly’s transition from Haskell to Rust
    <ul>
      <li><a href="https://www.manning.com/books/haskell-in-depth">Haskell in depth</a></li>
    </ul>
  </li>
  <li>[@08:13] - Introducing <a href="https://www.jetbrains.com/rust/">JetBrains’ RustRover</a></li>
  <li>[@18:56] - Usage and status quo of Rust developer tooling</li>
  <li>[@25:12] - Vitaly’s outlook on Rust’s future</li>
  <li>[@31:47] - New use cases for Rust adoption</li>
  <li>[@35:07] - Compiler and IDE suggestions</li>
  <li>[@38:08] - JetBrains’ role and future as a Rust tooling provider</li>
  <li>[@39:59] - Reasoning behind Rust’s increasing popularity</li>
  <li>[@46:18] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://lpalmieri.com/">Luca Palmieri</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-04-04-vitaly-bragilevsky.mp3" length="93302420" type="audio/mpeg"/>
			<itunes:duration>47:45</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/predrag-gruevski/</link>
			<pubDate>Fri, 29 Mar 2024 15:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/predrag-gruevski/</guid>
			

			<title><![CDATA[ cargo-semver-checks with Predrag Gruevski ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Predrag Gruevski about cargo-semver-checks, a linter that checks your crate’s API for any semver violations.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Predrag Gruevski about cargo-semver-checks, a linter that checks your crate’s API for any semver violations.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Predrag Gruevski - creator &amp; maintainer of cargo-semver-checks
  [@00:35] - Exploring cargo-semver-checks, a linter for preventing breaking changes and ensuring semantic versioning
  [@05:00] - What is Semantic versioning (semver)
  [@08:17] - Determining major version bumps
  [@10:48] - Background of the project
  [@18:25] - Functionality, use cases, and project details of cargo-semver-checks
  [@38:51] - Future plans and upcoming features
  [@47:28] - Closing discussion


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://predr.ag/">Predrag Gruevski</a> about <a href="https://crates.io/crates/cargo-semver-checks">cargo-semver-checks</a>, a linter that checks your crate’s API for any <a href="https://semver.org/">semver</a> violations.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Predrag Gruevski - creator &amp; maintainer of cargo-semver-checks</li>
  <li>[@00:35] - Exploring cargo-semver-checks, a linter for preventing breaking changes and ensuring semantic versioning</li>
  <li>[@05:00] - What is Semantic versioning (semver)</li>
  <li>[@08:17] - Determining major version bumps</li>
  <li>[@10:48] - Background of the project</li>
  <li>[@18:25] - Functionality, use cases, and project details of cargo-semver-checks</li>
  <li>[@38:51] - Future plans and upcoming features</li>
  <li>[@47:28] - Closing discussion</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-03-29-predrag-gruevski.mp3" length="74612816" type="audio/mpeg"/>
			<itunes:duration>0:51:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/sean-mcarthur/</link>
			<pubDate>Fri, 22 Mar 2024 23:57:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/sean-mcarthur/</guid>
			

			<title><![CDATA[ Hyper 1.0 with Sean McArthur ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Sean McArthur about the 1.0 release of Hyper, the well-known Rust HTTP library.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Sean McArthur about the 1.0 release of Hyper, the well-known Rust HTTP library.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet open-source engineer Sean McArthur
  [@01:20] - Reasons for the 9-year journey to release hyper 1.0
  [@05:34] - Addressing async fragmentation
  [@07:38] - Sean’s transition to freelance maintenance
  [@10:12] - Freelancing and finding clients while working on open source
  [@16:56] - Hyper’s maturity and future plans
  [@22:16] - Stages of hyper’s development, releases, and post-release issues.
  [@36:14] - Closing discussion


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://seanmonstar.com/">Sean McArthur</a> about the <a href="https://seanmonstar.com/blog/hyper-v1/">1.0 release</a> of <a href="https://hyper.rs/">Hyper</a>, the well-known Rust HTTP library.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet open-source engineer Sean McArthur</li>
  <li>[@01:20] - Reasons for the 9-year journey to release hyper 1.0</li>
  <li>[@05:34] - Addressing async fragmentation</li>
  <li>[@07:38] - Sean’s transition to freelance maintenance</li>
  <li>[@10:12] - Freelancing and finding clients while working on open source</li>
  <li>[@16:56] - Hyper’s maturity and future plans</li>
  <li>[@22:16] - Stages of hyper’s development, releases, and post-release issues.</li>
  <li>[@36:14] - Closing discussion</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-03-22-sean-mcarthur.mp3" length="55459584" type="audio/mpeg"/>
			<itunes:duration>38:05</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/carl-fredrik-samson/</link>
			<pubDate>Sun, 17 Mar 2024 08:06:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/carl-fredrik-samson/</guid>
			

			<title><![CDATA[ Asynchronous Programming in Rust with Carl Fredrik Samson ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Carl Fredrik Samson about his book Asynchronous Programming in Rust, a deep dive into asynchronous programming in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Carl Fredrik Samson about his book Asynchronous Programming in Rust, a deep dive into asynchronous programming in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Carl Fredrik Samson, author of Asynchronous Programming in Rust
  [@04:26] - Making the deal with Packt (publishing company)
  [@05:12] - Runtime with green threads
  [@07:50] - Understanding the concept of asynchronous programming
  [@03:17] - The benefits and purpose of using asynchronous programming
  [@28:35] - Comparing green threads and fibers in Rust
  [@35:29] - Importance of learning async programming
  [@41:43] - Insights into the book’s creation process, including research and writing efforts
  [@43:13] - Target audience and prerequisites for the book
  [@45:09] - Book details
  [@48:02] - Closing thoughts
    
      Rust in Production podcast
      On the Metal podcast
      Chats with James podcast
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/cf_samson">Carl Fredrik Samson</a> about his book <a href="https://www.packtpub.com/product/asynchronous-programming-in-rust/9781805128137">Asynchronous Programming in Rust</a>, a deep dive into asynchronous programming in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Carl Fredrik Samson, author of Asynchronous Programming in Rust</li>
  <li>[@04:26] - Making the deal with Packt (publishing company)</li>
  <li>[@05:12] - Runtime with green threads</li>
  <li>[@07:50] - Understanding the concept of asynchronous programming</li>
  <li>[@03:17] - The benefits and purpose of using asynchronous programming</li>
  <li>[@28:35] - Comparing green threads and fibers in Rust</li>
  <li>[@35:29] - Importance of learning async programming</li>
  <li>[@41:43] - Insights into the book’s creation process, including research and writing efforts</li>
  <li>[@43:13] - Target audience and prerequisites for the book</li>
  <li>[@45:09] - Book details</li>
  <li>[@48:02] - Closing thoughts
    <ul>
      <li><a href="https://corrode.dev/podcast/">Rust in Production</a> podcast</li>
      <li><a href="https://oxide.computer/podcasts/on-the-metal">On the Metal</a> podcast</li>
      <li><a href="https://jamesmunns.com/podcast/">Chats with James</a> podcast</li>
    </ul>
  </li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-03-17-carl-fredrik-samson.mp3" length="73121309" type="audio/mpeg"/>
			<itunes:duration>50:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/marcin-kulik/</link>
			<pubDate>Wed, 31 Jan 2024 07:57:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/marcin-kulik/</guid>
			

			<title><![CDATA[ Asciinema with Marcin Kulik ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Marcin Kulik about his work on asciinema, a service that allows people to record their terminal windows to share with others, that has the custom asciinema player written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Marcin Kulik about his work on asciinema, a service that allows people to record their terminal windows to share with others, that has the custom asciinema player written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction
  [@01:56] - Overview of Asciinema: A suite of tools for recording, replaying, and sharing terminal sessions
  [@09:11] - More about Marcin Kulik, the creator of Asciinema, and his background
  [@10:08] - Inspiration behind the creation of Asciinema
  [@18:52] - Marcin’s journey into Rust
  [@23:15] - Balancing paid development and consulting services for Asciinema
  [@24:36] - Progress on the Rust rewrite
  [@28:37] - AGG (Asciinema GIF generator)
  [@34:44] - Maintaining multiple languages and the role of Rust
  [@40:17] - Future plans for Asciinema and potential features
  [@47:23] - Closing discussion


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://ku1ik.com/">Marcin Kulik</a> about his work on <a href="https://www.asciinema.org/">asciinema</a>, a service that allows people to record their terminal windows to share with others, that has the custom asciinema player written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction</li>
  <li>[@01:56] - Overview of Asciinema: A suite of tools for recording, replaying, and sharing terminal sessions</li>
  <li>[@09:11] - More about Marcin Kulik, the creator of Asciinema, and his background</li>
  <li>[@10:08] - Inspiration behind the creation of Asciinema</li>
  <li>[@18:52] - Marcin’s journey into Rust</li>
  <li>[@23:15] - Balancing paid development and consulting services for Asciinema</li>
  <li>[@24:36] - Progress on the Rust rewrite</li>
  <li>[@28:37] - AGG (Asciinema GIF generator)</li>
  <li>[@34:44] - Maintaining multiple languages and the role of Rust</li>
  <li>[@40:17] - Future plans for Asciinema and potential features</li>
  <li>[@47:23] - Closing discussion</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-01-31-marcin-kulik.mp3" length="74807892" type="audio/mpeg"/>
			<itunes:duration>51:00</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/tim-mcnamara/</link>
			<pubDate>Sun, 28 Jan 2024 08:12:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/tim-mcnamara/</guid>
			

			<title><![CDATA[ Unlocking Rust's power through mentorship and knowledge spreading, with Tim McNamara ]]></title>
			<itunes:summary><![CDATA[ Tim McNamara, author of Rust in Action 
and founder at Accelerant, sits down with Marco Otte-Witte.
 ]]></itunes:summary>
			<description><![CDATA[ Tim McNamara, author of Rust in Action 
and founder at Accelerant, sits down with Marco Otte-Witte.

Tim discusses how Rust, despite common perceptions, is relatively easy to learn and how the compiler empowers engineers 
to avoid common mistakes. The conversation also emphasizes Rust’s growing adoption in companies, 
its role in addressing long-term maintainability challenges, and its potential to significantly reduce software 
energy consumption, while highlighting the importance of mentorship to ensure successful integration across organizations.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:34] - Start of the interview
  [@01:27] - Tim’s role at AWS
  [@03:57] - Tim’s reasons for learning Rust
  [@04:57] - Rust in Action
  [@06:59] - How hard is it to learn Rust?
  [@13:49] - Reasons companies are holding back from adopting Rust
  [@23:51] - Rust’s type system and maintainability
  [@36:30] - Dependencies in Rust
  [@41:01] - Energy savings with Rust
  [@48:09] - Tim’s approach to pitching Rust
  [@54:21] - Overcoming concerns around Rust adoption
  [@55:36] - Recruitment strategy for Rust
  [@57:13] - Knowledge spreading
  [@01:02:41] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Marco Otte-Witte
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://tim.mcnamara.nz/">Tim McNamara</a>, author of <a href="https://www.manning.com/books/rust-in-action">Rust in Action</a> 
and founder at <a href="https://accelerant.dev">Accelerant</a>, sits down with Marco Otte-Witte.</p>

<p>Tim discusses how Rust, despite common perceptions, is relatively easy to learn and how the compiler empowers engineers 
to avoid common mistakes. The conversation also emphasizes Rust’s growing adoption in companies, 
its role in addressing long-term maintainability challenges, and its potential to significantly reduce software 
energy consumption, while highlighting the importance of mentorship to ensure successful integration across organizations.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2023/11/02/unlocking-rusts-power-through-mentorship-and-knowledge-spreading/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:34] - Start of the interview</li>
  <li>[@01:27] - Tim’s role at AWS</li>
  <li>[@03:57] - Tim’s reasons for learning Rust</li>
  <li>[@04:57] - <a href="https://www.manning.com/books/rust-in-action">Rust in Action</a></li>
  <li>[@06:59] - How hard is it to learn Rust?</li>
  <li>[@13:49] - Reasons companies are holding back from adopting Rust</li>
  <li>[@23:51] - Rust’s type system and maintainability</li>
  <li>[@36:30] - Dependencies in Rust</li>
  <li>[@41:01] - Energy savings with Rust</li>
  <li>[@48:09] - Tim’s approach to pitching Rust</li>
  <li>[@54:21] - Overcoming concerns around Rust adoption</li>
  <li>[@55:36] - Recruitment strategy for Rust</li>
  <li>[@57:13] - Knowledge spreading</li>
  <li>[@01:02:41] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://twitter.com/marcoow">Marco Otte-Witte</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-01-28-tim-mcnamara.mp3" length="62181128" type="audio/mpeg"/>
			<itunes:duration>1:03:32</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/josh-aas/</link>
			<pubDate>Fri, 12 Jan 2024 16:33:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/josh-aas/</guid>
			

			<title><![CDATA[ Prossimo with Josh Aas ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Josh Aas about his work on Prossimo, an Internet Security Research Group (ISRG) project that is focusing on moving critical software used on the Internet to a memory safe language, such as Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Josh Aas about his work on Prossimo, an Internet Security Research Group (ISRG) project that is focusing on moving critical software used on the Internet to a memory safe language, such as Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Josh Aas - Executive Director at ISRG (Internet Security Research Group), a non-profit dedicated to building a more secure and privacy-respecting digital infrastructure.
  [@01:32] - Let’s Encrypt Project - a nonprofit Certificate Authority providing TLS certificates to 363 million websites.
  [@06:53] - Divvi Up project - a privacy-respecting system for aggregate statistics.
  [@09:48] - Prossimo - ensuring memory safety for the internet’s most critical infrastructure.
  [@15:24] - Discussion about Curl and Rust.
  [@19:06] - The benefits of rewriting software, particularly transitioning from C to Rust for improved memory safety.
  [@34:19] - The ISRG’s ambition to make the Linux kernel memory-safe with Rust.
  [@37:27] - Can Zig potentially be a competitor to Rust?
  [@39:41] - Closing thoughts.


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/josh-aas-406a772/">Josh Aas</a> about his work on <a href="https://www.memorysafety.org/">Prossimo</a>, an <a href="https://www.abetterinternet.org/">Internet Security Research Group (ISRG)</a> project that is focusing on moving critical software used on the Internet to a memory safe language, such as Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Josh Aas - Executive Director at ISRG (Internet Security Research Group), a non-profit dedicated to building a more secure and privacy-respecting digital infrastructure.</li>
  <li>[@01:32] - <a href="https://letsencrypt.org/">Let’s Encrypt Project</a> - a nonprofit Certificate Authority providing TLS certificates to 363 million websites.</li>
  <li>[@06:53] - <a href="https://divviup.org/">Divvi Up project</a> - a privacy-respecting system for aggregate statistics.</li>
  <li>[@09:48] - Prossimo - ensuring memory safety for the internet’s most critical infrastructure.</li>
  <li>[@15:24] - Discussion about Curl and Rust.</li>
  <li>[@19:06] - The benefits of rewriting software, particularly transitioning from C to Rust for improved memory safety.</li>
  <li>[@34:19] - The ISRG’s ambition to make the Linux kernel memory-safe with Rust.</li>
  <li>[@37:27] - Can <a href="https://ziglang.org/">Zig</a> potentially be a competitor to Rust?</li>
  <li>[@39:41] - Closing thoughts.</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-01-12-josh-aas.mp3" length="59047458" type="audio/mpeg"/>
			<itunes:duration>40:45</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/ritchie-vink/</link>
			<pubDate>Fri, 05 Jan 2024 23:59:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/ritchie-vink/</guid>
			

			<title><![CDATA[ Polars with Ritchie Vink ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Ritchie Vink about his work on Polars, a DataFrame library written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Ritchie Vink about his work on Polars, a DataFrame library written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Meet Ritchie Vink - Creator of Polars
  [@02:00] - What is a DataFrame?
  [@05:19] - Arrow
  [@07:26] - NumPy
  [@11:31] - Polars vs Pandas
  [@17:32] - Using Polars in app development
  [@25:24] - Python and Rust docs
  [@31:49] - Polars 1.0 release
  [@35:21] - What keeps Ritchie working on Polars
  [@37:27] - Growing Polars without bloat
  [@39:57] - Closing discussions


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="http://www.ritchievink.com/">Ritchie Vink</a> about his work on <a href="https://pola.rs/">Polars</a>, a DataFrame library written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Meet Ritchie Vink - Creator of Polars</li>
  <li>[@02:00] - What is a DataFrame?</li>
  <li>[@05:19] - <a href="https://arrow.apache.org/">Arrow</a></li>
  <li>[@07:26] - <a href="https://numpy.org/">NumPy</a></li>
  <li>[@11:31] - Polars vs <a href="https://pandas.pydata.org/">Pandas</a></li>
  <li>[@17:32] - Using Polars in app development</li>
  <li>[@25:24] - Python and Rust docs</li>
  <li>[@31:49] - Polars 1.0 release</li>
  <li>[@35:21] - What keeps Ritchie working on Polars</li>
  <li>[@37:27] - Growing Polars without bloat</li>
  <li>[@39:57] - Closing discussions</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2024-01-05-ritchie-vink.mp3" length="62678214" type="audio/mpeg"/>
			<itunes:duration>43:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/stefan-baumgartner-rust-efficiency/</link>
			<pubDate>Wed, 06 Dec 2023 21:15:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/stefan-baumgartner-rust-efficiency/</guid>
			

			<title><![CDATA[ Exploring Rust's impact on efficiency and cost-savings, with Stefan Baumgartner ]]></title>
			<itunes:summary><![CDATA[ Stefan Baumgartner, Senior Product Architect at Dynatrace, 
discusses with Marco Otte-Witte how Rust enables developers to write performant and reliable software that’s efficient 
at a level that leads to substantial cost savings.
 ]]></itunes:summary>
			<description><![CDATA[ Stefan Baumgartner, Senior Product Architect at Dynatrace, 
discusses with Marco Otte-Witte how Rust enables developers to write performant and reliable software that’s efficient 
at a level that leads to substantial cost savings.

Stefan shares his firsthand experience with Rust, highlighting the ecosystem’s ability when it comes to delivering 
functioning prototypes quickly. He also discusses the importance of understanding memory management and low-level 
concepts in programming and how teaching Rust empowers developers to write efficient and reliable software.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:34] - Start of the interview
  [@02:06] - Pitching Rust and criteria for adoption
  [@03:35] - What is Dynatrace
  [@06:15] - Stability with Rust
  [@09:59] - Benefits of Rust
  [@13:45] - Learning and teaching Rust
  [@19:21] - Comparing Rust’s teachability to other languages
  [@24:39] - The role of the compiler in Rust programming
  [@26:17] - Stefan’s approach to teaching Rust
  [@29:50] - Onboarding at Dynatrace
  [@34:14] - Performance versus stability
  [@37:12] - Rust’s highlights
  [@39:41] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Marco Otte-Witte
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://fettblog.eu/">Stefan Baumgartner</a>, Senior Product Architect at <a href="https://www.dynatrace.com/">Dynatrace</a>, 
discusses with Marco Otte-Witte how Rust enables developers to write performant and reliable software that’s efficient 
at a level that leads to substantial cost savings.</p>

<p>Stefan shares his firsthand experience with Rust, highlighting the ecosystem’s ability when it comes to delivering 
functioning prototypes quickly. He also discusses the importance of understanding memory management and low-level 
concepts in programming and how teaching Rust empowers developers to write efficient and reliable software.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2023/09/28/exploring-rusts-impact-on-costs-and-efficiency/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:34] - Start of the interview</li>
  <li>[@02:06] - Pitching Rust and criteria for adoption</li>
  <li>[@03:35] - What is <a href="https://www.dynatrace.com/">Dynatrace</a></li>
  <li>[@06:15] - Stability with Rust</li>
  <li>[@09:59] - Benefits of Rust</li>
  <li>[@13:45] - Learning and teaching Rust</li>
  <li>[@19:21] - Comparing Rust’s teachability to other languages</li>
  <li>[@24:39] - The role of the compiler in Rust programming</li>
  <li>[@26:17] - Stefan’s approach to teaching Rust</li>
  <li>[@29:50] - Onboarding at <a href="https://www.dynatrace.com/">Dynatrace</a></li>
  <li>[@34:14] - Performance versus stability</li>
  <li>[@37:12] - Rust’s highlights</li>
  <li>[@39:41] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://twitter.com/marcoow">Marco Otte-Witte</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-12-06-stefan-baumgartner.mp3" length="40005674" type="audio/mpeg"/>
			<itunes:duration>40:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/cedric-sellmann/</link>
			<pubDate>Fri, 24 Nov 2023 17:57:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/cedric-sellmann/</guid>
			

			<title><![CDATA[ Recruiting in Rust with Cedric Sellmann ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Cedric Sellmann about his experience with recuiting Rust engineers.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Cedric Sellmann about his experience with recuiting Rust engineers.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Guest introduction: Cedric Sellmann - Rust Recruitment Specialist, previous Java recruiter.
  [@07:18] - Rust’s limited mainstream adoption and challenges in verifying Rust qualifications.
  [@17:28] - Job hunting tips for Rust developers.
  [@29:06] - Current Rust job market compared to previous years.
  [@32:54] - The effectiveness of referrals for Rust developer job opportunities.
  [@35:30] - Industries hiring Rust developers: crypto, gaming, and more!
  [@50:31] - Advice for aspiring Rust developers.


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.understandingrecruitment.com/about-us/meet-the-team/profile/cedric-sellmann/">Cedric Sellmann</a> about his experience with recuiting Rust engineers.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Guest introduction: Cedric Sellmann - Rust Recruitment Specialist, previous Java recruiter.</li>
  <li>[@07:18] - Rust’s limited mainstream adoption and challenges in verifying Rust qualifications.</li>
  <li>[@17:28] - Job hunting tips for Rust developers.</li>
  <li>[@29:06] - Current Rust job market compared to previous years.</li>
  <li>[@32:54] - The effectiveness of referrals for Rust developer job opportunities.</li>
  <li>[@35:30] - Industries hiring Rust developers: crypto, gaming, and more!</li>
  <li>[@50:31] - Advice for aspiring Rust developers.</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-11-24-cedric-sellmann.mp3" length="77503449" type="audio/mpeg"/>
			<itunes:duration>53:38</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/gabor-szabo/</link>
			<pubDate>Fri, 17 Nov 2023 12:26:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/gabor-szabo/</guid>
			

			<title><![CDATA[ Rust Digger with Gabor Szabo ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Gabor Szabo, who also runs Rust Maven, about his website Rust Digger which collects data about Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Gabor Szabo, who also runs Rust Maven, about his website Rust Digger which collects data about Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - What is Rust Digger, and why is it useful?
  [@16:36] - Handling crates without repository links (e.g., the Fastly crate)
  [@22:27] - Handling crates without an owner.
  [@30:34] - What’s next for Rust Digger, including name squatting, malware, and dependency management.
  [@38:57] - What to expect in the coming months.


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://szabgab.com/">Gabor Szabo</a>, who also runs <a href="https://rust.code-maven.com/">Rust Maven</a>, about his website <a href="https://rust-digger.code-maven.com/">Rust Digger</a> which collects data about Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - What is Rust Digger, and why is it useful?</li>
  <li>[@16:36] - Handling crates without repository links (e.g., the Fastly crate)</li>
  <li>[@22:27] - Handling crates without an owner.</li>
  <li>[@30:34] - What’s next for Rust Digger, including name squatting, malware, and dependency management.</li>
  <li>[@38:57] - What to expect in the coming months.</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-11-17-gabor-szabo.mp3" length="64434178" type="audio/mpeg"/>
			<itunes:duration>44:31</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rob-ede-kraken/</link>
			<pubDate>Thu, 19 Oct 2023 16:57:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rob-ede-kraken/</guid>
			

			<title><![CDATA[ Kraken's migration to Rust microservices, with Rob Ede ]]></title>
			<itunes:summary><![CDATA[ Rob Ede, lead maintainer of Actix Web, explains to Marco Otte-Witte how (and why) Kraken chose to migrate their microservices to Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Rob Ede, lead maintainer of Actix Web, explains to Marco Otte-Witte how (and why) Kraken chose to migrate their microservices to Rust.

They also discuss Rust’s web development ecosystem at large, with a particular focus on Actix Web: Rob shares his view on how improvements in the language and framework space will eventually lead to a future where web development in Rust can be as approachable as web development in Javascript.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:36] - Start of the interview
  [@01:26] - What is Actix Web?
  [@06:34] - Kraken’s migration from Java to Rust
  [@10:09] - Benefits of Rust adoption at Kraken
  [@12:48] - Rust vs Java
  [@15:42] - Future improvements for Actix Web
  [@21:15] - Do Rust users become contributors?
  [@24:08] - The future of Rust and Actix Web
  [@30:46] - Recommendations for adopting Rust
  [@31:37] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Marco Otte-Witte
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://github.com/sponsors/robjtede">Rob Ede</a>, lead maintainer of <a href="https://github.com/actix/actix-web">Actix Web</a>, explains to Marco Otte-Witte how (and why) <a href="https://www.kraken.com/">Kraken</a> chose to migrate their microservices to Rust.</p>

<p>They also discuss Rust’s web development ecosystem at large, with a particular focus on <a href="https://github.com/actix/actix-web">Actix Web</a>: Rob shares his view on how improvements in the language and framework space will eventually lead to a future where web development in Rust can be as approachable as web development in Javascript.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2023/09/06/krakens-migration-to-rust-microservices/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:36] - Start of the interview</li>
  <li>[@01:26] - What is <a href="https://github.com/actix/actix-web">Actix Web</a>?</li>
  <li>[@06:34] - <a href="https://www.kraken.com/">Kraken</a>’s migration from Java to Rust</li>
  <li>[@10:09] - Benefits of Rust adoption at <a href="https://www.kraken.com/">Kraken</a></li>
  <li>[@12:48] - Rust vs Java</li>
  <li>[@15:42] - Future improvements for <a href="https://github.com/actix/actix-web">Actix Web</a></li>
  <li>[@21:15] - Do Rust users become contributors?</li>
  <li>[@24:08] - The future of Rust and <a href="https://github.com/actix/actix-web">Actix Web</a></li>
  <li>[@30:46] - Recommendations for adopting Rust</li>
  <li>[@31:37] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://twitter.com/marcoow">Marco Otte-Witte</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-10-19-rob-ede.mp3" length="34292702" type="audio/mpeg"/>
			<itunes:duration>32:13</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/dave-macleod/</link>
			<pubDate>Thu, 05 Oct 2023 07:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/dave-macleod/</guid>
			

			<title><![CDATA[ Learn Rust in a Month of Lunches with Dave MacLeod ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Dave MacLeod about his book “Learn Rust in a Month of Lunches” from Manning.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Dave MacLeod about his book “Learn Rust in a Month of Lunches” from Manning.

Rustacean Station discount code for the book: au35mac

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction: meet Dave MacLeod
  [@01:47] - Target audience and motivation behind the book
  [@08:32] - Taking a direct approach to learning
  [@15:14] - Understanding shadowing in Rust
  [@16:56] - Comparing “Learn Rust in a Month of Lunches” with “EasyRust”
  [@20:06] - Streamlined printing: Changes to printline and print in Rust
  [@22:08] - Dive into async Rust
  [@24:19] - Crafting a coherent flow: process and concept tie-ins in the book
  [@29:46] - Tackling advanced topics: macros, iterators, and closures
  [@33:05] - Exploring the chrono crate
  [@35:29] - Safety and testing: discussing unsafe Rust
  [@41:49] - The book’s release date
  [@44:18] - Dave’s experience writing the book
  [@46:54] - Future plans and projects
  [@49:33] - Closing thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/Dhghomon">Dave MacLeod</a> about his book <a href="http://mng.bz/OxOO">“Learn Rust in a Month of Lunches”</a> from Manning.</p>

<p>Rustacean Station discount code for the book: au35mac</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction: meet Dave MacLeod</li>
  <li>[@01:47] - Target audience and motivation behind the book</li>
  <li>[@08:32] - Taking a direct approach to learning</li>
  <li>[@15:14] - Understanding shadowing in Rust</li>
  <li>[@16:56] - Comparing “Learn Rust in a Month of Lunches” with “EasyRust”</li>
  <li>[@20:06] - Streamlined printing: Changes to <code>printline</code> and <code>print</code> in Rust</li>
  <li>[@22:08] - Dive into async Rust</li>
  <li>[@24:19] - Crafting a coherent flow: process and concept tie-ins in the book</li>
  <li>[@29:46] - Tackling advanced topics: macros, iterators, and closures</li>
  <li>[@33:05] - Exploring the <code>chrono</code> crate</li>
  <li>[@35:29] - Safety and testing: discussing unsafe Rust</li>
  <li>[@41:49] - The book’s release date</li>
  <li>[@44:18] - Dave’s experience writing the book</li>
  <li>[@46:54] - Future plans and projects</li>
  <li>[@49:33] - Closing thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-09-29-david-macleod.mp3" length="82372654" type="audio/mpeg"/>
			<itunes:duration>1:03:31</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.70-1.71/</link>
			<pubDate>Sat, 30 Sep 2023 07:53:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.70-1.71/</guid>
			

			<title><![CDATA[ What's New in Rust 1.70 and 1.71 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.70 and 1.71 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.70 and 1.71 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:20] - Rust 1.70


  [@01:22] - Cargo’s sparse protocol by default
  [@03:47] - OnceCell and OnceLock
  [@10:56] - IsTerminal
  [@12:49] - Named debug levels
  [@14:57] - Enforced stability in the test CLI
  [@16:45] - Stabilized APIs
    
      Add Default impls for iterators
      Arc::into_inner
      Option::is_some_and
      SocketAddrExt
    
  
  [@24:30] - Changelog deep-dive
    
      [@24:42] - Use SipHash-1-3 instead of 2-4
      [@26:06] - Alignment debug checks for pointer derefs
      [@27:04] - Relaxed ordering for asm! operands
      [@27:53] - -Zgitoxide
      [@28:21] - -Zdirect-minimal-versions
    
  


[@29:16] - Rust 1.71.0


  [@29:25] - C-unwind ABI
    
      RFC
      Unwinding by default?
    
  
  [@36:59] - Debugger visualization attributes
    
      Detailed documentation
    
  
  [@37:36] - raw-dylib linking
    
      Windows linking docs
      What is ordinal linking
    
  
  [@38:15] - Upgrade to musl 1.2
  [@39:42] - Const-initialized thread locals
  [@41:14] - Changelog deep-dive
    
      [@41:40] - Uplift drop_ref clippy lints
      [@42:39] - Allow some recursive panics
      [@43:57] - Optimize cargo under rustup
      [@45:38] - Avoid excessive registry lookups
      [@46:28] - Include rust-version in publish
      [@47:02] - Document more semver rules
        
          Adding #[non_exhausting]
          Making an fn safe
          MSRV is a minor bump
        
      
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.70 and 1.71 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0120---rust-170">[@01:20] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html">Rust 1.70</a></h4>

<ul>
  <li>[@01:22] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#sparse-by-default-for-cratesio">Cargo’s sparse protocol by default</a></li>
  <li>[@03:47] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#oncecell-and-oncelock"><code>OnceCell</code> and <code>OnceLock</code></a></li>
  <li>[@10:56] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#isterminal"><code>IsTerminal</code></a></li>
  <li>[@12:49] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#named-levels-of-debug-information">Named debug levels</a></li>
  <li>[@14:57] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#enforced-stability-in-the-test-cli">Enforced stability in the <code>test</code> CLI</a></li>
  <li>[@16:45] - <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://github.com/rust-lang/libs-team/issues/77">Add <code>Default</code> impls for iterators</a></li>
      <li><a href="https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#method.into_inner"><code>Arc::into_inner</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.is_some_and"><code>Option::is_some_and</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/os/linux/net/trait.SocketAddrExt.html"><code>SocketAddrExt</code></a></li>
    </ul>
  </li>
  <li>[@24:30] - Changelog deep-dive
    <ul>
      <li>[@24:42] - <a href="https://github.com/rust-lang/rust/pull/107925/">Use SipHash-1-3 instead of 2-4</a></li>
      <li>[@26:06] - <a href="https://github.com/rust-lang/rust/pull/98112">Alignment debug checks for pointer derefs</a></li>
      <li>[@27:04] - <a href="https://github.com/rust-lang/rust/pull/105798/">Relaxed ordering for <code>asm!</code> operands</a></li>
      <li>[@27:53] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#gitoxide"><code>-Zgitoxide</code></a></li>
      <li>[@28:21] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#direct-minimal-versions"><code>-Zdirect-minimal-versions</code></a></li>
    </ul>
  </li>
</ul>

<h4 id="2916---rust-1710">[@29:16] - <a href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html">Rust 1.71.0</a></h4>

<ul>
  <li>[@29:25] - <a href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#c-unwind-abi">C-unwind ABI</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#abi-boundaries-and-unforced-unwinding">RFC</a></li>
      <li><a href="https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw">Unwinding by default?</a></li>
    </ul>
  </li>
  <li>[@36:59] - <a href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#debugger-visualization-attributes">Debugger visualization attributes</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/nightly/reference/attributes/debugger.html#the-debugger_visualizer-attribute">Detailed documentation</a></li>
    </ul>
  </li>
  <li>[@37:36] - <a href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#raw-dylib-linking">raw-dylib linking</a>
    <ul>
      <li><a href="https://learn.microsoft.com/en-us/cpp/build/linking-an-executable-to-a-dll?view=msvc-170">Windows linking docs</a></li>
      <li><a href="https://stackoverflow.com/questions/44585808/what-is-linking-by-ordinal-and-linking-by-name-mean-in-c">What is ordinal linking</a></li>
    </ul>
  </li>
  <li>[@38:15] - <a href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#upgrade-to-musl-12">Upgrade to musl 1.2</a></li>
  <li>[@39:42] - <a href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#const-initialized-thread-locals">Const-initialized thread locals</a></li>
  <li>[@41:14] - Changelog deep-dive
    <ul>
      <li>[@41:40] - <a href="https://github.com/rust-lang/rust/pull/109732/">Uplift drop_ref clippy lints</a></li>
      <li>[@42:39] - <a href="https://github.com/rust-lang/rust/pull/110975/">Allow some recursive panics</a></li>
      <li>[@43:57] - <a href="https://github.com/rust-lang/cargo/pull/11917">Optimize cargo under rustup</a></li>
      <li>[@45:38] - <a href="https://github.com/rust-lang/cargo/pull/12083">Avoid excessive registry lookups</a></li>
      <li>[@46:28] - <a href="https://github.com/rust-lang/cargo/pull/12041">Include <code>rust-version</code> in publish</a></li>
      <li>[@47:02] - Document more <a href="https://doc.rust-lang.org/cargo/reference/semver.html">semver rules</a>
        <ul>
          <li><a href="https://github.com/rust-lang/cargo/pull/10877">Adding <code>#[non_exhausting]</code></a></li>
          <li><a href="https://github.com/rust-lang/cargo/pull/12116">Making an fn safe</a></li>
          <li><a href="https://github.com/rust-lang/cargo/pull/12122">MSRV is a minor bump</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-09-30-rust-1.70-1.71.mp3" length="60979034" type="audio/mpeg"/>
			<itunes:duration>00:50:48</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/ian-ker-sey/</link>
			<pubDate>Thu, 28 Sep 2023 10:56:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/ian-ker-sey/</guid>
			

			<title><![CDATA[ rb-sys with Ian Ker-Seymer ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Ian Ker-Seymer about his work on rb-sys which easily allows you to integrate Ruby with Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Ian Ker-Seymer about his work on rb-sys which easily allows you to integrate Ruby with Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Guest introduction: Ian Ker-Seymer - Staff Software Engineer at Shopify
  [@02:04] - The connection between Liquid and Shopify
  [@06:19] - The nenefits of using WebAssembly
  [@11:14] - Exploring the languages in Shopify’s stack, including Ruby
  [@14:24] - Rust’s practical use cases
  [@16:44] - How Rust became part of Shopify’s stack
  [@19:14] - Deep dive into rb-sys
  [@24:17] - RubyGems and Bundler: insights and considerations
  [@36:41] - Integrating Rust into the stack
  [@40:52] - Addressing challenges with Windows compilation
  [@47:46] - Spotlight on rb-sys: why it’s worth exploring


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/ikerseymer">Ian Ker-Seymer</a> about his work on <a href="https://crates.io/crates/rb-sys">rb-sys</a> which easily allows you to integrate Ruby with Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Guest introduction: Ian Ker-Seymer - Staff Software Engineer at <a href="https://www.shopify.com/">Shopify</a></li>
  <li>[@02:04] - The connection between <a href="https://shopify.github.io/liquid/">Liquid</a> and Shopify</li>
  <li>[@06:19] - The nenefits of using WebAssembly</li>
  <li>[@11:14] - Exploring the languages in Shopify’s stack, including Ruby</li>
  <li>[@14:24] - Rust’s practical use cases</li>
  <li>[@16:44] - How Rust became part of Shopify’s stack</li>
  <li>[@19:14] - Deep dive into rb-sys</li>
  <li>[@24:17] - RubyGems and Bundler: insights and considerations</li>
  <li>[@36:41] - Integrating Rust into the stack</li>
  <li>[@40:52] - Addressing challenges with Windows compilation</li>
  <li>[@47:46] - Spotlight on <a href="https://github.com/oxidize-rb/rb-sys">rb-sys</a>: why it’s worth exploring</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-09-25-ian-ker-seymer.mp3" length="81004228" type="audio/mpeg"/>
			<itunes:duration>56:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.68-1.69/</link>
			<pubDate>Tue, 19 Sep 2023 08:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.68-1.69/</guid>
			

			<title><![CDATA[ What's New in Rust 1.68 and 1.69 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.68 and 1.69 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.68 and 1.69 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:30] - Rust 1.68


  [@01:32] - Cargo’s sparse protocol
  [@09:28] - Local Pin construction
    
      Implementation comments
      A fun hack
    
  
  [@13:56] - Default alloc error handler
    
      Small allocs in panic handler probably ok
    
  
  [@18:24] - Stabilized APIs
    
      impl From&lt;bool&gt; for f64
    
  
  [@19:06] - Changelog deep-dive
    
      [@19:15] - Stabilize UEFI extern
      [@20:07] - cargo build --verbose
      [@20:50] - home is a cargo crate
      [@21:12] - Cargo.lock for workspace publish
      [@21:35] - Make Context !Send and !Sync
    
  


[@24:24] - Rust 1.68.1

[@25:11] - Rust 1.68.2

  GitHub announcement


[@26:29] - Rust 1.69.0


  [@28:17] - Nice PR#42069
  [@29:50] - More cargo fix
  [@31:17] - No more debug info for build scripts
    
      Nicholas Nethercote’s blog
    
  
  [@34:48] - Stabilized APIs
    
      CStr::from_bytes_until_nul
    
  
  [@37:24] - Changelog deep-dive
    
      [@37:28] - Unaligned references is a hard error now
      [@38:28] - Deriving on packed structs
        
          More detailed description
        
      
      [@44:51] - Suggest cargo add
      [@45:36] - Search for macros with !
      [@46:10] - Compatibility notes
      [@47:18] - Rust 0.1 release notes
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.68 and 1.69 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0130---rust-168">[@01:30] - <a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html">Rust 1.68</a></h4>

<ul>
  <li>[@01:32] - <a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#cargos-sparse-protocol">Cargo’s sparse protocol</a></li>
  <li>[@09:28] - <a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#local-pin-construction">Local <code>Pin</code> construction</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/1.68.0/src/core/pin.rs.html#1171-1241">Implementation comments</a></li>
      <li><a href="https://github.com/rust-lang/rust/blob/3ebb5629d1a39345d37c4838d31dc7280384ea94/library/core/src/pin.rs#L411-L416">A fun hack</a></li>
    </ul>
  </li>
  <li>[@13:56] - <a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#default-alloc-error-handler">Default <code>alloc</code> error handler</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/106045#issuecomment-1369079471">Small allocs in panic handler probably ok</a></li>
    </ul>
  </li>
  <li>[@18:24] - <a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/primitive.f32.html#impl-From%3Cbool%3E-for-f32"><code>impl From&lt;bool&gt; for f64</code></a></li>
    </ul>
  </li>
  <li>[@19:06] - Changelog deep-dive
    <ul>
      <li>[@19:15] - <a href="https://github.com/rust-lang/rust/pull/105795/">Stabilize UEFI extern</a></li>
      <li>[@20:07] - <a href="https://github.com/rust-lang/cargo/pull/11407/"><code>cargo build --verbose</code></a></li>
      <li>[@20:50] - <a href="https://github.com/rust-lang/cargo/pull/11359"><code>home</code> is a cargo crate</a></li>
      <li>[@21:12] - <a href="https://github.com/rust-lang/cargo/pull/11477"><code>Cargo.lock</code> for workspace publish</a></li>
      <li>[@21:35] - <a href="https://github.com/rust-lang/rust/pull/95985">Make <code>Context</code> <code>!Send</code> and <code>!Sync</code></a></li>
    </ul>
  </li>
</ul>

<h4 id="2424---rust-1681">[@24:24] - <a href="https://blog.rust-lang.org/2023/03/23/Rust-1.68.1.html">Rust 1.68.1</a></h4>

<h4 id="2511---rust-1682">[@25:11] - <a href="https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html">Rust 1.68.2</a></h4>
<ul>
  <li><a href="https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/">GitHub announcement</a></li>
</ul>

<h4 id="2629---rust-1690">[@26:29] - <a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html">Rust 1.69.0</a></h4>

<ul>
  <li>[@28:17] - <a href="https://github.com/rust-lang/rust/pull/42069">Nice PR#42069</a></li>
  <li>[@29:50] - <a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#cargo-now-suggests-to-automatically-fix-some-warnings">More cargo fix</a></li>
  <li>[@31:17] - <a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#debug-information-is-not-included-in-build-scripts-by-default-anymore">No more debug info for build scripts</a>
    <ul>
      <li><a href="https://nnethercote.github.io/">Nicholas Nethercote’s blog</a></li>
    </ul>
  </li>
  <li>[@34:48] - <a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html#method.from_bytes_until_nul"><code>CStr::from_bytes_until_nul</code></a></li>
    </ul>
  </li>
  <li>[@37:24] - Changelog deep-dive
    <ul>
      <li>[@37:28] - <a href="https://github.com/rust-lang/rust/pull/102513/">Unaligned references is a hard error now</a></li>
      <li>[@38:28] - <a href="https://github.com/rust-lang/rust/pull/104429/">Deriving on packed structs</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/104429#issuecomment-1319499278">More detailed description</a></li>
        </ul>
      </li>
      <li>[@44:51] - <a href="https://github.com/rust-lang/cargo/pull/11410/">Suggest cargo add</a></li>
      <li>[@45:36] - <a href="https://github.com/rust-lang/rust/pull/108143/">Search for macros with <code>!</code></a></li>
      <li>[@46:10] - <a href="https://github.com/rust-lang/rust/releases/tag/1.69.0">Compatibility notes</a></li>
      <li>[@47:18] - <a href="https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-01--2012-01-20">Rust 0.1 release notes</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-09-19-rust-1.68-1.69.mp3" length="61683507" type="audio/mpeg"/>
			<itunes:duration>00:51:24</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/joel-marcey-pitching-rust/</link>
			<pubDate>Mon, 11 Sep 2023 19:46:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/joel-marcey-pitching-rust/</guid>
			

			<title><![CDATA[ Pitching Rust to decision-makers, with Joel Marcey ]]></title>
			<itunes:summary><![CDATA[ Marco Otte-Witte discusses how to pitch Rust to decision-makers with Joel Marcey, the Director of Technology at the Rust Foundation.
 ]]></itunes:summary>
			<description><![CDATA[ Marco Otte-Witte discusses how to pitch Rust to decision-makers with Joel Marcey, the Director of Technology at the Rust Foundation.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:33] - Start of the interview
  [@00:50] - Joel’s role at the Rust Foundation
  [@03:17] - The value of Rust adoption for companies
  [@07:29] - Real-world success stories with Rust
  [@11:34] - The implications of adopting Rust as a business
  [@18:17] - Rust’s competitive advantage for hiring
  [@20:18] - Where Rust shines
  [@33:35] - The future of Rust
  [@38:33] - The Rust Foundation’s plans for the future
  [@40:43] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Marco Otte-Witte
 ]]></description>
			<content:encoded><![CDATA[ <p>Marco Otte-Witte discusses how to pitch Rust to decision-makers with <a href="https://joelmarcey.com/">Joel Marcey</a>, the Director of Technology at the Rust Foundation.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://mainmatter.com/blog/2023/08/01/pitching-rust-to-decision-makers-with-joel-marcey/">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:33] - Start of the interview</li>
  <li>[@00:50] - Joel’s role at the Rust Foundation</li>
  <li>[@03:17] - The value of Rust adoption for companies</li>
  <li>[@07:29] - Real-world success stories with Rust</li>
  <li>[@11:34] - The implications of adopting Rust as a business</li>
  <li>[@18:17] - Rust’s competitive advantage for hiring</li>
  <li>[@20:18] - Where Rust shines</li>
  <li>[@33:35] - The future of Rust</li>
  <li>[@38:33] - The Rust Foundation’s plans for the future</li>
  <li>[@40:43] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a></p>

<p>Hosts: <a href="https://twitter.com/marcoow">Marco Otte-Witte</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-09-11-joel-marcey.mp3" length="40043596" type="audio/mpeg"/>
			<itunes:duration>41:05</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/luca-palmieri-web-ecosystem/</link>
			<pubDate>Sat, 12 Aug 2023 13:57:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/luca-palmieri-web-ecosystem/</guid>
			

			<title><![CDATA[ Adopting Rust: present and future of the Rust web ecosystem, with Luca Palmieri ]]></title>
			<itunes:summary><![CDATA[ Marco Otte-Witte discusses with Luca Palmieri the present and future of the Rust web ecosystem.
 ]]></itunes:summary>
			<description><![CDATA[ Marco Otte-Witte discusses with Luca Palmieri the present and future of the Rust web ecosystem.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:00] - Introduction
    
      Video recording of the interview
    
  
  [@00:27] - Start of the interview
  [@01:39] - “Zero to Production in Rust”
    
      Zero to Production in Rust
    
  
  [@02:40] - Luca’s experience working with Rust at AWS
  [@19:14] - Scenarios and use cases for Rust adoption
  [@34:43] - The state of the art and future of web backend development in Rust
  [@45:57] - Conclusion


Credits

Intro Theme: Aerocity

Audio Editing: Mainmatter

Hosting Infrastructure: Jon Gjengset

Show Notes: Mainmatter

Hosts: Marco Otte-Witte
 ]]></description>
			<content:encoded><![CDATA[ <p>Marco Otte-Witte discusses with <a href="https://lpalmieri.com">Luca Palmieri</a> the present and future of the Rust web ecosystem.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:00] - Introduction
    <ul>
      <li><a href="https://www.youtube.com/watch?v=Xb7NokhAVKI">Video recording of the interview</a></li>
    </ul>
  </li>
  <li>[@00:27] - Start of the interview</li>
  <li>[@01:39] - “Zero to Production in Rust”
    <ul>
      <li><a href="https://www.zero2prod.com/">Zero to Production in Rust</a></li>
    </ul>
  </li>
  <li>[@02:40] - Luca’s experience working with Rust at AWS</li>
  <li>[@19:14] - Scenarios and use cases for Rust adoption</li>
  <li>[@34:43] - The state of the art and future of web backend development in Rust</li>
  <li>[@45:57] - Conclusion</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://mainmatter.com">Mainmatter</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://mainmatter.com">Mainmatter</a></p>

<p>Hosts: <a href="https://twitter.com/marcoow">Marco Otte-Witte</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-08-12-luca-palmieri.mp3" length="48875740" type="audio/mpeg"/>
			<itunes:duration>47:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/cliff-crosland/</link>
			<pubDate>Fri, 11 Aug 2023 15:59:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/cliff-crosland/</guid>
			

			<title><![CDATA[ Scanner.dev with Cliff Crosland ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Cliff Crosland about his work on Scanner.dev that is powered by Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Cliff Crosland about his work on Scanner.dev that is powered by Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction
  [@02:16] - Rust for Cloud Infrastructure
  [@07:34] - Exploring libcurl
  [@13:23] - Introducing Rust to Scanner.dev
  [@13:23] - Scala in Data Science
  [@25:22] - Rust vs. Other Languages
  [@40:08] - Encoding/Decoding
  [@45:03] - How Scanner.dev Works
  [@55:16] - Future of Scanner.dev
  [@01:00:58] - Final Information


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://cliffcrosland.com/">Cliff Crosland</a> about his work on Scanner.dev that is powered by Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction</li>
  <li>[@02:16] - Rust for Cloud Infrastructure</li>
  <li>[@07:34] - Exploring libcurl</li>
  <li>[@13:23] - Introducing Rust to Scanner.dev</li>
  <li>[@13:23] - Scala in Data Science</li>
  <li>[@25:22] - Rust vs. Other Languages</li>
  <li>[@40:08] - Encoding/Decoding</li>
  <li>[@45:03] - How Scanner.dev Works</li>
  <li>[@55:16] - Future of Scanner.dev</li>
  <li>[@01:00:58] - Final Information</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-08-11-cliff-crossland.mp3" length="91353957" type="audio/mpeg"/>
			<itunes:duration>1:03:31</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/albert-larsan/</link>
			<pubDate>Fri, 14 Jul 2023 14:08:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/albert-larsan/</guid>
			

			<title><![CDATA[ Bootstrapping Rust with Albert Larsan ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Albert Larsan about his work on bootstrapping the Rust compiler.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Albert Larsan about his work on bootstrapping the Rust compiler.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction to Bootstrap
  [@1:57] - Building the standard library and compiler.
  [@5:34] - The biggest challenges when bootstrapping rustc (the Rust compiler)
  [@11:26] - Why use Python to start the bootstrapping process?
  [@13:08] - Running tests as part of the Rust CI to ensure that each component is well-tested.
  [@15:07] - Running tests on Linux, MacOS, and Windows
  [@18:54] - Features that the Rust bootstrap team has been working on.
  [@20:50] - Plans to run Clippy and fix issues.
  [@23:41] - Stage redesign, verification, reproducibility, and different optimizations implemented in the compiler.
  [@27:28] - Albert’s advice on the process of bootstrapping Rust.
  [@31:05] - The importance of documentation
  [@31:49] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/albertlarsan68">Albert Larsan</a> about his work on bootstrapping the Rust compiler.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction to Bootstrap</li>
  <li>[@1:57] - Building the standard library and compiler.</li>
  <li>[@5:34] - The biggest challenges when bootstrapping <code>rustc</code> (the Rust compiler)</li>
  <li>[@11:26] - Why use Python to start the bootstrapping process?</li>
  <li>[@13:08] - Running tests as part of the Rust CI to ensure that each component is well-tested.</li>
  <li>[@15:07] - Running tests on Linux, MacOS, and Windows</li>
  <li>[@18:54] - Features that the Rust bootstrap team has been working on.</li>
  <li>[@20:50] - Plans to run Clippy and fix issues.</li>
  <li>[@23:41] - Stage redesign, verification, reproducibility, and different optimizations implemented in the compiler.</li>
  <li>[@27:28] - Albert’s advice on the process of bootstrapping Rust.</li>
  <li>[@31:05] - The importance of documentation</li>
  <li>[@31:49] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-07-14-albert-larsan.mp3" length="31745254" type="audio/mpeg"/>
			<itunes:duration>33:04</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/ivan-cernja/</link>
			<pubDate>Fri, 30 Jun 2023 13:01:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/ivan-cernja/</guid>
			

			<title><![CDATA[ Shuttle with Ivan Cernja ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Ivan Cernja, DevRel at Shuttle, a platform for deploying Rust apps.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Ivan Cernja, DevRel at Shuttle, a platform for deploying Rust apps.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction.
  [@2:04] - Ivan’s programming background and how he got involved with Shuttle.
  [@4:41] - What is Shuttle?
  [@6:15] - Why choose Rust for Shuttle?
  [@9:36] - Deciding to make Shuttle open source and community feedback.
  [@12:38] - Shuttle AI and integration with ChatGPT.
  [@18:04] - Shuttle Heroes program.
  [@21:10] - Pain points working with Rust.
  [@22:51] - Async runtime issues.
  [@24:01] - What’s next for Shuttle?
  [@26:22] - The best things and advantages about using Rust.
  [@27:28] - Why startups are reluctant about using Rust.
  [@32:14] - Moving to Linz and getting involved in Rust Linz.
  [@36:10] - Ivan’s goal on making Rust education as accessible as possible.
  [@37:26] - How to get hold of Ivan and get more information about Shuttle.


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma and Zeeshan Ali Khan
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma and <a href="https://github.com/zeenix">Zeeshan Ali Khan</a> talk with <a href="https://twitter.com/cernjai">Ivan Cernja</a>, DevRel at <a href="https://www.shuttle.rs/">Shuttle</a>, a platform for deploying Rust apps.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction.</li>
  <li>[@2:04] - Ivan’s programming background and how he got involved with Shuttle.</li>
  <li>[@4:41] - What is Shuttle?</li>
  <li>[@6:15] - Why choose Rust for Shuttle?</li>
  <li>[@9:36] - Deciding to make Shuttle open source and community feedback.</li>
  <li>[@12:38] - Shuttle AI and integration with ChatGPT.</li>
  <li>[@18:04] - Shuttle Heroes program.</li>
  <li>[@21:10] - Pain points working with Rust.</li>
  <li>[@22:51] - Async runtime issues.</li>
  <li>[@24:01] - What’s next for Shuttle?</li>
  <li>[@26:22] - The best things and advantages about using Rust.</li>
  <li>[@27:28] - Why startups are reluctant about using Rust.</li>
  <li>[@32:14] - Moving to Linz and getting involved in Rust Linz.</li>
  <li>[@36:10] - Ivan’s goal on making Rust education as accessible as possible.</li>
  <li>[@37:26] - How to get hold of Ivan and get more information about Shuttle.</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a> and <a href="https://github.com/zeenix">Zeeshan Ali Khan</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-06-30-ivan-cernja.mp3" length="37264821" type="audio/mpeg"/>
			<itunes:duration>38:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/erlend-sogge-heggen/</link>
			<pubDate>Mon, 26 Jun 2023 06:25:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/erlend-sogge-heggen/</guid>
			

			<title><![CDATA[ Fish Folk with Erlend Sogge Heggen ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Erlend Sogge Heggen, Founder of Fish Folk. Fish Folk is a collection of open source games written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Erlend Sogge Heggen, Founder of Fish Folk. Fish Folk is a collection of open source games written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction to Fish Folk.
  [@2:17] - Initial concerns about using Rust in a game development project and how it worked out.
  [@5:46] - The inspiration behind Fish Folk.
  [@8:05] - The importance of modding and building an open and community-oriented environment.
  [@10:52] - Protection and licensing of the project.
  [@14:38] - The process of finding developers and contributors to the project.
  [@18:24] - Initial funding for the project and financing contributors.
  [@22:19] - Legalization and registration.
  [@23:37] - Fish Folk’s Kickstarter campaign.
  [@25:16] - Fish Folk’s several iterations and transitions and how they affected the development of the game.
  [@25:50] - The decision to switch from Macroquad to Bevy.
  [@31:40] - The overall experience and result of switching from Macroquad to Bevy.
  [@32:49] - Experimenting with different approaches and models for multiplayer implementation.
  [@35:22] - Plans on monetization.
  [@40:57] - Timelines and deadlines for the release of the game.
  [@44:39] - How to get involved with the project.


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/erlend_sh">Erlend Sogge Heggen</a>, Founder of <a href="https://fishfolk.org/">Fish Folk</a>. Fish Folk is a collection of open source games written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction to Fish Folk.</li>
  <li>[@2:17] - Initial concerns about using Rust in a game development project and how it worked out.</li>
  <li>[@5:46] - The inspiration behind Fish Folk.</li>
  <li>[@8:05] - The importance of modding and building an open and community-oriented environment.</li>
  <li>[@10:52] - Protection and licensing of the project.</li>
  <li>[@14:38] - The process of finding developers and contributors to the project.</li>
  <li>[@18:24] - Initial funding for the project and financing contributors.</li>
  <li>[@22:19] - Legalization and registration.</li>
  <li>[@23:37] - Fish Folk’s Kickstarter campaign.</li>
  <li>[@25:16] - Fish Folk’s several iterations and transitions and how they affected the development of the game.</li>
  <li>[@25:50] - The decision to switch from Macroquad to Bevy.</li>
  <li>[@31:40] - The overall experience and result of switching from Macroquad to Bevy.</li>
  <li>[@32:49] - Experimenting with different approaches and models for multiplayer implementation.</li>
  <li>[@35:22] - Plans on monetization.</li>
  <li>[@40:57] - Timelines and deadlines for the release of the game.</li>
  <li>[@44:39] - How to get involved with the project.</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-06-23-erlend-sogge-heggen.mp3" length="49432869" type="audio/mpeg"/>
			<itunes:duration>51:30</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/kwindla-hultman-kramer/</link>
			<pubDate>Fri, 16 Jun 2023 12:31:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/kwindla-hultman-kramer/</guid>
			

			<title><![CDATA[ Daily with Kwindla Hultman Kramer ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Kwindla Hultman Kramer, Founder and CEO of Daily, and João Neves, Staff Engineer at Daily. Daily provides SDKs for building video applications on top of the WebRTC standard using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Kwindla Hultman Kramer, Founder and CEO of Daily, and João Neves, Staff Engineer at Daily. Daily provides SDKs for building video applications on top of the WebRTC standard using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction to Daily
  [@05:00] - WebRTC Implementation and sharing across different platform
  [@10:31] - The challenges of integrating C++ with WebRTC
  [@19:16] - Signaling in WebRTC - Session setup and initial configuration
  [@22:45] - Challenges in implementing WebRTC standards
  [@27:21] - Handling and working around platform and browser differences when implementing WebRTC
  [@30:51] - Daily’s mono repo approach for code sharing
  [@33:30] - The process of building and releasing code in relation to different platforms and dependencies
  [@35:57] - Integrating Rust, C, Objective C, and Swift for iOS development
  [@37:20] - Daily’s automated testing processes
  [@42:24] - Daily’s network simulation layer in their testing process
  [@44:00] - The use of Rust in implementing network simulation for testing purposes
  [@49:15] - Using WebAssembly alongside native code in an application, and the potential obstacles to consider
  [@50:52] - Crates that are being used by Daily
  [@52:44] - What would differentiate Daily compared to other solutions?
  [@55:48] - Daily vs Zoom
  [@56:38] - Other open-source projects from Daily
  [@1:01:20] - Parting thoughts and how to get in touch with Daily


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/kwkramer">Kwindla Hultman Kramer</a>, Founder and CEO of <a href="https://www.daily.co/">Daily</a>, and <a href="https://www.linkedin.com/in/jo%C3%A3o-neves-8a990411/">João Neves</a>, Staff Engineer at Daily. Daily provides SDKs for building video applications on top of the WebRTC standard using Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction to Daily</li>
  <li>[@05:00] - WebRTC Implementation and sharing across different platform</li>
  <li>[@10:31] - The challenges of integrating C++ with WebRTC</li>
  <li>[@19:16] - Signaling in WebRTC - Session setup and initial configuration</li>
  <li>[@22:45] - Challenges in implementing WebRTC standards</li>
  <li>[@27:21] - Handling and working around platform and browser differences when implementing WebRTC</li>
  <li>[@30:51] - Daily’s mono repo approach for code sharing</li>
  <li>[@33:30] - The process of building and releasing code in relation to different platforms and dependencies</li>
  <li>[@35:57] - Integrating Rust, C, Objective C, and Swift for iOS development</li>
  <li>[@37:20] - Daily’s automated testing processes</li>
  <li>[@42:24] - Daily’s network simulation layer in their testing process</li>
  <li>[@44:00] - The use of Rust in implementing network simulation for testing purposes</li>
  <li>[@49:15] - Using WebAssembly alongside native code in an application, and the potential obstacles to consider</li>
  <li>[@50:52] - Crates that are being used by Daily</li>
  <li>[@52:44] - What would differentiate Daily compared to other solutions?</li>
  <li>[@55:48] - Daily vs Zoom</li>
  <li>[@56:38] - Other open-source projects from Daily</li>
  <li>[@1:01:20] - Parting thoughts and how to get in touch with Daily</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-06-16-kwindla-hultman-kramer.mp3" length="60368146" type="audio/mpeg"/>
			<itunes:duration>01:02:53</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/tobias-hunger-slint-1.0/</link>
			<pubDate>Fri, 09 Jun 2023 15:06:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/tobias-hunger-slint-1.0/</guid>
			

			<title><![CDATA[ Slint 1.0 with Tobias Hunger ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Tobias Hunger, developer on Slint. Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display. Slint has just made a 1.0 release.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Tobias Hunger, developer on Slint. Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display. Slint has just made a 1.0 release.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction
  [@04:02] - Slint updates and progress from the previous interview
  [@06:15] - Upgrades that came along releasing of Slint 1.0
  [@11:12] - Bugs fixed in Slint 1.0
  [@12:43] - Stability, improved tooling and other key features in the Slint upgrade
  [@15:34] - Multi-window support
  [@18:26] - Screen reader accessibility and keyboard shortcut in Slint
  [@22:04] - Raspberry Pi Pico and Zero 2 W
  [@24:21] - Rust support, line buffering and graphics acceleration
  [@26:10] - Other UIs that are out in the Rust space
  [@27:17] - Handling bugs and feature reports
  [@29:10] - Slint documentation
  [@34:02] - Patch files
  [@37:16] - Plans for the 1.1 release
  [@38:51] - Interesting ways users used Slint API
  [@40:30] - Slint users and Rust community feedback
  [@43:35] - Requiring that users have a Rust compiler installed
  [@46:31] - Programming with Rust vs C, C++
  [@48:33] - Tobias’ great experience with the Rust community


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/t_hunger">Tobias Hunger</a>, developer on <a href="https://slint-ui.com/">Slint</a>. Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display. Slint has just made a 1.0 release.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction</li>
  <li>[@04:02] - Slint updates and progress from the previous interview</li>
  <li>[@06:15] - Upgrades that came along releasing of Slint 1.0</li>
  <li>[@11:12] - Bugs fixed in Slint 1.0</li>
  <li>[@12:43] - Stability, improved tooling and other key features in the Slint upgrade</li>
  <li>[@15:34] - Multi-window support</li>
  <li>[@18:26] - Screen reader accessibility and keyboard shortcut in Slint</li>
  <li>[@22:04] - Raspberry Pi Pico and Zero 2 W</li>
  <li>[@24:21] - Rust support, line buffering and graphics acceleration</li>
  <li>[@26:10] - Other UIs that are out in the Rust space</li>
  <li>[@27:17] - Handling bugs and feature reports</li>
  <li>[@29:10] - Slint documentation</li>
  <li>[@34:02] - Patch files</li>
  <li>[@37:16] - Plans for the 1.1 release</li>
  <li>[@38:51] - Interesting ways users used Slint API</li>
  <li>[@40:30] - Slint users and Rust community feedback</li>
  <li>[@43:35] - Requiring that users have a Rust compiler installed</li>
  <li>[@46:31] - Programming with Rust vs C, C++</li>
  <li>[@48:33] - Tobias’ great experience with the Rust community</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-06-09-tobias-hunger.mp3" length="47732193" type="audio/mpeg"/>
			<itunes:duration>49:43</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/stefan-baumgartner/</link>
			<pubDate>Mon, 05 Jun 2023 16:04:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/stefan-baumgartner/</guid>
			

			<title><![CDATA[ Shuttle Launchpad with Stefan Baumgartner ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Stefan Baumgartner, contributor to the Shuttle Launchpad tutorial series on Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Stefan Baumgartner, contributor to the Shuttle Launchpad tutorial series on Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:00] - Introduction
  [@01:45] - What is Shuttle Launchpad and why was it created
  [@03:34] - Shuttle Launchpad initial development
  [@06:39] - Supporting multiple backends and databases
  [@08:32] - How did Stefan get into Shuttle
  [@10:27] - Rust, Shuttle, and security
  [@12:57] - Rust community in Austria
  [@15:27] - Rust Linz
  [@17:33] - Stefan’s career background
  [@21:19] - Language choice trade-offs
  [@25:34] - Developer communication
  [@27:15] - Gimoji
  [@28:50] - Zed
  [@30:00] - Copilot when working with Rust
  [@32:12] - VS Code
  [@33:14] - Shuttle Launchpad’s aim in making learning Rust much easier
  [@37:50] - Initial issue of creating Shuttle Launchpad
  [@45:25] - Differences with traditional linked list newsletters
  [@48:09] - Other materials and ways to learn and get started with Rust
  [@54:25] - Plugs for Gimoji and Shuttle Launchpad


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma and Zeeshan Ali Khan
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma and <a href="https://github.com/zeenix">Zeeshan Ali Khan</a> talk with <a href="https://twitter.com/ddprrt">Stefan Baumgartner</a>, contributor to the <a href="https://www.shuttle.rs/launchpad">Shuttle Launchpad</a> tutorial series on Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:00] - Introduction</li>
  <li>[@01:45] - What is Shuttle Launchpad and why was it created</li>
  <li>[@03:34] - Shuttle Launchpad initial development</li>
  <li>[@06:39] - Supporting multiple backends and databases</li>
  <li>[@08:32] - How did Stefan get into Shuttle</li>
  <li>[@10:27] - Rust, Shuttle, and security</li>
  <li>[@12:57] - Rust community in Austria</li>
  <li>[@15:27] - Rust Linz</li>
  <li>[@17:33] - Stefan’s career background</li>
  <li>[@21:19] - Language choice trade-offs</li>
  <li>[@25:34] - Developer communication</li>
  <li>[@27:15] - Gimoji</li>
  <li>[@28:50] - Zed</li>
  <li>[@30:00] - Copilot when working with Rust</li>
  <li>[@32:12] - VS Code</li>
  <li>[@33:14] - Shuttle Launchpad’s aim in making learning Rust much easier</li>
  <li>[@37:50] - Initial issue of creating Shuttle Launchpad</li>
  <li>[@45:25] - Differences with traditional linked list newsletters</li>
  <li>[@48:09] - Other materials and ways to learn and get started with Rust</li>
  <li>[@54:25] - Plugs for Gimoji and Shuttle Launchpad</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a> and <a href="https://github.com/zeenix">Zeeshan Ali Khan</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-06-02-stefan-baumgartner.mp3" length="54215311" type="audio/mpeg"/>
			<itunes:duration>56:28</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rainer-stropek/</link>
			<pubDate>Sat, 27 May 2023 16:14:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rainer-stropek/</guid>
			

			<title><![CDATA[ CoderDojo and Rust Linz with Rainer Stropek ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Rainer Stropek, creator of CoderDojo Linz and Rust Linz.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with Rainer Stropek, creator of CoderDojo Linz and Rust Linz.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction to Rust Linz
  [@3:23] - How did Rainer get into teaching kids in Austria how to code
  [@5:17] - CoderDojo’s vision in creating a coding club
  [@7:44] - Why text-based programming is not an option for kids younger than 10
  [@11:31] - Starting programming at a young age
  [@18:40] - Is coding and programming for everyone?
  [@22:40] - Parent’s huge influence on kids who wants to pursue programming
  [@24:32] - CoderDojo’s approach to inclusive programming
  [@33:55] - CoderDojo for adults and for kids
  [@35:59] - Rainer’s programming background
  [@37:29] - Organizing Rust Linz meet-ups
  [@43:26] - Rust meet-up schedules
  [@45:09] - Call for speakers for Rust Linz
  [@49:22] - Using rust in building web APIs and application programming
  [@50:14] - Interfacing Rust with other languages
  [@52:19] - Future of WebAssembly
  [@54:01] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma and Zeeshan Ali Khan
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma and <a href="https://toot.cat/@zeenix">Zeeshan Ali Khan</a> talk with <a href="https://github.com/rstropek">Rainer Stropek</a>, creator of <a href="https://linz.coderdojo.net/">CoderDojo Linz</a> and <a href="https://rust-linz.at/">Rust Linz</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction to Rust Linz</li>
  <li>[@3:23] - How did Rainer get into teaching kids in Austria how to code</li>
  <li>[@5:17] - CoderDojo’s vision in creating a coding club</li>
  <li>[@7:44] - Why text-based programming is not an option for kids younger than 10</li>
  <li>[@11:31] - Starting programming at a young age</li>
  <li>[@18:40] - Is coding and programming for everyone?</li>
  <li>[@22:40] - Parent’s huge influence on kids who wants to pursue programming</li>
  <li>[@24:32] - CoderDojo’s approach to inclusive programming</li>
  <li>[@33:55] - CoderDojo for adults and for kids</li>
  <li>[@35:59] - Rainer’s programming background</li>
  <li>[@37:29] - Organizing Rust Linz meet-ups</li>
  <li>[@43:26] - Rust meet-up schedules</li>
  <li>[@45:09] - Call for speakers for Rust Linz</li>
  <li>[@49:22] - Using rust in building web APIs and application programming</li>
  <li>[@50:14] - Interfacing Rust with other languages</li>
  <li>[@52:19] - Future of WebAssembly</li>
  <li>[@54:01] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a> and <a href="https://toot.cat/@zeenix">Zeeshan Ali Khan</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-05-26-rainer-stropek.mp3" length="53188650" type="audio/mpeg"/>
			<itunes:duration>55:24</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/david-hewitt/</link>
			<pubDate>Fri, 19 May 2023 18:32:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/david-hewitt/</guid>
			

			<title><![CDATA[ PyO3 with David Hewitt ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with David Hewitt, contributor to the PyO3 crate that helps to create Python extensions using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with David Hewitt, contributor to the PyO3 crate that helps to create Python extensions using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction PyO3
  [@5:03] - History of PyO3
  [@9:14] - Maintainers of PyO3
  [@12:15] - Comparing different languages for machine learning
  [@16:21] - Python’s ability to tap into native languages
  [@17:38] - Consideration of using Rust with Python
  [@20:39] - Python’s Global Interpreter Lock (GIL)
  [@23:14] - Python vs Rust performance
  [@24:20] - Rust error handling and two reasons to move Python code to Rust
  [@26:08] - The complaints about Python
  [@31:03] - C vs Python
  [@33:17] - Why use Rust instead of C in the cryptography library
  [@36:06] - Small percentage of people who get cut out by the use of Rust
  [@39:36] - The importance of memory safety
  [@41:27] - Zig and Rust
  [@43:58] - The reliability of Rust use in Android Kernel
  [@46:32] - Python interpreter
  [@51:13] - Inline Python
  [@56:05] - How to get started with Rust
  [@57:41] - The future of PyO3
  [@59:07] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/davidhewitt">David Hewitt</a>, contributor to the <a href="https://github.com/PyO3/pyo3">PyO3</a> crate that helps to create Python extensions using Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction PyO3</li>
  <li>[@5:03] - History of PyO3</li>
  <li>[@9:14] - Maintainers of PyO3</li>
  <li>[@12:15] - Comparing different languages for machine learning</li>
  <li>[@16:21] - Python’s ability to tap into native languages</li>
  <li>[@17:38] - Consideration of using Rust with Python</li>
  <li>[@20:39] - Python’s Global Interpreter Lock (GIL)</li>
  <li>[@23:14] - Python vs Rust performance</li>
  <li>[@24:20] - Rust error handling and two reasons to move Python code to Rust</li>
  <li>[@26:08] - The complaints about Python</li>
  <li>[@31:03] - C vs Python</li>
  <li>[@33:17] - Why use Rust instead of C in the cryptography library</li>
  <li>[@36:06] - Small percentage of people who get cut out by the use of Rust</li>
  <li>[@39:36] - The importance of memory safety</li>
  <li>[@41:27] - Zig and Rust</li>
  <li>[@43:58] - The reliability of Rust use in Android Kernel</li>
  <li>[@46:32] - Python interpreter</li>
  <li>[@51:13] - Inline Python</li>
  <li>[@56:05] - How to get started with Rust</li>
  <li>[@57:41] - The future of PyO3</li>
  <li>[@59:07] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-05-19-david-hewitt.mp3" length="59525329" type="audio/mpeg"/>
			<itunes:duration>01:02:00</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/john-nunley/</link>
			<pubDate>Fri, 12 May 2023 15:22:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/john-nunley/</guid>
			

			<title><![CDATA[ smol with John Nunley ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with John Nunley, contributor to the smol async runtime.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma and Zeeshan Ali Khan talk with John Nunley, contributor to the smol async runtime.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction
  [@1:46] - Advantage of smol
  [@5:40] - John Nunley’s programming background
  [@11:50] - Tauri, GTK and other GUI frameworks
  [@16:16] - Async.io
  [@19:28] - Writing packages and breaking up packages into smaller modules
  [@24:21] - John’s work career
  [@25:09] - Windows vs Linux API
  [@29:06] - windows-rs
  [@30:03] - Windows support with Rust
  [@31:46] - Recent changes in smol
  [@33:16] - Event Listener and how it works
  [@37:26] - Handling pull requests and complaints
  [@41:40] - smol’s integration with other runtimes
  [@44:54] - smol vs Tokio
  [@47:04] - Reason why smol is growing in popularity among GUI crates
  [@49:06] - Recent developments in async
  [@52:18] - The Async working group
  [@58:11] - Community-based crates with suggestions and structure
  [@1:00:22] - What to expect to come out of smol in the near future?
  [@1:02:11] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma and Zeeshan Ali Khan
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma and <a href="https://toot.cat/@zeenix">Zeeshan Ali Khan</a> talk with <a href="https://github.com/notgull">John Nunley</a>, contributor to the <a href="https://github.com/smol-rs/smol">smol</a> async runtime.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@1:46] - Advantage of smol</li>
  <li>[@5:40] - John Nunley’s programming background</li>
  <li>[@11:50] - Tauri, GTK and other GUI frameworks</li>
  <li>[@16:16] - Async.io</li>
  <li>[@19:28] - Writing packages and breaking up packages into smaller modules</li>
  <li>[@24:21] - John’s work career</li>
  <li>[@25:09] - Windows vs Linux API</li>
  <li>[@29:06] - <a href="https://github.com/microsoft/windows-rs"><code>windows-rs</code></a></li>
  <li>[@30:03] - Windows support with Rust</li>
  <li>[@31:46] - Recent changes in smol</li>
  <li>[@33:16] - Event Listener and how it works</li>
  <li>[@37:26] - Handling pull requests and complaints</li>
  <li>[@41:40] - smol’s integration with other runtimes</li>
  <li>[@44:54] - smol vs Tokio</li>
  <li>[@47:04] - Reason why smol is growing in popularity among GUI crates</li>
  <li>[@49:06] - Recent developments in async</li>
  <li>[@52:18] - The Async working group</li>
  <li>[@58:11] - Community-based crates with suggestions and structure</li>
  <li>[@1:00:22] - What to expect to come out of smol in the near future?</li>
  <li>[@1:02:11] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a> and <a href="https://toot.cat/@zeenix">Zeeshan Ali Khan</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-05-12-john-nunley.mp3" length="62503070" type="audio/mpeg"/>
			<itunes:duration>01:05:06</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/orson-peters/</link>
			<pubDate>Fri, 05 May 2023 16:46:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/orson-peters/</guid>
			

			<title><![CDATA[ Glidesort with Orson Peters ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Orson Peters, creator of the Glidesort sorting algorithm that may make its way into the Rust core library.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Orson Peters, creator of the Glidesort sorting algorithm that may make its way into the Rust core library.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction to Glidesort
  [@1:19] - What got Orson interested in sorting algorithms
  [@4:47] - Process of creating Glidesort
  [@6:06] - Quicksort and how to handle low cardinality inputs
  [@8:18] - Three-way comparison and binary partitioning
  [@10:59] - Basic terms to know about quicksort and mergesort
  [@15:28] - Choosing an element as a pivot
  [@24:16] - Stable and unstable sorting algorithms
  [@27:03] - How Glidesort can help with memory usage and memory savings
  [@35:51] - How Glidesort detects if there is already a sorting in an array
  [@38:19] - Linear scanning
  [@41:47] - When Glidesort is a good algorithm to use
  [@45:53] - Glidesort is a comparison-based algorithm
  [@49:09] - What datatype would be great for Glidesort
  [@52:17] - Sorting algorithms and language issues
  [@53:11] - Sorting algorithm in Python vs Rust
  [@55:52] - The challenge of implementing sorting algorithms in Rust
  [@58:36] - Reducing Glidesort’s code size
  [@1:01:21] - Standard library benchmarking criteria
  [@1:02:52] - Performance evaluation of Glidesort and other improvements
  [@1:06:08] - Quantum computing
  [@1:07:43] - Next on the list for Glidesort improvements
  [@1:10:54] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://orlp.net/">Orson Peters</a>, creator of the <a href="https://github.com/orlp/glidesort">Glidesort</a> sorting algorithm that may make its way into the Rust core library.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction to Glidesort</li>
  <li>[@1:19] - What got Orson interested in sorting algorithms</li>
  <li>[@4:47] - Process of creating Glidesort</li>
  <li>[@6:06] - Quicksort and how to handle low cardinality inputs</li>
  <li>[@8:18] - Three-way comparison and binary partitioning</li>
  <li>[@10:59] - Basic terms to know about quicksort and mergesort</li>
  <li>[@15:28] - Choosing an element as a pivot</li>
  <li>[@24:16] - Stable and unstable sorting algorithms</li>
  <li>[@27:03] - How Glidesort can help with memory usage and memory savings</li>
  <li>[@35:51] - How Glidesort detects if there is already a sorting in an array</li>
  <li>[@38:19] - Linear scanning</li>
  <li>[@41:47] - When Glidesort is a good algorithm to use</li>
  <li>[@45:53] - Glidesort is a comparison-based algorithm</li>
  <li>[@49:09] - What datatype would be great for Glidesort</li>
  <li>[@52:17] - Sorting algorithms and language issues</li>
  <li>[@53:11] - Sorting algorithm in Python vs Rust</li>
  <li>[@55:52] - The challenge of implementing sorting algorithms in Rust</li>
  <li>[@58:36] - Reducing Glidesort’s code size</li>
  <li>[@1:01:21] - Standard library benchmarking criteria</li>
  <li>[@1:02:52] - Performance evaluation of Glidesort and other improvements</li>
  <li>[@1:06:08] - Quantum computing</li>
  <li>[@1:07:43] - Next on the list for Glidesort improvements</li>
  <li>[@1:10:54] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-05-05-orson-peters.mp3" length="71687523" type="audio/mpeg"/>
			<itunes:duration>01:14:40</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/jonathan-pallant/</link>
			<pubDate>Fri, 28 Apr 2023 16:25:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/jonathan-pallant/</guid>
			

			<title><![CDATA[ Rust Embedded WG with Jonathan Pallant ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Jonathan Pallant, Senior Embedded Engineer of Ferrous Systems and member of Rust Embedded Working Group about Rust on embedded systems.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Jonathan Pallant, Senior Embedded Engineer of Ferrous Systems and member of Rust Embedded Working Group about Rust on embedded systems.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction
  [@2:23] - Jonathan’s projects
  [@10:3] - Keyboard drivers, CP/M, IBM history
  [@22:19] - Jonathan’s background in embedded systems
  [@23:46] - Understanding more about computers and laptops
  [@33:37] - Rust working group for embedded systems
  [@37:16] - The power of Rust on microcontrollers
  [@40:00] - The difference between a Microcontroller and a Central Processing Unit
  [@42:15] - Discussing System on Chip (SoC), Memory Management Unit (MMU), and Microcontrollers
  [@45:50] - RISC (Reduced Instruction Set Computing) vs CISC (Complex Instruction Set Computing) architecture
  [@53:30] - How did the working group become an official working group?
  [@56:00] - Using Rust with microcontrollers
  [@59:54] - Choosing Rust over C or Python


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with Jonathan Pallant, Senior Embedded Engineer of <a href="https://ferrous-systems.com/">Ferrous Systems</a> and member of <a href="https://www.rust-lang.org/governance/wgs/embedded">Rust Embedded Working Group</a> about Rust on embedded systems.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@2:23] - Jonathan’s projects</li>
  <li>[@10:3] - Keyboard drivers, CP/M, IBM history</li>
  <li>[@22:19] - Jonathan’s background in embedded systems</li>
  <li>[@23:46] - Understanding more about computers and laptops</li>
  <li>[@33:37] - Rust working group for embedded systems</li>
  <li>[@37:16] - The power of Rust on microcontrollers</li>
  <li>[@40:00] - The difference between a Microcontroller and a Central Processing Unit</li>
  <li>[@42:15] - Discussing System on Chip (SoC), Memory Management Unit (MMU), and Microcontrollers</li>
  <li>[@45:50] - RISC (Reduced Instruction Set Computing) vs CISC (Complex Instruction Set Computing) architecture</li>
  <li>[@53:30] - How did the working group become an official working group?</li>
  <li>[@56:00] - Using Rust with microcontrollers</li>
  <li>[@59:54] - Choosing Rust over C or Python</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-04-28-jonathan-pallant.mp3" length="60391382" type="audio/mpeg"/>
			<itunes:duration>01:02:54</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/tobie-jamie-morgan/</link>
			<pubDate>Fri, 21 Apr 2023 15:46:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/tobie-jamie-morgan/</guid>
			

			<title><![CDATA[ SurrealDB with Tobie and Jamie Morgan ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Tobie and Jamie Morgan, creators of SurrealDB about why they switched to Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Tobie and Jamie Morgan, creators of SurrealDB about why they switched to Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Intro
  [@1:42] - What made SurrealDB switch from Go to Rust?
  [@4:51] - What is SurrealDB and why it was made?
  [@9:18] - How does SurrealDB store data?
  [@11:24] - SurrealDB and WebAssembly
  [@13:25] - SurrealDB limitations running in the browser
  [@14:09] - Running SurrealDB in the cloud
  [@15:37] - Advantage of SurrealDB over other services
  [@16:35] - Transparency in SurrealDB
  [@18:37] - Encryption in SurrealDB
  [@19:26] - SurrealDB licensing and open-source
  [@25:45] - SurrealDB services and users
  [@28:57] - When not to use SurrealDB?
  [@31:34] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with Tobie and Jamie Morgan, creators of <a href="https://surrealdb.com/">SurrealDB</a> about why they switched to Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Intro</li>
  <li>[@1:42] - What made SurrealDB switch from Go to Rust?</li>
  <li>[@4:51] - What is SurrealDB and why it was made?</li>
  <li>[@9:18] - How does SurrealDB store data?</li>
  <li>[@11:24] - SurrealDB and WebAssembly</li>
  <li>[@13:25] - SurrealDB limitations running in the browser</li>
  <li>[@14:09] - Running SurrealDB in the cloud</li>
  <li>[@15:37] - Advantage of SurrealDB over other services</li>
  <li>[@16:35] - Transparency in SurrealDB</li>
  <li>[@18:37] - Encryption in SurrealDB</li>
  <li>[@19:26] - SurrealDB licensing and open-source</li>
  <li>[@25:45] - SurrealDB services and users</li>
  <li>[@28:57] - When not to use SurrealDB?</li>
  <li>[@31:34] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-04-21-tobie-jamie-morgan-hitchcock.mp3" length="30751022" type="audio/mpeg"/>
			<itunes:duration>32:02</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/lukas-wirth/</link>
			<pubDate>Sat, 15 Apr 2023 06:18:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/lukas-wirth/</guid>
			

			<title><![CDATA[ Rust Analyzer with Lukas Wirth ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Lukas Wirth, member of the rust-analyzer team.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Lukas Wirth, member of the rust-analyzer team.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - Introduction
  [@1:46] - Rust Analyzer’s source of funding and history
  [@10:56] - Lukas’ contribution and work in Rust Analyzer
  [@16:01] - What is Rust Analyzer and what does it do?
  [@17:35] - Rust Analyzer diagnostics and implementation
  [@21:23] - The importance of Rust Analyzer
  [@25:36] - Rust Analyzer’s limitations
  [@32:54] - Lessons from the left-pad library issue
  [@35:20] - Difficulties with dependency version duplicates
  [@39:53] - Installing Rust Analyzer for different code editors
  [@44:29] - Rust Language Server vs Rust Analyzer
  [@51:25] - Clippy
  [@56:39] - Rust’s advantage over other languages
  [@58:08] - Parting thoughts


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://veykril.github.io/">Lukas Wirth</a>, member of the <a href="https://rust-analyzer.github.io/">rust-analyzer</a> team.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@1:46] - Rust Analyzer’s source of funding and history</li>
  <li>[@10:56] - Lukas’ contribution and work in Rust Analyzer</li>
  <li>[@16:01] - What is Rust Analyzer and what does it do?</li>
  <li>[@17:35] - Rust Analyzer diagnostics and implementation</li>
  <li>[@21:23] - The importance of Rust Analyzer</li>
  <li>[@25:36] - Rust Analyzer’s limitations</li>
  <li>[@32:54] - Lessons from the <code>left-pad</code> library issue</li>
  <li>[@35:20] - Difficulties with dependency version duplicates</li>
  <li>[@39:53] - Installing Rust Analyzer for different code editors</li>
  <li>[@44:29] - Rust Language Server vs Rust Analyzer</li>
  <li>[@51:25] - Clippy</li>
  <li>[@56:39] - Rust’s advantage over other languages</li>
  <li>[@58:08] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-04-14-lukas-wirth.mp3" length="57389841" type="audio/mpeg"/>
			<itunes:duration>59:46</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/syrus-akbary/</link>
			<pubDate>Fri, 07 Apr 2023 15:56:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/syrus-akbary/</guid>
			

			<title><![CDATA[ Wasmer with Syrus Akbary ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Syrus Akbary, Founder and CEO at Wasmer, a WebAssembly runtime written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Syrus Akbary, Founder and CEO at Wasmer, a WebAssembly runtime written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:00] - What is Wasmer?
  [@4:50] - How Syrus got into Wasmer
  [@7:55] - WebAssembly vs Docker and Kubernetes
  [@14:30] - WebAssembly GC proposal and updates
  [@18:06] - Advantage of using WASM over other techniques
  [@20:52] - Permission system with WebAssembly
  [@23:30] - Why choose Wasmer?
  [@25:04] - Wasmer installation process
  [@25:56] - What makes Rust the best language to use for creating Wasmer
  [@28:47] - Compiling and running your Rust codes to WebAssembly
  [@30:48] - Updates and features that are coming out on WebAssembly
  [@39:36] - Rust and WebAssembly
  [@46:00] - Making all applications able to compile to WebAssembly
  [@47:01] - Using GUI with Wasmer
  [@50:16] - Where to get more information about Wasmer


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://syrusakbary.com/">Syrus Akbary</a>, Founder and CEO at <a href="https://wasmer.io/">Wasmer</a>, a WebAssembly runtime written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:00] - What is Wasmer?</li>
  <li>[@4:50] - How Syrus got into Wasmer</li>
  <li>[@7:55] - WebAssembly vs Docker and Kubernetes</li>
  <li>[@14:30] - WebAssembly GC proposal and updates</li>
  <li>[@18:06] - Advantage of using WASM over other techniques</li>
  <li>[@20:52] - Permission system with WebAssembly</li>
  <li>[@23:30] - Why choose Wasmer?</li>
  <li>[@25:04] - Wasmer installation process</li>
  <li>[@25:56] - What makes Rust the best language to use for creating Wasmer</li>
  <li>[@28:47] - Compiling and running your Rust codes to WebAssembly</li>
  <li>[@30:48] - Updates and features that are coming out on WebAssembly</li>
  <li>[@39:36] - Rust and WebAssembly</li>
  <li>[@46:00] - Making <em>all</em> applications able to compile to WebAssembly</li>
  <li>[@47:01] - Using GUI with Wasmer</li>
  <li>[@50:16] - Where to get more information about Wasmer</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-04-07-syrus-akbary.mp3" length="49607044" type="audio/mpeg"/>
			<itunes:duration>51:40</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/josh-matthews/</link>
			<pubDate>Fri, 31 Mar 2023 15:06:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/josh-matthews/</guid>
			

			<title><![CDATA[ Servo with Josh Matthews ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Josh Matthews, former Engineering Manager at Mozilla for Servo, a web browser engine written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Josh Matthews, former Engineering Manager at Mozilla for Servo, a web browser engine written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Josh’s history with Servo
  [@3:54] - Community fears around the future of Rust when Mozilla had their layoffs
  [@6:52] - Chrome’s Javascript engine
  [@10:54] - How to make web design more secure with Rust
  [@19:50] - How Servo is using Rust
  [@24:49] - Servo’s responsibility as browser engine vs a JavaScript engine
  [@30:14] - CSS Grid support
  [@35:51] - Developer tools
  [@39:54] - Complexity in web optimization
  [@42:13] - Running multiple iframes within a page
  [@44:21] - How Rust helped Servo
  [@46:32] - Funding Servo
  [@50:19] - Where to get updates on Servo
  [@50:40] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/joshuadmatthews/">Josh Matthews</a>, former Engineering Manager at Mozilla for <a href="https://servo.org/">Servo</a>, a web browser engine written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Josh’s history with Servo</li>
  <li>[@3:54] - Community fears around the future of Rust when Mozilla had their layoffs</li>
  <li>[@6:52] - Chrome’s Javascript engine</li>
  <li>[@10:54] - How to make web design more secure with Rust</li>
  <li>[@19:50] - How Servo is using Rust</li>
  <li>[@24:49] - Servo’s responsibility as browser engine vs a JavaScript engine</li>
  <li>[@30:14] - CSS Grid support</li>
  <li>[@35:51] - Developer tools</li>
  <li>[@39:54] - Complexity in web optimization</li>
  <li>[@42:13] - Running multiple iframes within a page</li>
  <li>[@44:21] - How Rust helped Servo</li>
  <li>[@46:32] - Funding Servo</li>
  <li>[@50:19] - Where to get updates on Servo</li>
  <li>[@50:40] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-03-31-josh-matthews.mp3" length="49807778" type="audio/mpeg"/>
			<itunes:duration>51:53</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/tom-miles/</link>
			<pubDate>Fri, 24 Mar 2023 15:31:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/tom-miles/</guid>
			

			<title><![CDATA[ AI-NC with Tom Miles ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Tom Miles, CTO of AI-NC, a platform written in Rust to get manufactorability feedback for hardware designs.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Tom Miles, CTO of AI-NC, a platform written in Rust to get manufactorability feedback for hardware designs.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@0:46] - What is Spin
  [@1:23] - AI-NC’s company history
  [@2:46] - What made Tom start a machine shop company
  [@8:17] - AI-NC’s goal to provide automation, design, and advanced manufacturing
  [@17:04] - Communication between designers and assembly people
  [@19:22] - The margin for error in manufacturing
  [@30:40] - What made the team switch to Rust vs other languages
  [@35:06] - Libraries that AI-NC uses in their services
  [@42:35] - Integrations with third-party chat applications
  [@46:03] - Hiring Rust talent
  [@50:23] - Teaching people Rust
  [@53:27] - Advice for companies that want to use Rust
  [@54:42] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/thomasgregorymiles/">Tom Miles</a>, CTO of <a href="https://www.ai-nc.com/">AI-NC</a>, a platform written in Rust to get manufactorability feedback for hardware designs.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@0:46] - What is Spin</li>
  <li>[@1:23] - AI-NC’s company history</li>
  <li>[@2:46] - What made Tom start a machine shop company</li>
  <li>[@8:17] - AI-NC’s goal to provide automation, design, and advanced manufacturing</li>
  <li>[@17:04] - Communication between designers and assembly people</li>
  <li>[@19:22] - The margin for error in manufacturing</li>
  <li>[@30:40] - What made the team switch to Rust vs other languages</li>
  <li>[@35:06] - Libraries that AI-NC uses in their services</li>
  <li>[@42:35] - Integrations with third-party chat applications</li>
  <li>[@46:03] - Hiring Rust talent</li>
  <li>[@50:23] - Teaching people Rust</li>
  <li>[@53:27] - Advice for companies that want to use Rust</li>
  <li>[@54:42] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-03-24-tom-miles.mp3" length="53292722" type="audio/mpeg"/>
			<itunes:duration>55:31</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/alexander-lopatin/</link>
			<pubDate>Fri, 17 Mar 2023 15:37:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/alexander-lopatin/</guid>
			

			<title><![CDATA[ Cargo Limit with Alexander Lopatin ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Alexander Lopatin, creator of Cargo Limit, a cargo plugin that will show errors in your Rust code before any warnings.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Alexander Lopatin, creator of Cargo Limit, a cargo plugin that will show errors in your Rust code before any warnings.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Alexander’s programming background
  [@3:17] - What made Alexander interested in the Rust
  [@4:43] - What is Cargo Limit?
  [@9:19] - Cargo Limit’s features
  [@11:20] - Improvements that Alexander wants to make in Cargo Limit
  [@12:52] - Cargo extensions and installation
  [@13:31] - Alexander’s process for creating Cargo extensions and plugins
  [@16:00] - Using Neovim and integrating with Rust Analyzer
  [@18:57] - Upcoming upgrades and features of Cargo Limit
  [@24:46] - How to get in touch with Alexander and learn more
  [@25:28] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://codonaft.com/">Alexander Lopatin</a>, creator of <a href="https://crates.io/crates/cargo-limit">Cargo Limit</a>, a cargo plugin that will show errors in your Rust code before any warnings.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Alexander’s programming background</li>
  <li>[@3:17] - What made Alexander interested in the Rust</li>
  <li>[@4:43] - What is Cargo Limit?</li>
  <li>[@9:19] - Cargo Limit’s features</li>
  <li>[@11:20] - Improvements that Alexander wants to make in Cargo Limit</li>
  <li>[@12:52] - Cargo extensions and installation</li>
  <li>[@13:31] - Alexander’s process for creating Cargo extensions and plugins</li>
  <li>[@16:00] - Using Neovim and integrating with Rust Analyzer</li>
  <li>[@18:57] - Upcoming upgrades and features of Cargo Limit</li>
  <li>[@24:46] - How to get in touch with Alexander and learn more</li>
  <li>[@25:28] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-03-17-alexander-lopatin.mp3" length="25181486" type="audio/mpeg"/>
			<itunes:duration>26:13</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/antonio-scandurra/</link>
			<pubDate>Fri, 10 Mar 2023 17:03:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/antonio-scandurra/</guid>
			

			<title><![CDATA[ Zed with Antonio Scandurra ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Antonio Scandurra, co-creator of Zed, a high performance code editor written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Antonio Scandurra, co-creator of Zed, a high performance code editor written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@2:56] - The story behind Zed
  [@6:24] - Zed’s performance and features powered by Rust
  [@12:01] - How Zed balances speed vs features
  [@16:00] - What is the most important thing an editor has to have?
  [@18:01] - Zed customization and the ability to add plugins
  [@23:13] - Zed’s built-in contacts panel for team collaboration
  [@26:54] - Third-party services that Zed uses
  [@31:28] - Zed’s tab support
  [@32:39] - Zed’s theme customization and system
  [@34:31] - Top crates that power Zed
  [@36:05] - Zed’s plans to support other platforms
  [@37:56] - Porting Rust vs porting other languages
  [@42:09] - Zed’s pricing plans
  [@43:15] - Zed’s possible plan for open-sourcing parts of the editor
  [@44:10] - Check out more information about Zed and sign up to join the waitlist
  [@44:29] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/as__cii">Antonio Scandurra</a>, co-creator of <a href="https://zed.dev">Zed</a>, a high performance code editor written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@2:56] - The story behind Zed</li>
  <li>[@6:24] - Zed’s performance and features powered by Rust</li>
  <li>[@12:01] - How Zed balances speed vs features</li>
  <li>[@16:00] - What is the most important thing an editor has to have?</li>
  <li>[@18:01] - Zed customization and the ability to add plugins</li>
  <li>[@23:13] - Zed’s built-in contacts panel for team collaboration</li>
  <li>[@26:54] - Third-party services that Zed uses</li>
  <li>[@31:28] - Zed’s tab support</li>
  <li>[@32:39] - Zed’s theme customization and system</li>
  <li>[@34:31] - Top crates that power Zed</li>
  <li>[@36:05] - Zed’s plans to support other platforms</li>
  <li>[@37:56] - Porting Rust vs porting other languages</li>
  <li>[@42:09] - Zed’s pricing plans</li>
  <li>[@43:15] - Zed’s possible plan for open-sourcing parts of the editor</li>
  <li>[@44:10] - Check out more information about Zed and sign up to join the waitlist</li>
  <li>[@44:29] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-03-10-antonio-scandurra.mp3" length="43663543" type="audio/mpeg"/>
			<itunes:duration>45:29</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/joshuan-nelson/</link>
			<pubDate>Fri, 03 Mar 2023 16:37:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/joshuan-nelson/</guid>
			

			<title><![CDATA[ Rustdoc with Joshua Nelson ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Joshua Nelson, team lead for the Bootstrap team for Rust, and formally on the Rustdoc team for Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Joshua Nelson, team lead for the Bootstrap team for Rust, and formally on the Rustdoc team for Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@1:07] - Different groups and teams in the Rust community
  [@8:31]  - Memory safety and security issues
  [@10:26] - Rust documentation
  [@12:13] - Joshua’s contribution to Rust’s documentation
  [@14:57] - How did Joshua get involved with Rust
  [@18:17] - Documentation and prioritizing features
  [@23:19] - Rust team and governance issues
  [@34:17] - Maintaining the code
  [@37:45] - Joshua’s new team and career
  [@42:20] - Cargo and the bootstrap tool
  [@46:08] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://jyn.dev/">Joshua Nelson</a>, team lead for the <a href="https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html">Bootstrap</a> team for Rust, and formally on the Rustdoc team for Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@1:07] - Different groups and teams in the Rust community</li>
  <li>[@8:31]  - Memory safety and security issues</li>
  <li>[@10:26] - Rust documentation</li>
  <li>[@12:13] - Joshua’s contribution to Rust’s documentation</li>
  <li>[@14:57] - How did Joshua get involved with Rust</li>
  <li>[@18:17] - Documentation and prioritizing features</li>
  <li>[@23:19] - Rust team and governance issues</li>
  <li>[@34:17] - Maintaining the code</li>
  <li>[@37:45] - Joshua’s new team and career</li>
  <li>[@42:20] - Cargo and the bootstrap tool</li>
  <li>[@46:08] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-03-03-joshua-nelson.mp3" length="46918426" type="audio/mpeg"/>
			<itunes:duration>48:52</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/serge-barral/</link>
			<pubDate>Fri, 24 Feb 2023 09:19:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/serge-barral/</guid>
			

			<title><![CDATA[ Asynchronix with Serge Barral ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Serge Barral about Asynchronix, a event simulation framework written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Serge Barral about Asynchronix, a event simulation framework written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - What is Asynchronix?
  [@2:21] - Writing Rust documentation
  [@4:28] - Serge’s career &amp; background
  [@8:51] - How does the Asynchronix simulator work?
  [@11:40] - The importance of writing the library in Rust
  [@16:51] - Time-based simulation and practical use cases
  [@26:59] - Building the custom executor
  [@30:48] - How long did it take to build Asynchronix?
  [@34:10] - Asynchronix’s vision to improve modern systems development
  [@40:15] - Getting in touch to learn more about Asynchronix
  [@41:43] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/serge-barral-9a2805218/">Serge Barral</a> about <a href="https://github.com/asynchronics/asynchronix">Asynchronix</a>, a event simulation framework written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - What is <a href="https://github.com/asynchronics/asynchronix">Asynchronix</a>?</li>
  <li>[@2:21] - Writing Rust documentation</li>
  <li>[@4:28] - Serge’s career &amp; background</li>
  <li>[@8:51] - How does the Asynchronix simulator work?</li>
  <li>[@11:40] - The importance of writing the library in Rust</li>
  <li>[@16:51] - Time-based simulation and practical use cases</li>
  <li>[@26:59] - Building the custom executor</li>
  <li>[@30:48] - How long did it take to build Asynchronix?</li>
  <li>[@34:10] - Asynchronix’s vision to improve modern systems development</li>
  <li>[@40:15] - Getting in touch to learn more about Asynchronix</li>
  <li>[@41:43] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-02-24-serge-barral.mp3" length="40736810" type="audio/mpeg"/>
			<itunes:duration>42:26</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/lodestone/</link>
			<pubDate>Tue, 21 Feb 2023 08:44:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/lodestone/</guid>
			

			<title><![CDATA[ Lodestone with Wilbur Zhang, Peter Jiang, and Kevin Huang ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with the Lodestone team, who is working a tool to create private Minecraft servers in a safe and convenient way using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with the Lodestone team, who is working a tool to create private Minecraft servers in a safe and convenient way using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@2:51] - How did the Lodestone team discover Rust?
  [@8:26] - Motivation for writing the Lodestone project
  [@9:28] - Why choose Rust
  [@12:23] - Go vs Rust
  [@13:53] - Experience using Tauri
  [@16:05] - Lodestone’s front-end work
  [@19:18] - Setting up and using Lodestone
  [@21:46] - Issues and challenges the team is currently working on
  [@25:27] - The advantage of using Rust
  [@27:21] - Crates used in the project
  [@29:51] - How Actors work
  [@34:56] - Lodestone’s scripting system
  [@39:29] - Lodestone’s security and permission system
  [@45:37] - How to reach out to the Lodestone team
  [@46:19] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with the <a href="https://www.lodestone.cc/">Lodestone</a> team, who is working a tool to create private Minecraft servers in a safe and convenient way using Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@2:51] - How did the Lodestone team discover Rust?</li>
  <li>[@8:26] - Motivation for writing the Lodestone project</li>
  <li>[@9:28] - Why choose Rust</li>
  <li>[@12:23] - Go vs Rust</li>
  <li>[@13:53] - Experience using <a href="https://tauri.app/">Tauri</a></li>
  <li>[@16:05] - Lodestone’s front-end work</li>
  <li>[@19:18] - Setting up and using Lodestone</li>
  <li>[@21:46] - Issues and challenges the team is currently working on</li>
  <li>[@25:27] - The advantage of using Rust</li>
  <li>[@27:21] - Crates used in the project</li>
  <li>[@29:51] - How Actors work</li>
  <li>[@34:56] - Lodestone’s scripting system</li>
  <li>[@39:29] - Lodestone’s security and permission system</li>
  <li>[@45:37] - How to reach out to the Lodestone team</li>
  <li>[@46:19] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-02-21-lodestone.mp3" length="45571762" type="audio/mpeg"/>
			<itunes:duration>47:28</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.65-1.66-1.67/</link>
			<pubDate>Mon, 13 Feb 2023 15:55:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.65-1.66-1.67/</guid>
			

			<title><![CDATA[ What's New in Rust 1.65, 1.66, and 1.67 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.65, 1.66, and 1.67 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.65, 1.66, and 1.67 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:11] - Rust 1.65


  [@01:28] - Generic Associated Types
    
      More detailed blog post
    
  
  [@06:48] - let-else statements
    
      if_chain crate
    
  
  [@16:56] - break from labeled blocks
  [@19:21] - Splitting Linux debuginfo
  [@20:44] - Stabilized APIs
    
      std::backtrace::Backtrace
    
  
  [@22:41] - RLS deprecation
  [@23:19] - Changelog deep-dive
    
      [@23:30] - Cargo queue reordering
        
          Benchmarking results
        
      
      [@24:54] - Niches in data-filled enums
      [@27:23] - poll_fn and Unpin
      [@28:05] - Too many personalities
      [@29:20] - uninit integers are UB
        
          Working Group discussion
        
      
      [@33:23] - Uplift let_underscore lint
      [@35:13] - #[non_exhaustive] on enum variants
    
  


[@36:27] - Rust 1.66.0


  [@36:40] - Explicit discriminants on enums with fields
    
      Dark and forbidden secrets
      RFC
    
  
  [@40:05] - core::hint::black_box
    
      Tracking issue discussion
    
  
  [@46:34] - cargo remove
  [@46:52] - Stabilized APIs
    
      Mixed integer operations
      BTreeMap/Set first/last operations
      std::os::fd
    
  
  [@50:51] - Changelog deep-dive
    
      [@51:10] - Cargo publish changes
      [@53:33] - Don’t link to libresolv or libiconv on Darwin
      [@54:41] - sym in asm
      [@55:18] - Soundness fix for impl Trait
      [@57:27] - Allow transmutes across lifetimes
      [@57:45] - Unicode 15
      [@58:24] - for loops over Option and Result
    
  


[@1:00:38] - Rust 1.66.1

Security advisory.

Affects primarily users with insteadOf in their git config. Prefer
pushInsteadOf
instead.

You may also be interested in:


  Rustup 1.25.2


[@1:02:41] - Rust 1.67


  [@1:02:45] - #[must_use] on async fn
  [@1:04:07] - sync::mpsc updated
    
      Long-standing mpsc panic
      The PR
      crossbeam crate
        
          CachePadded
          AtomicCell
        
      
    
  
  [@1:07:52] - Stabilized APIs
    
      NonZero*::BITS
    
  
  [@1:08:38] - Changelog deep-dive
    
      [@1:08:45] - Ratio-aware decompression limit
        
          Original CVE
          Original fix
        
      
      [@1:10:40] - Ordering of array fields
      [@1:13:08] - Compilation targets
        
          Sony PlayStation 1 target
          Remove linuxkernel targets
          Target configuration
          x86_64-unknown-none
        
      
      [@1:14:45] - Dataflow-based MIR constant propagation
      [@1:15:37] - The drop order twist
        
          The effect on let-chains
          let-chains tracking issue
        
      
      [@1:20:48] - Inconsistent rounding of 0.5
      [@1:23:24] - Android NDK update in 1.68
      [@1:23:54] - Help test cargo’s HTTP protocol
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.65, 1.66, and 1.67 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0111---rust-165">[@01:11] - <a href="https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html">Rust 1.65</a></h4>

<ul>
  <li>[@01:28] - <a href="https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#generic-associated-types-gats">Generic Associated Types</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2022/10/28/gats-stabilization.html">More detailed blog post</a></li>
    </ul>
  </li>
  <li>[@06:48] - <a href="https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#let-else-statements"><code>let</code>-<code>else</code> statements</a>
    <ul>
      <li><a href="https://docs.rs/if_chain/latest/if_chain/"><code>if_chain</code> crate</a></li>
    </ul>
  </li>
  <li>[@16:56] - <a href="https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#break-from-labeled-blocks"><code>break</code> from labeled blocks</a></li>
  <li>[@19:21] - <a href="https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#splitting-linux-debuginfo">Splitting Linux debuginfo</a></li>
  <li>[@20:44] - <a href="https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/backtrace/struct.Backtrace.html"><code>std::backtrace::Backtrace</code></a></li>
    </ul>
  </li>
  <li>[@22:41] - <a href="https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html">RLS deprecation</a></li>
  <li>[@23:19] - Changelog deep-dive
    <ul>
      <li>[@23:30] - <a href="https://github.com/rust-lang/cargo/pull/11032">Cargo queue reordering</a>
        <ul>
          <li><a href="https://github.com/lqd/rustc-benchmarking-data/tree/main/experiments/cargo-schedules/pending-queue-sorted">Benchmarking results</a></li>
        </ul>
      </li>
      <li>[@24:54] - <a href="https://github.com/rust-lang/rust/issues/46213">Niches in data-filled enums</a></li>
      <li>[@27:23] - <a href="https://github.com/rust-lang/rust/pull/102737">poll_fn and Unpin</a></li>
      <li>[@28:05] - <a href="https://github.com/rust-lang/rust/issues/102754">Too many personalities</a></li>
      <li>[@29:20] - <a href="https://github.com/rust-lang/rust/pull/98919/">uninit integers are UB</a>
        <ul>
          <li><a href="https://github.com/rust-lang/unsafe-code-guidelines/issues/71">Working Group discussion</a></li>
        </ul>
      </li>
      <li>[@33:23] - <a href="https://github.com/rust-lang/rust/pull/97739/">Uplift <code>let_underscore</code> lint</a></li>
      <li>[@35:13] - <code>#[non_exhaustive]</code> on enum variants</li>
    </ul>
  </li>
</ul>

<h4 id="3627---rust-1660">[@36:27] - <a href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html">Rust 1.66.0</a></h4>

<ul>
  <li>[@36:40] - <a href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#explicit-discriminants-on-enums-with-fields">Explicit discriminants on enums with fields</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/81686">Dark and forbidden secrets</a></li>
      <li><a href="https://github.com/rust-lang/rfcs/blob/master/text/2363-arbitrary-enum-discriminant.md">RFC</a></li>
    </ul>
  </li>
  <li>[@40:05] - <a href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#corehintblack_box"><code>core::hint::black_box</code></a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/64102">Tracking issue discussion</a></li>
    </ul>
  </li>
  <li>[@46:34] - <a href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#cargo-remove"><code>cargo remove</code></a></li>
  <li>[@46:52] - <a href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/87840">Mixed integer operations</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/62924">BTreeMap/Set first/last operations</a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/os/fd/index.html"><code>std::os::fd</code></a></li>
    </ul>
  </li>
  <li>[@50:51] - Changelog deep-dive
    <ul>
      <li>[@51:10] - <a href="https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-166-2022-12-15">Cargo publish changes</a></li>
      <li>[@53:33] - Don’t link to <a href="https://github.com/rust-lang/rust/pull/102766/"><code>libresolv</code></a> or <a href="https://github.com/rust-lang/rust/pull/103277/"><code>libiconv</code></a> on Darwin</li>
      <li>[@54:41] - <a href="https://github.com/rust-lang/rust/pull/103168/"><code>sym</code> in <code>asm</code></a></li>
      <li>[@55:18] - <a href="https://github.com/rust-lang/rust/issues/84305">Soundness fix for <code>impl Trait</code></a></li>
      <li>[@57:27] - <a href="https://github.com/rust-lang/rust/pull/101520/">Allow transmutes across lifetimes</a></li>
      <li>[@57:45] - <a href="https://blog.unicode.org/2022/09/announcing-unicode-standard-version-150.html">Unicode 15</a></li>
      <li>[@58:24] - <a href="https://github.com/rust-lang/rust/pull/99696/"><code>for</code> loops over <code>Option</code> and <code>Result</code></a></li>
    </ul>
  </li>
</ul>

<h4 id="10038---rust-1661">[@1:00:38] - <a href="https://blog.rust-lang.org/2023/01/10/Rust-1.66.1.html">Rust 1.66.1</a></h4>

<p><a href="https://blog.rust-lang.org/2023/01/10/cve-2022-46176.html">Security advisory</a>.</p>

<p>Affects primarily users with <code>insteadOf</code> in their git config. Prefer
<a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtpushInsteadOf"><code>pushInsteadOf</code></a>
instead.</p>

<p>You may also be interested in:</p>

<ul>
  <li><a href="https://blog.rust-lang.org/2023/02/01/Rustup-1.25.2.html">Rustup 1.25.2</a></li>
</ul>

<h4 id="10241---rust-167">[@1:02:41] - <a href="https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html">Rust 1.67</a></h4>

<ul>
  <li>[@1:02:45] - <a href="https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html#must_use-effective-on-async-fn"><code>#[must_use]</code> on <code>async fn</code></a></li>
  <li>[@1:04:07] - <a href="https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html#stdsyncmpsc-implementation-updated"><code>sync::mpsc</code> updated</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/39364">Long-standing mpsc panic</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/935630">The PR</a></li>
      <li><a href="https://docs.rs/crossbeam/latest/crossbeam/"><code>crossbeam</code> crate</a>
        <ul>
          <li><a href="https://docs.rs/crossbeam/0.8.2/crossbeam/utils/struct.CachePadded.html"><code>CachePadded</code></a></li>
          <li><a href="https://docs.rs/crossbeam/0.8.2/crossbeam/atomic/struct.AtomicCell.html"><code>AtomicCell</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[@1:07:52] - <a href="https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#associatedconstant.BITS"><code>NonZero*::BITS</code></a></li>
    </ul>
  </li>
  <li>[@1:08:38] - Changelog deep-dive
    <ul>
      <li>[@1:08:45] - <a href="https://github.com/rust-lang/cargo/pull/11337">Ratio-aware decompression limit</a>
        <ul>
          <li><a href="https://blog.rust-lang.org/2022/09/14/cargo-cves.html#disk-space-exhaustion-cve-2022-36114">Original CVE</a></li>
          <li><a href="https://github.com/rust-lang/cargo/pull/11089">Original fix</a></li>
        </ul>
      </li>
      <li>[@1:10:40] - <a href="https://github.com/rust-lang/rust/pull/102750/">Ordering of array fields</a></li>
      <li>[@1:13:08] - Compilation targets
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/102689/">Sony PlayStation 1 target</a></li>
          <li><a href="https://github.com/rust-lang/rust/pull/104015/">Remove linuxkernel targets</a></li>
          <li><a href="https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.Target.html">Target configuration</a></li>
          <li><a href="https://doc.rust-lang.org/rustc/platform-support/x86_64-unknown-none.html"><code>x86_64-unknown-none</code></a></li>
        </ul>
      </li>
      <li>[@1:14:45] - <a href="https://github.com/rust-lang/rust/pull/101168/">Dataflow-based MIR constant propagation</a></li>
      <li>[@1:15:37] - <a href="https://github.com/rust-lang/rust/pull/103293/">The drop order twist</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/issues/100513#issuecomment-1279908873">The effect on <code>let</code>-chains</a></li>
          <li><a href="https://github.com/rust-lang/rust/issues/53667"><code>let</code>-chains tracking issue</a></li>
        </ul>
      </li>
      <li>[@1:20:48] - <a href="https://github.com/rust-lang/rust/pull/102935/">Inconsistent rounding of 0.5</a></li>
      <li>[@1:23:24] - <a href="https://blog.rust-lang.org/2023/01/09/android-ndk-update-r25.html">Android NDK update in 1.68</a></li>
      <li>[@1:23:54] - <a href="https://blog.rust-lang.org/inside-rust/2023/01/30/cargo-sparse-protocol.html">Help test cargo’s HTTP protocol</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-02-13-rust-1.65-1.66-1.67.mp3" length="102611069" type="audio/mpeg"/>
			<itunes:duration>01:25:30</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/aurimas-blazulionis/</link>
			<pubDate>Fri, 10 Feb 2023 23:59:59 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/aurimas-blazulionis/</guid>
			

			<title><![CDATA[ Rust ABI with Aurimas Blažulionis ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Aurimas Blažulionis, author of We Need Type Information, Not Stable ABI blog post, which details possible alternatives to a stable Rust ABI.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Aurimas Blažulionis, author of We Need Type Information, Not Stable ABI blog post, which details possible alternatives to a stable Rust ABI.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Who is Auri?
  [@3:07] - Auri’s background: video game development, hacking, and reverse engineering
  [@8:14] - Common advice for optimizing your code
  [@10:24] - Auri’s article on how to link multiple libraries together
  [@14:07] - What is an ABI (Application Binary Interface)?
  [@17:05] - ABI between C and C++
  [@19:02] - ABI for Rust
  [@21:14] - Fat pointers and zero-size types
  [@23:50] - Writing FFI
  [@31:15] - C FFI in relation to a Rust ABI
  [@32:12] - System support for Rust
  [@39:30] - Auri’s blog and articles
  [@40:53] - Where to reach out to Auri


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://blaz.is/">Aurimas Blažulionis</a>, author of <a href="https://blaz.is/blog/post/we-dont-need-a-stable-abi/">We Need Type Information, Not Stable ABI</a> blog post, which details possible alternatives to a stable Rust ABI.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Who is Auri?</li>
  <li>[@3:07] - Auri’s background: video game development, hacking, and reverse engineering</li>
  <li>[@8:14] - Common advice for optimizing your code</li>
  <li>[@10:24] - Auri’s article on how to link multiple libraries together</li>
  <li>[@14:07] - What is an ABI (Application Binary Interface)?</li>
  <li>[@17:05] - ABI between C and C++</li>
  <li>[@19:02] - ABI for Rust</li>
  <li>[@21:14] - Fat pointers and zero-size types</li>
  <li>[@23:50] - Writing FFI</li>
  <li>[@31:15] - C FFI in relation to a Rust ABI</li>
  <li>[@32:12] - System support for Rust</li>
  <li>[@39:30] - Auri’s blog and articles</li>
  <li>[@40:53] - Where to reach out to Auri</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-02-10-aurimas-blazulionis.mp3" length="40508186" type="audio/mpeg"/>
			<itunes:duration>42:12</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/adam-chalmers/</link>
			<pubDate>Sat, 04 Feb 2023 16:46:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/adam-chalmers/</guid>
			

			<title><![CDATA[ Cloudflare with Adam Chalmers ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Adam Chalmers, software engineer at Cloudflare, which is a global network of servers located around the world, that uses Rust to help power and secure the internet.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Adam Chalmers, software engineer at Cloudflare, which is a global network of servers located around the world, that uses Rust to help power and secure the internet.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction to Cloudflare
  [@3:57] - Cloudflare’s edge computing
  [@7:56] - Running Rust binary on Cloudflare
  [@10:36] - Adams’ background and work history
  [@15:12] - How does Cloudflare provide web security?
  [@32:30] - Cloudflare’s transition and rewriting from C to Rust
  [@37:12] - Cloudflare’s data plane and control plane
  [@43:00] - Hacking and security issues on Apple and other devices
  [@50:56] - How does Cloudflare handle onboarding people to Rust
  [@1:00:09] - The importance of Rust’s performance and reliability for Cloudflare
  [@1:05:07] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://adamchalmers.com/">Adam Chalmers</a>, software engineer at <a href="https://www.cloudflare.com/">Cloudflare</a>, which is a global network of servers located around the world, that uses Rust to help power and secure the internet.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction to Cloudflare</li>
  <li>[@3:57] - Cloudflare’s edge computing</li>
  <li>[@7:56] - Running Rust binary on Cloudflare</li>
  <li>[@10:36] - Adams’ background and work history</li>
  <li>[@15:12] - How does Cloudflare provide web security?</li>
  <li>[@32:30] - Cloudflare’s transition and rewriting from C to Rust</li>
  <li>[@37:12] - Cloudflare’s data plane and control plane</li>
  <li>[@43:00] - Hacking and security issues on Apple and other devices</li>
  <li>[@50:56] - How does Cloudflare handle onboarding people to Rust</li>
  <li>[@1:00:09] - The importance of Rust’s performance and reliability for Cloudflare</li>
  <li>[@1:05:07] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-02-04-adam-chalmers.mp3" length="63763435" type="audio/mpeg"/>
			<itunes:duration>01:06:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/maxwell-flitton/</link>
			<pubDate>Fri, 27 Jan 2023 16:54:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/maxwell-flitton/</guid>
			

			<title><![CDATA[ Rust Web Programming with Maxwell Flitton ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Maxwell Flitton, author of Rust Web Programming which details how to build web services using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Maxwell Flitton, author of Rust Web Programming which details how to build web services using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@3:21] - What led Maxwell to write and publish books about Rust
  [@6:02] - Type-checking and Python crashes
  [@8:50] - Rust technology and its sustainability
  [@12:32] - Python vs Rust
  [@13:23] - Maxwell’s background and history
  [@16:11] - Details about Maxwell’s book Rust Web Programming
  [@19:19] - Using the actor model
  [@24:02] - Maxwell’s thoughts and motivation for publishing more books
  [@32:44] - Rust community
  [@35:19] - Rust innovations happening in London
  [@36:22] - Where to purchase the Rust Web Programming book
  [@40:14] - What to expect for the upcoming book editions
  [@43:48] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://maxwellflitton.com/">Maxwell Flitton</a>, author of <a href="https://www.amazon.com/Rust-Web-Programming-hands-applications-dp-1803234695/dp/1803234695/">Rust Web Programming</a> which details how to build web services using Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@3:21] - What led Maxwell to write and publish books about Rust</li>
  <li>[@6:02] - Type-checking and Python crashes</li>
  <li>[@8:50] - Rust technology and its sustainability</li>
  <li>[@12:32] - Python vs Rust</li>
  <li>[@13:23] - Maxwell’s background and history</li>
  <li>[@16:11] - Details about Maxwell’s book Rust Web Programming</li>
  <li>[@19:19] - Using the actor model</li>
  <li>[@24:02] - Maxwell’s thoughts and motivation for publishing more books</li>
  <li>[@32:44] - Rust community</li>
  <li>[@35:19] - Rust innovations happening in London</li>
  <li>[@36:22] - Where to purchase the Rust Web Programming book</li>
  <li>[@40:14] - What to expect for the upcoming book editions</li>
  <li>[@43:48] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-01-27-maxwell-flitton.mp3" length="44157806" type="audio/mpeg"/>
			<itunes:duration>46:00</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/shuang-zhu/</link>
			<pubDate>Fri, 20 Jan 2023 16:56:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/shuang-zhu/</guid>
			

			<title><![CDATA[ Rust Magazine with Shuang Zhu ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Shuang Zhu, creator of Rust Magazine, a Rust-focused online magazine that provides articles from experts and enthusiasts in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Shuang Zhu, creator of Rust Magazine, a Rust-focused online magazine that provides articles from experts and enthusiasts in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@3:28] - Rust community in China
  [@4:03] - Shuang Zhu’s experience using Go
  [@7:30] - Go vs Rust
  [@11:21] - Rust Magazine
  [@11:42] - What separates Rust Magazine from other Rust publications
  [@18:01] - How to contribute and submit articles to Rust Magazine
  [@21:41] - How to apply as an editor for Rust Magazine
  [@22:08] - Publishing frequency for Rust Magazine
  [@24:04] - How to stay up to date with the Rust Magazine
  [@25:26] - What made Shuang Zhu decide to create Rust Magazine
  [@27:25] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://folyd.com/">Shuang Zhu</a>, creator of <a href="https://rustmagazine.org/">Rust Magazine</a>, a Rust-focused online magazine that provides articles from experts and enthusiasts in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@3:28] - Rust community in China</li>
  <li>[@4:03] - Shuang Zhu’s experience using Go</li>
  <li>[@7:30] - Go vs Rust</li>
  <li>[@11:21] - Rust Magazine</li>
  <li>[@11:42] - What separates Rust Magazine from other Rust publications</li>
  <li>[@18:01] - How to contribute and submit articles to Rust Magazine</li>
  <li>[@21:41] - How to apply as an editor for Rust Magazine</li>
  <li>[@22:08] - Publishing frequency for Rust Magazine</li>
  <li>[@24:04] - How to stay up to date with the Rust Magazine</li>
  <li>[@25:26] - What made Shuang Zhu decide to create Rust Magazine</li>
  <li>[@27:25] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-01-20-shuang-zhu.mp3" length="27719471" type="audio/mpeg"/>
			<itunes:duration>28:52</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/ernest-kissiedu/</link>
			<pubDate>Fri, 13 Jan 2023 16:35:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/ernest-kissiedu/</guid>
			

			<title><![CDATA[ Rust Nation with Ernest Kissiedu ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Ernest Kissiedu, organizer of Rust Nation, a Rust-focused conference geared towards Rust beginners and the Rust-curious.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Ernest Kissiedu, organizer of Rust Nation, a Rust-focused conference geared towards Rust beginners and the Rust-curious.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@3:21] - Rust Nation’s purpose and goal
  [@5:14] - Ernest’s background and being the community lead of Rust London Community
  [@13:29] - Rust communities all around the world
  [@16:14] - Possible guests and speakers at the Rust conference.
  [@22:39] - Why you should attend the Rust conference regardless of how experienced you are with Rust
  [@26:44] - Choosing and narrowing down the list of speakers for the conference
  [@31:55] - How the Rust conference will be different from other conferences
  [@35:29] - How to join the Rust London Community Meetup group
  [@42:20] - Get 15% off on Rust conference ticket price use promo code RUSTACEAN-STATION
  [@50:31] - How to reach out to Ernest
  [@51:27] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/ernestkissiedu">Ernest Kissiedu</a>, organizer of <a href="https://www.rustnationuk.com/">Rust Nation</a>, a Rust-focused conference geared towards Rust beginners and the Rust-curious.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@3:21] - Rust Nation’s purpose and goal</li>
  <li>[@5:14] - Ernest’s background and being the community lead of Rust London Community</li>
  <li>[@13:29] - Rust communities all around the world</li>
  <li>[@16:14] - Possible guests and speakers at the Rust conference.</li>
  <li>[@22:39] - Why you should attend the Rust conference regardless of how experienced you are with Rust</li>
  <li>[@26:44] - Choosing and narrowing down the list of speakers for the conference</li>
  <li>[@31:55] - How the Rust conference will be different from other conferences</li>
  <li>[@35:29] - How to join the Rust London Community Meetup group</li>
  <li>[@42:20] - Get 15% off on Rust conference ticket price use promo code RUSTACEAN-STATION</li>
  <li>[@50:31] - How to reach out to Ernest</li>
  <li>[@51:27] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-01-13-ernest-kissiedu.mp3" length="49964929" type="audio/mpeg"/>
			<itunes:duration>52:02</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/matt-butcher/</link>
			<pubDate>Sun, 08 Jan 2023 17:54:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/matt-butcher/</guid>
			

			<title><![CDATA[ Fermyon with Matt Butcher ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Matt Butcher, CEO of Fermyon, who is working on Fermyon Cloud, a platform to deploy and host WebAssembly applications, with a prime focus on hosting Spin applications written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Matt Butcher, CEO of Fermyon, who is working on Fermyon Cloud, a platform to deploy and host WebAssembly applications, with a prime focus on hosting Spin applications written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@2:13] - A deeper dive into the Cloud and its impact
  [@9:39] - Matt’s work experience on HP and HP Cloud.
  [@13:40] - Kubernetes
  [@20:07] - WebAssembly
  [@30:27] - Krustlet
  [@36:21] - Edge Computing
  [@41:05] - Fermyon Cloud
  [@50:48] - Where to learn more about Fermyon Cloud
  [@52:58] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/technosophos">Matt Butcher</a>, CEO of <a href="https://www.fermyon.com/">Fermyon</a>, who is working on <a href="https://www.fermyon.com/cloud">Fermyon Cloud</a>, a platform to deploy and host WebAssembly applications, with a prime focus on hosting <a href="https://developer.fermyon.com/spin/developing">Spin applications</a> written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@2:13] - A deeper dive into the Cloud and its impact</li>
  <li>[@9:39] - Matt’s work experience on HP and HP Cloud.</li>
  <li>[@13:40] - Kubernetes</li>
  <li>[@20:07] - WebAssembly</li>
  <li>[@30:27] - <a href="https://krustlet.dev/">Krustlet</a></li>
  <li>[@36:21] - Edge Computing</li>
  <li>[@41:05] - Fermyon Cloud</li>
  <li>[@50:48] - Where to learn more about Fermyon Cloud</li>
  <li>[@52:58] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2023-01-08-matt-butcher.mp3" length="52142916" type="audio/mpeg"/>
			<itunes:duration>54:19</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/stephen-crane/</link>
			<pubDate>Fri, 16 Dec 2022 16:51:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/stephen-crane/</guid>
			

			<title><![CDATA[ C2Rust with Stephen Crane ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Stephen Crane, CTO of Immunant, who is working on C2Rust, a library that transpiles C99-compliant C code into unsafe Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Stephen Crane, CTO of Immunant, who is working on C2Rust, a library that transpiles C99-compliant C code into unsafe Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - C2Rust Introduction
  [@01:50] - How C2Rust works and its goal as a transpiler
  [@05:49] - Transpilers vs compilers
  [@12:30] - Unstructured control flow vs structured control flow
  [@16:32] - The process of transforming C to Rust projects
  [@19:15] - Parsing C code correctly
  [@22:13] - The importance of compiler flags on interpreting C Code
  [@28:45] - C++ vs C
  [@38:50] - When you should you look at using C2Rust
  [@45:04] - The best way to run your tests in Rust
  [@48:15] - Projects that are currently using C2Rust
  [@50:29] - Improving the usability and safety of the output of rust code
  [@53:55] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://immunant.com/authors/stephen-crane/">Stephen Crane</a>, CTO of <a href="https://immunant.com/">Immunant</a>, who is working on <a href="https://github.com/immunant/c2rust">C2Rust</a>, a library that transpiles C99-compliant C code into unsafe Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - C2Rust Introduction</li>
  <li>[@01:50] - How C2Rust works and its goal as a transpiler</li>
  <li>[@05:49] - Transpilers vs compilers</li>
  <li>[@12:30] - Unstructured control flow vs structured control flow</li>
  <li>[@16:32] - The process of transforming C to Rust projects</li>
  <li>[@19:15] - Parsing C code correctly</li>
  <li>[@22:13] - The importance of compiler flags on interpreting C Code</li>
  <li>[@28:45] - C++ vs C</li>
  <li>[@38:50] - When you should you look at using C2Rust</li>
  <li>[@45:04] - The best way to run your tests in Rust</li>
  <li>[@48:15] - Projects that are currently using C2Rust</li>
  <li>[@50:29] - Improving the usability and safety of the output of rust code</li>
  <li>[@53:55] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-12-16-stephen-crane.mp3" length="53300245" type="audio/mpeg"/>
			<itunes:duration>55:31</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/seaton-ullberg/</link>
			<pubDate>Fri, 09 Dec 2022 16:43:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/seaton-ullberg/</guid>
			

			<title><![CDATA[ Kernel Density Estimation with Seaton Ullberg ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Seaton Ullberg, developer of kernel-density-estimation, a Rust library that computes kernel density estimations.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Seaton Ullberg, developer of kernel-density-estimation, a Rust library that computes kernel density estimations.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:00] - Introduction
  [@0:55] - Crate overview and how it works
  [@17:49] - Kernel Density Estimation vs other competing algorithms
  [@24:05] - Application uses of Kernel Density Estimation
  [@33:38] - Why write this library
  [@35:03] - Why use Rust when re-writing this library
  [@40:26] - Seaton using f64 as a feature
  [@42:20] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/seatonullberg">Seaton Ullberg</a>, developer of <a href="https://github.com/seatonullberg/kernel-density-estimation">kernel-density-estimation</a>, a Rust library that computes <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation">kernel density estimations</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:00] - Introduction</li>
  <li>[@0:55] - Crate overview and how it works</li>
  <li>[@17:49] - Kernel Density Estimation vs other competing algorithms</li>
  <li>[@24:05] - Application uses of Kernel Density Estimation</li>
  <li>[@33:38] - Why write this library</li>
  <li>[@35:03] - Why use Rust when re-writing this library</li>
  <li>[@40:26] - Seaton using f64 as a feature</li>
  <li>[@42:20] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-12-09-seaton-ullberg.mp3" length="41503347" type="audio/mpeg"/>
			<itunes:duration>43:14</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/gray-olson/</link>
			<pubDate>Fri, 02 Dec 2022 17:04:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/gray-olson/</guid>
			

			<title><![CDATA[ Presser with Gray Olson ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Gray Olson, developer of Presser, a library that aims to make it easier to safely work with byte buffers.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Gray Olson, developer of Presser, a library that aims to make it easier to safely work with byte buffers.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Gray’s background and introduction
  [@04:18] - Gray’s art and graphic designing work for Embark Studio
  [@08:40] - Ray tracing and fractals
  [@13:44] - The most expensive process in a video game
  [@16:48] - Vector graphics are so hard on the GPU
  [@18:57] - What makes triangles very useful in drawing and designing
  [@22:41] - Matrix math as a fundamental building block of computer graphics
  [@28:13] - Understanding the concept of uninitialized memory and why Presser is necessary
  [@36:31] - LLVM’s “No Uninitialized Memory” attribute.
  [@39:06] - Rust’s virtual machine
  [@40:52] - Allocating memory for data
  [@49:34] - Safety invariants and validity invariants in the Rust ecosystem
  [@53:19] - How to use unsafe code in a way that does not violate the validity invariant of Rust
  [@1:04:01] - Embark Studio’s mission to enable those who play games to also modify the game worlds they play in
  [@1:07:27] - Embark Studio’s Rust game projects
  [@1:09:08] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.grayolson.me/">Gray Olson</a>, developer of <a href="https://github.com/EmbarkStudios/presser">Presser</a>, a library that aims to make it easier to safely work with byte buffers.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Gray’s background and introduction</li>
  <li>[@04:18] - Gray’s art and graphic designing work for Embark Studio</li>
  <li>[@08:40] - Ray tracing and fractals</li>
  <li>[@13:44] - The most expensive process in a video game</li>
  <li>[@16:48] - Vector graphics are so hard on the GPU</li>
  <li>[@18:57] - What makes triangles very useful in drawing and designing</li>
  <li>[@22:41] - Matrix math as a fundamental building block of computer graphics</li>
  <li>[@28:13] - Understanding the concept of uninitialized memory and why Presser is necessary</li>
  <li>[@36:31] - LLVM’s “No Uninitialized Memory” attribute.</li>
  <li>[@39:06] - Rust’s virtual machine</li>
  <li>[@40:52] - Allocating memory for data</li>
  <li>[@49:34] - Safety invariants and validity invariants in the Rust ecosystem</li>
  <li>[@53:19] - How to use unsafe code in a way that does not violate the validity invariant of Rust</li>
  <li>[@1:04:01] - Embark Studio’s mission to enable those who play games to also modify the game worlds they play in</li>
  <li>[@1:07:27] - Embark Studio’s Rust game projects</li>
  <li>[@1:09:08] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-12-02-gray-olson.mp3" length="68409887" type="audio/mpeg"/>
			<itunes:duration>1:11:15</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/greg-johnston/</link>
			<pubDate>Fri, 25 Nov 2022 17:13:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/greg-johnston/</guid>
			

			<title><![CDATA[ Leptos with Greg Johnston ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Greg Johnston, creator of Leptos, a full-stack, web framework using a reactive design to build declaritive user interfaces.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Greg Johnston, creator of Leptos, a full-stack, web framework using a reactive design to build declaritive user interfaces.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:00] - Introduction of Greg
  [@02:12] - Programming languages has Greg worked with
  [@05:14] - Greg’s other passions besides programming
  [@10:59] - How Elm has set the agenda for a lot of Javascript front-end frameworks
  [@13:25] - Elm vs Rust in terms of error handling
  [@18:16] - What is Leptos and why Greg created it
  [@33:44] - Pros of using Leptos
  [@38:19] - Leptos’ Server Side Rendering feature
  [@45:44] - Leptos’ build tool limitations
  [@51:40] - Leptos’ ability to interact with other languages
  [@59:25] - Greg’s work and projects using JavaScript
  [@1:00:45] - Greg’s Flutter experience
  [@1:04:21] - Greg’s Ionic experience
  [@1:08:28] - HTML
  [@1:12:46] - Leptos’ version
  [@1:14:14] - Leptos’ production readiness
  [@1:16:23] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/greg_johnston">Greg Johnston</a>, creator of <a href="https://github.com/gbj/leptos">Leptos</a>, a full-stack, web framework using a reactive design to build declaritive user interfaces.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:00] - Introduction of Greg</li>
  <li>[@02:12] - Programming languages has Greg worked with</li>
  <li>[@05:14] - Greg’s other passions besides programming</li>
  <li>[@10:59] - How Elm has set the agenda for a lot of Javascript front-end frameworks</li>
  <li>[@13:25] - Elm vs Rust in terms of error handling</li>
  <li>[@18:16] - What is Leptos and why Greg created it</li>
  <li>[@33:44] - Pros of using Leptos</li>
  <li>[@38:19] - Leptos’ Server Side Rendering feature</li>
  <li>[@45:44] - Leptos’ build tool limitations</li>
  <li>[@51:40] - Leptos’ ability to interact with other languages</li>
  <li>[@59:25] - Greg’s work and projects using JavaScript</li>
  <li>[@1:00:45] - Greg’s Flutter experience</li>
  <li>[@1:04:21] - Greg’s Ionic experience</li>
  <li>[@1:08:28] - HTML</li>
  <li>[@1:12:46] - Leptos’ version</li>
  <li>[@1:14:14] - Leptos’ production readiness</li>
  <li>[@1:16:23] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-11-25-greg-johnston.mp3" length="73890168" type="audio/mpeg"/>
			<itunes:duration>1:16:58</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/khashayar-fereidani/</link>
			<pubDate>Sun, 20 Nov 2022 18:45:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/khashayar-fereidani/</guid>
			

			<title><![CDATA[ Kanal with Khashayar Fereidani ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Khashayar Fereidani, creator of Kanal, a sync and async channel library boasting the fastest implementation of channels in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Khashayar Fereidani, creator of Kanal, a sync and async channel library boasting the fastest implementation of channels in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:10] - Introduction
  [@03:10] - Where did the idea of creating Kanal come from?
  [@04:10] - Go vs Rust performance
  [@06:32] - How Kanal works with synchronous Rust
  [@07:40] - When did work on Kanal get started
  [@11:08] - What’s left to get done for Kanal to be production ready
  [@13:48] - Feedback so far for Kanal
  [@15:54] - Async frameworks that work with Kanal
  [@16:59] - Kinds of problems that are solved with channels
  [@19:11] - Channels can help in learning Rust
  [@19:48] - What’s next for Kanal
  [@20:49] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://fereidani.com/">Khashayar Fereidani</a>, creator of <a href="https://github.com/fereidani/kanal">Kanal</a>, a sync and async channel library boasting the fastest implementation of channels in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:10] - Introduction</li>
  <li>[@03:10] - Where did the idea of creating Kanal come from?</li>
  <li>[@04:10] - Go vs Rust performance</li>
  <li>[@06:32] - How Kanal works with synchronous Rust</li>
  <li>[@07:40] - When did work on Kanal get started</li>
  <li>[@11:08] - What’s left to get done for Kanal to be production ready</li>
  <li>[@13:48] - Feedback so far for Kanal</li>
  <li>[@15:54] - Async frameworks that work with Kanal</li>
  <li>[@16:59] - Kinds of problems that are solved with channels</li>
  <li>[@19:11] - Channels can help in learning Rust</li>
  <li>[@19:48] - What’s next for Kanal</li>
  <li>[@20:49] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-11-18-khashayar-fereidani.mp3" length="20844878" type="audio/mpeg"/>
			<itunes:duration>21:42</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/sergey-davidoff/</link>
			<pubDate>Fri, 11 Nov 2022 16:55:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/sergey-davidoff/</guid>
			

			<title><![CDATA[ cargo-auditable with Sergey Davidoff ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Sergey Davidoff, creator of cargo-auditable, a cargo plugin for auditing your Rust dependencies for security vulnerabilities.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Sergey Davidoff, creator of cargo-auditable, a cargo plugin for auditing your Rust dependencies for security vulnerabilities.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:10] - Introduction to cargo-auditable
  [@07:51] - Guarantees that cargo-auditable provides
  [@17:33] - Trivy and other crates that are in cargo-auditable
  [@19:47] - cargo-auditable vs cargo audit
  [@21:09] - Sergey’s programming background
  [@34:49] - Vulnerabilities Sergey was able to encounter and reported to RustSec
  [@39:47] - Feedbacks and reactions from library owners that were found to have issues
  [@48:52] - How does Sergey handle problems and issues he encounters?
  [@56:48] - Sergey’s tips and advice to those who want to improve security on their projects
  [@59:36] - Parting thoughts and shoutouts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/Shnatsel">Sergey Davidoff</a>, creator of <a href="https://github.com/rust-secure-code/cargo-auditable">cargo-auditable</a>, a cargo plugin for auditing your Rust dependencies for security vulnerabilities.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:10] - Introduction to cargo-auditable</li>
  <li>[@07:51] - Guarantees that cargo-auditable provides</li>
  <li>[@17:33] - Trivy and other crates that are in cargo-auditable</li>
  <li>[@19:47] - cargo-auditable vs cargo audit</li>
  <li>[@21:09] - Sergey’s programming background</li>
  <li>[@34:49] - Vulnerabilities Sergey was able to encounter and reported to RustSec</li>
  <li>[@39:47] - Feedbacks and reactions from library owners that were found to have issues</li>
  <li>[@48:52] - How does Sergey handle problems and issues he encounters?</li>
  <li>[@56:48] - Sergey’s tips and advice to those who want to improve security on their projects</li>
  <li>[@59:36] - Parting thoughts and shoutouts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-11-11-sergey-davidoff.mp3" length="61978331" type="audio/mpeg"/>
			<itunes:duration>1:04:33</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/eric-arellano-stu-hood/</link>
			<pubDate>Fri, 04 Nov 2022 15:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/eric-arellano-stu-hood/</guid>
			

			<title><![CDATA[ Pants with Eric Arellano and Stu Hood ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Eric Arellano (they/them) and Stu Hood (he/him), maintainers of Pants, a build system made for monorepos.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Eric Arellano (they/them) and Stu Hood (he/him), maintainers of Pants, a build system made for monorepos.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:10] - Pants’ Introduction
  [@01:26] - Different languages used in building Pants
  [@03:25] - Pants versions
  [@06:00] - Pants’ history and why it started
  [@11:09] - What is a Monorepo and why you would want to use it
  [@13:48] - Polyrepo vs Monorepo
  [@19:04] - What makes Pants unique
  [@21:03] - Why Pants needed to rewrite some parts from Python to Rust and other languages
  [@22:31] - Why Pants chose Rust
  [@25:46] - Pants 1 vs Pants 2
  [@27:12] - Challenges integrating Python and Rust
  [@29:03] - How Eric and Stu figured out which parts should be written in Python and which should be in Rust
  [@32:27] - Future plans and what’s next for Pants?
  [@36:15] - Shoutouts and parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/arellanoeric">Eric Arellano</a> (they/them) and <a href="https://twitter.com/stuhood">Stu Hood</a> (he/him), maintainers of <a href="https://www.pantsbuild.org/">Pants</a>, a build system made for monorepos.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:10] - Pants’ Introduction</li>
  <li>[@01:26] - Different languages used in building Pants</li>
  <li>[@03:25] - Pants versions</li>
  <li>[@06:00] - Pants’ history and why it started</li>
  <li>[@11:09] - What is a Monorepo and why you would want to use it</li>
  <li>[@13:48] - Polyrepo vs Monorepo</li>
  <li>[@19:04] - What makes Pants unique</li>
  <li>[@21:03] - Why Pants needed to rewrite some parts from Python to Rust and other languages</li>
  <li>[@22:31] - Why Pants chose Rust</li>
  <li>[@25:46] - Pants 1 vs Pants 2</li>
  <li>[@27:12] - Challenges integrating Python and Rust</li>
  <li>[@29:03] - How Eric and Stu figured out which parts should be written in Python and which should be in Rust</li>
  <li>[@32:27] - Future plans and what’s next for Pants?</li>
  <li>[@36:15] - Shoutouts and parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-11-04-eric-arellano-stu-hood.mp3" length="40557086" type="audio/mpeg"/>
			<itunes:duration>42:14</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/forest-anderson/</link>
			<pubDate>Fri, 07 Oct 2022 02:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/forest-anderson/</guid>
			

			<title><![CDATA[ Veloren with Forest Anderson ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Forest Anderson, co-host at Rust GameDev Podcast, and core dev on Veloren. Allen and Forest talk about Veloren, a multiplayer voxel RPG game engine, written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Forest Anderson, co-host at Rust GameDev Podcast, and core dev on Veloren. Allen and Forest talk about Veloren, a multiplayer voxel RPG game engine, written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:11] - Introduction
  [@03:31] - The Rust Game Dev Team
  [@07:31] - The size of the community for Rust game development
  [@10:48] - The complexity of game development
  [@12:43] - How Veloren was created
  [@18:30] - What is Veloren
  [@22:52] - The kinds of games that can be developed in Veloren
  [@25:36] - The advantage of using Rust in game development
  [@31:51] - Game development experience in Linux vs Windows
  [@34:46] - Gaming community for Linux
  [@37:40] - System Requirement for running Veloren
  [@42:17] - Parting thoughts
  [@43:54] - Where to reach out and how to get involved with Veloren and in the Rust Game Dev community


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.forest-anderson.ca/">Forest Anderson</a>, co-host at <a href="https://rustgamedev.com/">Rust GameDev Podcast</a>, and core dev on <a href="https://veloren.net/">Veloren</a>. Allen and Forest talk about Veloren, a multiplayer voxel RPG game engine, written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:11] - Introduction</li>
  <li>[@03:31] - The Rust Game Dev Team</li>
  <li>[@07:31] - The size of the community for Rust game development</li>
  <li>[@10:48] - The complexity of game development</li>
  <li>[@12:43] - How Veloren was created</li>
  <li>[@18:30] - What is Veloren</li>
  <li>[@22:52] - The kinds of games that can be developed in Veloren</li>
  <li>[@25:36] - The advantage of using Rust in game development</li>
  <li>[@31:51] - Game development experience in Linux vs Windows</li>
  <li>[@34:46] - Gaming community for Linux</li>
  <li>[@37:40] - System Requirement for running Veloren</li>
  <li>[@42:17] - Parting thoughts</li>
  <li>[@43:54] - Where to reach out and how to get involved with Veloren and in the Rust Game Dev community</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-09-30-forest-anderson.mp3" length="43084487" type="audio/mpeg"/>
			<itunes:duration>44:52</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.62-1.63-1.64/</link>
			<pubDate>Wed, 05 Oct 2022 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.62-1.63-1.64/</guid>
			

			<title><![CDATA[ What's New in Rust 1.62, 1.63, and 1.64 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.62, 1.63, and 1.64 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.62, 1.63, and 1.64 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:50] - Rust 1.62


  [@00:58] - cargo add
    
      Maintaining sorting in TOML files
      toml_edit
      cargo-edit
    
  
  [@03:37] - #[default] enum variants
    
      Generated bounds part of RFC
      Macro helper attributes
      Extra bounds on derive
    
  
  [@07:36] - Thinner, faster mutexes on Linux
    
      Tracking issue
      Short thread on the change from Mara
      More details from Mara on pthread mutexes
    
  
  [@13:21] - Bare-metal x86_64 target
    
      Target triples
      Tier 2 target policy
      Tier 2 targets
      x86_64-unknown-none
      Custom target triples
    
  
  [@22:20] - Stabilized APIs
    
      f64::total_cmp
        
          Implementing PR
        
      
      Stdin::lines
      FusedIterator
    
  
  [@29:22] - Changelog deep-dive
    
      cargo -F for --features
      unaligned_references lint now warns by default
        
          addr_of!
        
      
    
  


[@31:09] - Rust 1.62.1

Not much to talk about. We also didn’t talk about:


  Rustup 1.25.0
  Rustup 1.25.1


[@31:56] - Rust 1.63


  [@31:56] - Scoped threads
    
      The Leakpocalypse issue
      Pre-Pooping Your Pants With Rust
    
  
  [@40:41] - Rust ownership for raw file descriptors
    
      Rust I/O Safety RFC
    
  
  [@43:45] - const mutex initialization
  [@43:54] - Turbofish and impl Trait arguments
    
      Search/replace generics reference
      Rust reference for turbofish
    
  
  [@52:03] - Non-lexical lifetimes migration complete
    
      NLL stabilization and borrowck’s future
      polonius
    
  
  [@51:33] - Stabilized APIs
    
      array::from_fn
      Box::into_pin
      Things Rust-in-Linux needs from Rust
    
  
  [@56:27] - Changelog deep-dive
    
      cargo --config
      cargo new test code updated
      New targets: Apple WatchOS and Nintendo 3DS
      ​[OsStr]::join
        
          The Join trait
        
      
    
  


[@1:00:24] - Rust 1.64


  [@1:00:32] - IntoFuture
    
      Reference in original async/await RFC
      Original IntoFuture regression
    
  
  [@1:03:43] - C-compatible FFI types in core
    
      libc crate
      libcpocalypse
    
  
  [@1:09:37] - rust-analyzer component in rustup
    
      rust-analyzer proxy binary added to rustup
    
  
  [@1:13:19] - Cargo workspace inheritance and multi-target builds
    
      Inheriting attributes from the workspace
    
  
  [@1:15:58] - Stabilized APIs
    
      Stabilization PR for ready!
    
  
  [@1:18:03] - Compatibility notes
    
      Increasing the glibc and Linux kernel requirements
      RLS deprecation
    
  
  [@1:22:33] - Other changes
    
      Profile-Guided Optimization
      PR landing lint for unused tuple fields
    
  
  [@1:25:12] - Changelog deep-dive
    
      [build.jobs]
        
          Implementing PR for negative values
        
      
      New target: Nintendo Switch
      Improve derive(Debug)
        
          Other internal changes
        
      
      Optimizing Vec::insert
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.62, 1.63, and 1.64 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0050---rust-162">[@00:50] - <a href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html">Rust 1.62</a></h4>

<ul>
  <li>[@00:58] - <a href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#cargo-add"><code>cargo add</code></a>
    <ul>
      <li><a href="https://github.com/rust-lang/cargo/blob/13ae438cf079da58272edc71f4d4968043dbd27b/src/cargo/ops/cargo_add/mod.rs#L97">Maintaining sorting in TOML files</a></li>
      <li><a href="https://crates.io/crates/toml_edit"><code>toml_edit</code></a></li>
      <li><a href="https://github.com/killercup/cargo-edit"><code>cargo-edit</code></a></li>
    </ul>
  </li>
  <li>[@03:37] - <a href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#default-enum-variants"><code>#[default]</code> enum variants</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/3107-derive-default-enum.html#generated-bounds">Generated bounds part of RFC</a></li>
      <li><a href="https://doc.rust-lang.org/stable/reference/procedural-macros.html#derive-macro-helper-attributes">Macro helper attributes</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/26925">Extra bounds on derive</a></li>
    </ul>
  </li>
  <li>[@07:36] - <a href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#thinner-faster-mutexes-on-linux">Thinner, faster mutexes on Linux</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/93740">Tracking issue</a></li>
      <li><a href="https://twitter.com/m_ou_se/status/1526211117651050497">Short thread on the change from Mara</a></li>
      <li><a href="https://twitter.com/m_ou_se/status/1505179030336819209">More details from Mara on pthread mutexes</a></li>
    </ul>
  </li>
  <li>[@13:21] - <a href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#bare-metal-x86_64-target">Bare-metal x86_64 target</a>
    <ul>
      <li><a href="https://wiki.osdev.org/Target_Triplet">Target triples</a></li>
      <li><a href="https://doc.rust-lang.org/rustc/target-tier-policy.html#tier-2-target-policy">Tier 2 target policy</a></li>
      <li><a href="https://doc.rust-lang.org/rustc/platform-support.html#tier-2">Tier 2 targets</a></li>
      <li><a href="https://doc.rust-lang.org/beta/rustc/platform-support/x86_64-unknown-none.html">x86_64-unknown-none</a></li>
      <li><a href="https://rustc-dev-guide.rust-lang.org/building/new-target.html">Custom target triples</a></li>
    </ul>
  </li>
  <li>[@22:20] - <a href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/primitive.f64.html#method.total_cmp"><code>f64::total_cmp</code></a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/72568">Implementing PR</a></li>
        </ul>
      </li>
      <li><a href="https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lines"><code>Stdin::lines</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/iter/trait.FusedIterator.html"><code>FusedIterator</code></a></li>
    </ul>
  </li>
  <li>[@29:22] - Changelog deep-dive
    <ul>
      <li><a href="https://github.com/rust-lang/cargo/pull/10576"><code>cargo -F</code> for <code>--features</code></a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/95372/"><code>unaligned_references</code> lint now warns by default</a>
        <ul>
          <li><a href="https://doc.rust-lang.org/core/ptr/macro.addr_of.html"><code>addr_of!</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="3109---rust-1621">[@31:09] - <a href="https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html">Rust 1.62.1</a></h4>

<p>Not much to talk about. We also didn’t talk about:</p>

<ul>
  <li><a href="https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html">Rustup 1.25.0</a></li>
  <li><a href="https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html">Rustup 1.25.1</a></li>
</ul>

<h4 id="3156---rust-163">[@31:56] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html">Rust 1.63</a></h4>

<ul>
  <li>[@31:56] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html#scoped-threads">Scoped threads</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/24292">The Leakpocalypse issue</a></li>
      <li><a href="https://faultlore.com/blah/everyone-poops/">Pre-Pooping Your Pants With Rust</a></li>
    </ul>
  </li>
  <li>[@40:41] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html#rust-ownership-for-raw-file-descriptorshandles-io-safety">Rust ownership for raw file descriptors</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/3128-io-safety.html">Rust I/O Safety RFC</a></li>
    </ul>
  </li>
  <li>[@43:45] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html#const-mutex-rwlock-condvar-initialization"><code>const</code> mutex initialization</a></li>
  <li>[@43:54] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html#turbofish-for-generics-in-functions-with-impl-trait">Turbofish and <code>impl Trait</code> arguments</a>
    <ul>
      <li><a href="https://www.reddit.com/r/rust/comments/5penft/comment/dcsgk7n/">Search/replace generics reference</a></li>
      <li><a href="https://doc.rust-lang.org/stable/reference/paths.html#paths-in-expressions">Rust reference for turbofish</a></li>
    </ul>
  </li>
  <li>[@52:03] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html#non-lexical-lifetimes-migration-complete">Non-lexical lifetimes migration complete</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2022/08/05/nll-by-default.html">NLL stabilization and borrowck’s future</a></li>
      <li><a href="https://github.com/rust-lang/polonius">polonius</a></li>
    </ul>
  </li>
  <li>[@51:33] - <a href="https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/array/fn.from_fn.html"><code>array::from_fn</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/boxed/struct.Box.html#method.into_pin"><code>Box::into_pin</code></a></li>
      <li><a href="https://github.com/Rust-for-Linux/linux/issues/2">Things Rust-in-Linux needs from Rust</a></li>
    </ul>
  </li>
  <li>[@56:27] - Changelog deep-dive
    <ul>
      <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/config.html#command-line-overrides"><code>cargo --config</code></a></li>
      <li><a href="https://github.com/rust-lang/cargo/pull/10706"><code>cargo new</code> test code updated</a></li>
      <li>New targets: <a href="https://github.com/rust-lang/rust/pull/95243/">Apple WatchOS</a> and <a href="https://github.com/rust-lang/rust/pull/95897/">Nintendo 3DS</a></li>
      <li>​<a href="https://github.com/rust-lang/rust/pull/96881/"><code>[OsStr]::join</code></a>
        <ul>
          <li><a href="https://doc.rust-lang.org/std/slice/trait.Join.html">The <code>Join</code> trait</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="10024---rust-164">[@1:00:24] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html">Rust 1.64</a></h4>

<ul>
  <li>[@1:00:32] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#enhancing-await-with-intofuture"><code>IntoFuture</code></a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/2394-async_await.html#the-expansion-of-await">Reference in original <code>async</code>/<code>await</code> RFC</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/67706">Original <code>IntoFuture</code> regression</a></li>
    </ul>
  </li>
  <li>[@1:03:43] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#c-compatible-ffi-types-in-core-and-alloc">C-compatible FFI types in core</a>
    <ul>
      <li><a href="https://crates.io/crates/libc"><code>libc</code> crate</a></li>
      <li><a href="https://github.com/dtolnay/semver-trick/tree/7957dfaf6f65789756bded049f3bd2094624e0e3#illustrative-example">libcpocalypse</a></li>
    </ul>
  </li>
  <li>[@1:09:37] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#rust-analyzer-is-now-available-via-rustup">rust-analyzer component in rustup</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rustup/pull/3022"><code>rust-analyzer</code> proxy binary added to rustup</a></li>
    </ul>
  </li>
  <li>[@1:13:19] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#cargo-improvements-workspace-inheritance-and-multi-target-builds">Cargo workspace inheritance and multi-target builds</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace">Inheriting attributes from the workspace</a></li>
    </ul>
  </li>
  <li>[@1:15:58] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/81050">Stabilization PR for <code>ready!</code></a></li>
    </ul>
  </li>
  <li>[@1:18:03] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#compatibility-notes">Compatibility notes</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html">Increasing the glibc and Linux kernel requirements</a></li>
      <li><a href="https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html">RLS deprecation</a></li>
    </ul>
  </li>
  <li>[@1:22:33] - <a href="https://blog.rust-lang.org/2022/09/22/Rust-1.64.0.html#other-changes">Other changes</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/rustc/profile-guided-optimization.html">Profile-Guided Optimization</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/95977">PR landing lint for unused tuple fields</a></li>
    </ul>
  </li>
  <li>[@1:25:12] - Changelog deep-dive
    <ul>
      <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/config.html#buildjobs"><code>[build.jobs]</code></a>
        <ul>
          <li><a href="https://github.com/rust-lang/cargo/pull/10844">Implementing PR for negative values</a></li>
        </ul>
      </li>
      <li>New target: <a href="https://github.com/rust-lang/rust/pull/88991/">Nintendo Switch</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/98190/">Improve <code>derive(Debug)</code></a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/blob/stable/RELEASES.md#internal-changes">Other internal changes</a></li>
        </ul>
      </li>
      <li><a href="https://github.com/rust-lang/rust/pull/98755/">Optimizing <code>Vec::insert</code></a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-10-05-rust-1.62-1.63-1.64.mp3" length="110185060" type="audio/mpeg"/>
			<itunes:duration>01:31:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/mrinal-wadhwa/</link>
			<pubDate>Fri, 23 Sep 2022 15:28:31 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/mrinal-wadhwa/</guid>
			

			<title><![CDATA[ Ockam with Mrinal Wadhwa ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Mrinal Wadhwa, CTO at Ockam. Allen and Mrinal talk about Ockham, a toolkit, written in Rust, to build distributed applications that provide trust across hostile networks.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Mrinal Wadhwa, CTO at Ockam. Allen and Mrinal talk about Ockham, a toolkit, written in Rust, to build distributed applications that provide trust across hostile networks.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:10] - Mrinal’s Introduction
  [@01:01] - What is Ockam?
  [@05:04] - Building Ockam from scratch and building it open source
  [@10:45] - How Ockam provides security with modern data distribution
  [@18:15] - The reason behind building Ockam with Rust
  [@26:15] - Feedback that Ockam received from using Rust &amp; Elixir
  [@28:04] - Concerns with Rust and Elixir
  [@29:38] - The most difficult part of working on Ockam
  [@30:42] - Competing technologies that solve the same issues as Ockam
  [@33:04] - When Ockam is not a good solution
  [@35:15] - What’s next for Ockam
  [@40:17] - Job opportunity with Ockam
  [@41:48] - Why Ockham switched From Erlang to Elixir


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/mrinal">Mrinal Wadhwa</a>, CTO at <a href="https://www.ockam.io/">Ockam</a>. Allen and Mrinal talk about Ockham, a toolkit, written in Rust, to build distributed applications that provide trust across hostile networks.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:10] - Mrinal’s Introduction</li>
  <li>[@01:01] - What is Ockam?</li>
  <li>[@05:04] - Building Ockam from scratch and building it open source</li>
  <li>[@10:45] - How Ockam provides security with modern data distribution</li>
  <li>[@18:15] - The reason behind building Ockam with Rust</li>
  <li>[@26:15] - Feedback that Ockam received from using Rust &amp; <a href="https://elixir-lang.org/">Elixir</a></li>
  <li>[@28:04] - Concerns with Rust and Elixir</li>
  <li>[@29:38] - The most difficult part of working on Ockam</li>
  <li>[@30:42] - Competing technologies that solve the same issues as Ockam</li>
  <li>[@33:04] - When Ockam is not a good solution</li>
  <li>[@35:15] - What’s next for Ockam</li>
  <li>[@40:17] - Job opportunity with Ockam</li>
  <li>[@41:48] - Why Ockham switched From <a href="https://www.erlang.org/">Erlang</a> to Elixir</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-09-23-mrinal-wadhwa.mp3" length="42705398" type="audio/mpeg"/>
			<itunes:duration>44:29</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/david-pedersen/</link>
			<pubDate>Fri, 16 Sep 2022 15:10:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/david-pedersen/</guid>
			

			<title><![CDATA[ Axum with David Pedersen ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with David Pedersen, Core Team Member at Tokio. Allen and David talk about Axum, a web application framework written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with David Pedersen, Core Team Member at Tokio. Allen and David talk about Axum, a web application framework written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:40] - Introduction
  [@1:13] - Why Axum is developed under the Tokio project umbrella
  [@5:58] - What to expect from Axum
  [@8:14] - Axum additional features
  [@9:40] - Why Tokio decided to roll their own web framework
  [@13:04] - Understanding Axum vs other web frameworks
  [@22:16] - Testing, reviews, and feedback of the Axum framework
  [@23:46] - Axum’s production readiness
  [@28:57] - Semantic versioning
  [@31:59] - Understanding and learning lessons from other web frameworks to improve Axum
  [@34:47] - Production use cases that should use Axum
  [@35:54] - David’s Rust experience vs other web frameworks
  [@40:25] - Clippy
  [@41:41] - Upcoming changes and roadmap for Axum
  [@45:28] - Parting thoughts and how to reach out to David


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/davidpdrsn">David Pedersen</a>, Core Team Member at <a href="https://tokio.rs/">Tokio</a>. Allen and David talk about <a href="https://github.com/tokio-rs/axum">Axum</a>, a web application framework written in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:40] - Introduction</li>
  <li>[@1:13] - Why Axum is developed under the Tokio project umbrella</li>
  <li>[@5:58] - What to expect from Axum</li>
  <li>[@8:14] - Axum additional features</li>
  <li>[@9:40] - Why Tokio decided to roll their own web framework</li>
  <li>[@13:04] - Understanding Axum vs other web frameworks</li>
  <li>[@22:16] - Testing, reviews, and feedback of the Axum framework</li>
  <li>[@23:46] - Axum’s production readiness</li>
  <li>[@28:57] - Semantic versioning</li>
  <li>[@31:59] - Understanding and learning lessons from other web frameworks to improve Axum</li>
  <li>[@34:47] - Production use cases that should use Axum</li>
  <li>[@35:54] - David’s Rust experience vs other web frameworks</li>
  <li>[@40:25] - Clippy</li>
  <li>[@41:41] - Upcoming changes and roadmap for Axum</li>
  <li>[@45:28] - Parting thoughts and how to reach out to David</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-09-16-david-pedersen.mp3" length="47202638" type="audio/mpeg"/>
			<itunes:duration>49:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/nell-shamrell-harrington/</link>
			<pubDate>Fri, 09 Sep 2022 08:10:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/nell-shamrell-harrington/</guid>
			

			<title><![CDATA[ Rust at Microsoft with Nell Shamrell-Harrington ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Nell Shamrell-Harrington, Member Board of Directors at Rust Foundation and Principal Software Engineer at Microsoft about Microsoft’s use of Rust, her time being involved with Rust, and also the Rust RFC process..
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Nell Shamrell-Harrington, Member Board of Directors at Rust Foundation and Principal Software Engineer at Microsoft about Microsoft’s use of Rust, her time being involved with Rust, and also the Rust RFC process..

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@1:30] - Nell’s Background and Introduction
  [@5:31] - Rust communities all over the world
  [@7:10] - Handling opinions, feedback and RFCs when making changes and updating a language
  [@11:23] - What is a RFC and how does it work?
  [@17:43] - Nell’s experience switching from Ruby to Rust
  [@19:56] - Nell’s career background
  [@24:18] - How the Rust Foundation operates
  [@24:20] - Rust Foundation’s sponsorship model
  [@33:08] - What Microsoft is currently working on with Rust
  [@42:22] - How much Rust is going into Windows
  [@44:25] - Is there a public long-term plan for Microsoft’s involvement with Rust?
  [@48:02] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a>, Member Board of Directors at <a href="https://foundation.rust-lang.org/">Rust Foundation</a> and Principal Software Engineer at <a href="https://microsoft.com/">Microsoft</a> about Microsoft’s use of Rust, her time being involved with Rust, and also the Rust RFC process..</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@1:30] - Nell’s Background and Introduction</li>
  <li>[@5:31] - Rust communities all over the world</li>
  <li>[@7:10] - Handling opinions, feedback and RFCs when making changes and updating a language</li>
  <li>[@11:23] - What is a RFC and how does it work?</li>
  <li>[@17:43] - Nell’s experience switching from Ruby to Rust</li>
  <li>[@19:56] - Nell’s career background</li>
  <li>[@24:18] - How the Rust Foundation operates</li>
  <li>[@24:20] - Rust Foundation’s sponsorship model</li>
  <li>[@33:08] - What Microsoft is currently working on with Rust</li>
  <li>[@42:22] - How much Rust is going into Windows</li>
  <li>[@44:25] - Is there a public long-term plan for Microsoft’s involvement with Rust?</li>
  <li>[@48:02] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-09-09-nell-shamrell-harrington.mp3" length="49470901" type="audio/mpeg"/>
			<itunes:duration>51:31</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/dmitry-stepanov/</link>
			<pubDate>Fri, 02 Sep 2022 15:45:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/dmitry-stepanov/</guid>
			

			<title><![CDATA[ Fyrox with Dmitry Stepanov ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Dmitry Stepanov, creator of Fyrox. Fyrox is a feature-rich, general purpose game engine built in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Dmitry Stepanov, creator of Fyrox. Fyrox is a feature-rich, general purpose game engine built in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:41] - Dmitry’s background and programming introduction
  [@4:12] - How did Dmitry got into building game engines
  [@7:39] - How Dmitry discovered Rust
  [@8:57] - Dmitry’s experience so far using Rust
  [@12:13] - When did Dmitry start working on Fyrox
  [@15:03] - What’s the original idea of Fyrox
  [@16:23] - The advantage of Fyrox over other game engines
  [@22:05] - Is Fyrox production ready?
  [@23:17] - Games and projects that are now using Fyrox
  [@25:58] - Things need to know before using Fyrox game engine
  [@30:21] - Fyrox’s monetization plan
  [@31:33] - Dmitry’s upcoming features and plans for Fyrox


Other Resources

  Fyrox’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/mrDIMAS">Dmitry Stepanov</a>, creator of <a href="https://fyrox.rs/">Fyrox</a>. Fyrox is a feature-rich, general purpose game engine built in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:41] - Dmitry’s background and programming introduction</li>
  <li>[@4:12] - How did Dmitry got into building game engines</li>
  <li>[@7:39] - How Dmitry discovered Rust</li>
  <li>[@8:57] - Dmitry’s experience so far using Rust</li>
  <li>[@12:13] - When did Dmitry start working on Fyrox</li>
  <li>[@15:03] - What’s the original idea of Fyrox</li>
  <li>[@16:23] - The advantage of Fyrox over other game engines</li>
  <li>[@22:05] - Is Fyrox production ready?</li>
  <li>[@23:17] - Games and projects that are now using Fyrox</li>
  <li>[@25:58] - Things need to know before using Fyrox game engine</li>
  <li>[@30:21] - Fyrox’s monetization plan</li>
  <li>[@31:33] - Dmitry’s upcoming features and plans for Fyrox</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/FyroxEngine/Fyrox">Fyrox’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-09-02-dmitry-stepanov.mp3" length="32937273" type="audio/mpeg"/>
			<itunes:duration>34:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/daniel-thompson/</link>
			<pubDate>Sun, 24 Jul 2022 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/daniel-thompson/</guid>
			

			<title><![CDATA[ Tauri with Daniel Thompson-Yvetot ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Daniel Thompson-Yvetot, co-founder of Tauri. Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Daniel Thompson-Yvetot, co-founder of Tauri. Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:33] - Daniel’s introduction
  [@3:38] - Tauri’s focus on safety and security
  [@6:50] - Tauri’s mission to reduce their footprint
  [@14:48] - How does Tauri handles features that are not supported across different platforms
  [@23:56] - How does Tauri monetize to keep the project going?
  [@26:16] - Why choose Tauri over other solutions?
  [@28:57] - What are the tools being built with Tauri?
  [@31:09] - Tyler’s programming background
  [@35:11] - Tauri’s future release and features
  [@38:38] - ‘Tauri Foundations’ book by Daniel Thompson-Yvetot and Lucas Nogueira
  [@40:00] - Requirement on building a Tauri app
  [@43:13] - Parting thoughts


Other Resources

  Tauri’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/nothingismagick">Daniel Thompson-Yvetot</a>, co-founder of <a href="https://tauri.app/">Tauri</a>. Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:33] - Daniel’s introduction</li>
  <li>[@3:38] - Tauri’s focus on safety and security</li>
  <li>[@6:50] - Tauri’s mission to reduce their footprint</li>
  <li>[@14:48] - How does Tauri handles features that are not supported across different platforms</li>
  <li>[@23:56] - How does Tauri monetize to keep the project going?</li>
  <li>[@26:16] - Why choose Tauri over other solutions?</li>
  <li>[@28:57] - What are the tools being built with Tauri?</li>
  <li>[@31:09] - Tyler’s programming background</li>
  <li>[@35:11] - Tauri’s future release and features</li>
  <li>[@38:38] - ‘Tauri Foundations’ book by Daniel Thompson-Yvetot and Lucas Nogueira</li>
  <li>[@40:00] - Requirement on building a Tauri app</li>
  <li>[@43:13] - Parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/tauri-apps/tauri">Tauri’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-07-22-daniel-thompson.mp3" length="42945723" type="audio/mpeg"/>
			<itunes:duration>44:44</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/tyler-mandry/</link>
			<pubDate>Mon, 18 Jul 2022 07:10:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/tyler-mandry/</guid>
			

			<title><![CDATA[ Asynchronous Rust with Tyler Mandry ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Tyler Mandry, lead on Rust Async Working Group. Rust Async Working Group is focused around implementation/design of the “foundations” for Async I/O.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Tyler Mandry, lead on Rust Async Working Group. Rust Async Working Group is focused around implementation/design of the “foundations” for Async I/O.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:10] - Async Working Group introduction
  [@3:08] - Async progress over the past few years
  [@5:16] - The Fuchsia operating system and its goals
  [@6:19] - How much of Fushia is written in Rust?
  [@8:16] - The experience of using Rust in Fuchsia so far
  [@17:29] - Why are async runtimes not compatible with each other, and how might it be solved?
  [@23:06] - How does the working group handle feedback?
  [@25:33] - What’s the most important issue the working group is working on?
  [@32:45] - Different types of async runtimes
  [@34:36] - Turning synchronous into async
  [@39:36] - How did Tyler go from async C++ to async Rust?
  [@47:14] - Tyler’s code and documentation writing
  [@54:21] - Where to connect with Tyler


Other Resources

  Tyler’s Blog


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/tmandry">Tyler Mandry</a>, lead on <a href="https://rust-lang.github.io/wg-async/welcome.html">Rust Async Working Group</a>. Rust Async Working Group is focused around implementation/design of the “foundations” for Async I/O.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:10] - Async Working Group introduction</li>
  <li>[@3:08] - Async progress over the past few years</li>
  <li>[@5:16] - The Fuchsia operating system and its goals</li>
  <li>[@6:19] - How much of Fushia is written in Rust?</li>
  <li>[@8:16] - The experience of using Rust in Fuchsia so far</li>
  <li>[@17:29] - Why are async runtimes not compatible with each other, and how might it be solved?</li>
  <li>[@23:06] - How does the working group handle feedback?</li>
  <li>[@25:33] - What’s the most important issue the working group is working on?</li>
  <li>[@32:45] - Different types of async runtimes</li>
  <li>[@34:36] - Turning synchronous into async</li>
  <li>[@39:36] - How did Tyler go from async C++ to async Rust?</li>
  <li>[@47:14] - Tyler’s code and documentation writing</li>
  <li>[@54:21] - Where to connect with Tyler</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://tmandry.gitlab.io/blog/">Tyler’s Blog</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-07-15-tyler-mandry.mp3" length="54559137" type="audio/mpeg"/>
			<itunes:duration>0:56:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/tiemoko-ballo/</link>
			<pubDate>Fri, 08 Jul 2022 15:05:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/tiemoko-ballo/</guid>
			

			<title><![CDATA[ High Assurance Rust with Tiemoko Ballo ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Tiemoko Ballo, author of High Assurance Rust. High Assurance Rust is a book about building performant software we can justifiably trust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Tiemoko Ballo, author of High Assurance Rust. High Assurance Rust is a book about building performant software we can justifiably trust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:34] - Tiemeko’s introduction
  [@2:18] - Defining Safety critical and Mission critical
  [@3:22] - How to develop software in Rust and have a high assurance?
  [@8:21] - The lack of standardized behavior and different compilers
  [@13:29] - Different approaches to assurance testing
  [@14:54] - How does Rust’s memory safety work?
  [@20:57] - Temporal memory
  [@22:59] - What is a borrow checker and how do we know that it’s working properly?
  [@28:17] - The difference between fuzz testing, property-based testing, and chaos testing
  [@35:48] - Teimoko’s programming background
  [@42:55] - Teimoko’s work and projects
  [@46:15] - Rust’s error handling and concurrency advantages over other languages
  [@49:29] - What Rust lacks in terms of guaranteeing high assurance and justifiability
  [@53:17] - How to stay up to date on what’s happening in the security space.
  [@54:35] - Parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://tiemoko.com/">Tiemoko Ballo</a>, author of <a href="https://highassurance.rs/">High Assurance Rust</a>. High Assurance Rust is a book about building performant software we can justifiably trust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:34] - Tiemeko’s introduction</li>
  <li>[@2:18] - Defining Safety critical and Mission critical</li>
  <li>[@3:22] - How to develop software in Rust and have a high assurance?</li>
  <li>[@8:21] - The lack of standardized behavior and different compilers</li>
  <li>[@13:29] - Different approaches to assurance testing</li>
  <li>[@14:54] - How does Rust’s memory safety work?</li>
  <li>[@20:57] - Temporal memory</li>
  <li>[@22:59] - What is a borrow checker and how do we know that it’s working properly?</li>
  <li>[@28:17] - The difference between fuzz testing, property-based testing, and chaos testing</li>
  <li>[@35:48] - Teimoko’s programming background</li>
  <li>[@42:55] - Teimoko’s work and projects</li>
  <li>[@46:15] - Rust’s error handling and concurrency advantages over other languages</li>
  <li>[@49:29] - What Rust lacks in terms of guaranteeing high assurance and justifiability</li>
  <li>[@53:17] - How to stay up to date on what’s happening in the security space.</li>
  <li>[@54:35] - Parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-07-08-tiemoko-ballo.mp3" length="55704346" type="audio/mpeg"/>
			<itunes:duration>58:01</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/chris-krycho/</link>
			<pubDate>Fri, 01 Jul 2022 16:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/chris-krycho/</guid>
			

			<title><![CDATA[ New Rustacean with Chris Krycho ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Chris Krycho, host of the now-ended New Rustacean podcast about learning the Rust programming language.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Chris Krycho, host of the now-ended New Rustacean podcast about learning the Rust programming language.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@1:08] - Chris’ background and introduction
  [@4:33] - Chris’ current career and projects
  [@12:17] - Rust and WebAssembly
  [@19:35] - Chris’ podcasting plans
  [@23:47] - Chris’ podcasting preparation and processes
  [@36:02] - Lessons and insights coming from podcasting
  [@48:08] - ZSH vs Fish
  [@53:12] - Picking out potential podcast guests and making great interviews
  [@57:12] - Chris’ opinion and comparison on the different programming languages
  [@1:07:33] - Chris’ parting thoughts and future plans


Other Resources

  Chris’s Twitter


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://v5.chriskrycho.com/index.html">Chris Krycho</a>, host of the now-ended <a href="https://newrustacean.com/">New Rustacean</a> podcast about learning the Rust programming language.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@1:08] - Chris’ background and introduction</li>
  <li>[@4:33] - Chris’ current career and projects</li>
  <li>[@12:17] - Rust and WebAssembly</li>
  <li>[@19:35] - Chris’ podcasting plans</li>
  <li>[@23:47] - Chris’ podcasting preparation and processes</li>
  <li>[@36:02] - Lessons and insights coming from podcasting</li>
  <li>[@48:08] - ZSH vs Fish</li>
  <li>[@53:12] - Picking out potential podcast guests and making great interviews</li>
  <li>[@57:12] - Chris’ opinion and comparison on the different programming languages</li>
  <li>[@1:07:33] - Chris’ parting thoughts and future plans</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://twitter.com/chriskrycho">Chris’s Twitter</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-07-01-chris-krycho.mp3" length="68413231" type="audio/mpeg"/>
			<itunes:duration>1:11:15</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/twir-446/</link>
			<pubDate>Mon, 27 Jun 2022 15:32:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/twir-446/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 446 ]]></title>
			<itunes:summary><![CDATA[ Highlights from This Week in Rust - Issue 446,
presented by Allen and Tim, with Nell
Shamrell-Harrington, co-hosting for the first time in 2022.

 ]]></itunes:summary>
			<description><![CDATA[ Highlights from This Week in Rust - Issue 446,
presented by Allen and Tim, with Nell
Shamrell-Harrington, co-hosting for the first time in 2022.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources



[@00:00:00] Welcome


  [@00:00:10] - Introduction
  [@00:00:52] - Agenda
  [@00:01:27] - Interview with Nell Shamrell-Harrington about editing This Week
in Rust
    
      [@00:06:21] Submitting an article to This week in Rust
      TWIR Github Repository github.com/rust-lang/this-week-in-rust
      TWIR Twitter account @thisweekinrust
      [@00:07:42] Call for volunteers to co-host an episode
    
  
  [@00:08:38] - Quote of the
week
    
      I wrote a bespoke time-series database in Rust a few years ago, and it has
had exactly one issue since I stood it up in production, and that was due to
pessimistic filesystem access patterns, rather than the language. This thing
is handling hundreds of thousands of inserts per second, and it’s even
threaded.

      Given that I’ve been programming professionally for over a decade in Python,
Perl, Ruby, C, C++, Javascript, Java, and Rust, I’ll pick Rust absolutely
any time that I want something running that I won’t get called at 3 AM to
fix. It probably took me 5 times as long to write it as if I did it in Go or
Python, but I guarantee it’s saved me 10 times as much time I would have
otherwise spent triaging, debugging, and running disaster recovery.
    
    
      “Configuring uWSGI for Production
Deployment”
(2019) by at Peter Sperl and Ben Green from Bloomberg
      uWSGI’s  max-requests and max-worker-lifetime options are intended to reduce the chance of memory leaks affecting production workloads
    
  
  [@00:14:47] - Crate of the week: osmpbf
    
      A Rust library for reading the OpenStreetMap PBF file format (*.osm.pbf). It
strives to offer the best performance using parallelization and
lazy-decoding with a simple interface while also exposing iterators for
items of every level in a PBF file.
    
    
      OpenStreetMap
      Humanitarian OpenStreetMap Team (HOT OSM)
    
  


[@00:16:40] Official Notices


  [@00:16:43] - Rust Compiler June 2022 Steering Cycle


[@00:21:24] Highlights


  [@00:21:51] (async) Rust doesn’t have to be
hard
    
      Rust Is Hard, Or: The Misery of Mainstream
Programming
      Stack Overflow Developer Survey: Most loved programming
language
    
  
  [@00:28:28] clippy book
  [@00:29:40] Rolling co-lead roles for T-compiler
  [@00:36:33] Hyper vs Rocket - Low Level vs Batteries included
    
      Rust is surprisingly
expressive
(2013) by Steve Klabnik
    
  
  [@00:40:00] Macro Patterns - A match made in heaven by Conrad Ludgate
  [@00:41:11] Web Scraping with
Rust by Gints Dreimanis
    
      Hyper with Sean McArthur
    
  
  [@00:44:09] Trivia About Rust Types: An (Authorized) Transcription of Jon Gjengset’s Twitter Thread by Jimmy Hartzell
  [@00:46:01] Rust language’s explosive popularity comes with challenges by Ed Targett
    
      “A proactive approach to more secure
code”
(2019) by Microsoft Security Response Center
      Project Zero team at Google
      [audio] Rust Foundation with Rebecca Rumbul
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Tim McNamara

Hosting Infrastructure: Jon Gjengset

Show Notes: Tim McNamara

Hosts: Tim McNamara, Nell Shamrell-Harrington and Allen Wyma.

 ]]></description>
			<content:encoded><![CDATA[ <p>Highlights from <a href="https://this-week-in-rust.org/blog/2022/06/08/this-week-in-rust-446/">This Week in Rust - Issue 446</a>,
presented by <a href="https://twitter.com/allenwyma">Allen</a> and <a href="https://twitter.com/timClicks">Tim</a>, with <a href="https://twitter.com/nellshamrell">Nell
Shamrell-Harrington</a>, co-hosting for the first time in 2022.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h4 id="000000-welcome">[@00:00:00] Welcome</h4>

<ul>
  <li>[@00:00:10] - Introduction</li>
  <li>[@00:00:52] - Agenda</li>
  <li>[@00:01:27] - Interview with Nell Shamrell-Harrington about editing This Week
in Rust
    <ul>
      <li>[@00:06:21] Submitting an article to This week in Rust</li>
      <li>TWIR Github Repository <a href="https://github.com/rust-lang/this-week-in-rust">github.com/rust-lang/this-week-in-rust</a></li>
      <li>TWIR Twitter account <a href="https://twitter.com/thisweekinrust">@thisweekinrust</a></li>
      <li>[@00:07:42] Call for volunteers to co-host an episode</li>
    </ul>
  </li>
  <li>[@00:08:38] - <a href="https://news.ycombinator.com/item?id=31616966">Quote of the
week</a>
    <blockquote>
      <p>I wrote a bespoke time-series database in Rust a few years ago, and it has
had exactly one issue since I stood it up in production, and that was due to
pessimistic filesystem access patterns, rather than the language. This thing
is handling hundreds of thousands of inserts per second, and it’s even
threaded.</p>

      <p>Given that I’ve been programming professionally for over a decade in Python,
Perl, Ruby, C, C++, Javascript, Java, and Rust, I’ll pick Rust absolutely
any time that I want something running that I won’t get called at 3 AM to
fix. It probably took me 5 times as long to write it as if I did it in Go or
Python, but I guarantee it’s saved me 10 times as much time I would have
otherwise spent triaging, debugging, and running disaster recovery.</p>
    </blockquote>
    <ul>
      <li>“<a href="https://www.bloomberg.com/company/stories/configuring-uwsgi-production-deployment/">Configuring uWSGI for Production
Deployment</a>”
(2019) by at Peter Sperl and Ben Green from Bloomberg</li>
      <li>uWSGI’s  <a href="https://uwsgi-docs.readthedocs.io/en/latest/Options.html#max-requests">max-requests</a> and <a href="https://uwsgi-docs.readthedocs.io/en/latest/Options.html#max-worker-lifetime">max-worker-lifetime</a> options are intended to reduce the chance of memory leaks affecting production workloads</li>
    </ul>
  </li>
  <li>[@00:14:47] - <a href="https://lib.rs/crates/osmpbf">Crate of the week: <code>osmpbf</code></a>
    <blockquote>
      <p>A Rust library for reading the OpenStreetMap PBF file format (*.osm.pbf). It
strives to offer the best performance using parallelization and
lazy-decoding with a simple interface while also exposing iterators for
items of every level in a PBF file.</p>
    </blockquote>
    <ul>
      <li><a href="https://www.openstreetmap.org">OpenStreetMap</a></li>
      <li><a href="https://www.hotosm.org/">Humanitarian OpenStreetMap Team</a> (HOT OSM)</li>
    </ul>
  </li>
</ul>

<h4 id="001640-official-notices">[@00:16:40] Official Notices</h4>

<ul>
  <li>[@00:16:43] - <a href="https://blog.rust-lang.org/inside-rust/2022/06/03/jun-steering-cycle.html">Rust Compiler June 2022 Steering Cycle</a></li>
</ul>

<h4 id="002124-highlights">[@00:21:24] Highlights</h4>

<ul>
  <li>[@00:21:51] <a href="https://itsallaboutthebit.com/async-simple/">(async) Rust doesn’t have to be
hard</a>
    <ul>
      <li><a href="https://hirrolot.github.io/posts/rust-is-hard-or-the-misery-of-mainstream-programming.html">Rust Is Hard, Or: The Misery of Mainstream
Programming</a></li>
      <li><a href="https://survey.stackoverflow.co/2022/#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages">Stack Overflow Developer Survey: Most loved programming
language</a></li>
    </ul>
  </li>
  <li>[@00:28:28] <a href="https://github.com/rust-lang/rust-clippy/pull/7359">clippy book</a></li>
  <li>[@00:29:40] <a href="https://github.com/rust-lang/rfcs/pull/3262">Rolling co-lead roles for T-compiler</a></li>
  <li>[@00:36:33] <a href="https://www.shuttle.rs/blog/2022/06/01/hyper-vs-rocket">Hyper vs Rocket - Low Level vs Batteries included</a>
    <ul>
      <li><a href="https://steveklabnik.com/writing/rust-is-surprisingly-expressive">Rust is surprisingly
expressive</a>
(2013) by Steve Klabnik</li>
    </ul>
  </li>
  <li>[@00:40:00] <a href="https://conradludgate.com/posts/macros_match">Macro Patterns - A match made in heaven</a> by Conrad Ludgate</li>
  <li>[@00:41:11] <a href="https://www.scrapingbee.com/blog/web-scraping-rust/">Web Scraping with
Rust</a> by Gints Dreimanis
    <ul>
      <li><a href="https://rustacean-station.org/episode/045-sean-arthur/">Hyper with Sean McArthur</a></li>
    </ul>
  </li>
  <li>[@00:44:09] <a href="https://www.thecodedmessage.com/posts/trivia-rust-types/">Trivia About Rust Types: An (Authorized) Transcription of Jon Gjengset’s Twitter Thread</a> by Jimmy Hartzell</li>
  <li>[@00:46:01] <a href="https://thestack.technology/rust-language-explosive-growth-challenges-rust-governance/">Rust language’s explosive popularity comes with challenges</a> by Ed Targett
    <ul>
      <li>“<a href="https://msrc-blog.microsoft.com/2019/07/16/a-proactive-approach-to-more-secure-code/">A proactive approach to more secure
code</a>”
(2019) by Microsoft Security Response Center</li>
      <li><a href="https://googleprojectzero.blogspot.com/">Project Zero</a> team at Google</li>
      <li>[audio] <a href="https://rustacean-station.org/episode/rebecca-rumbul/">Rust Foundation with Rebecca Rumbul</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Tim McNamara</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo">Jon Gjengset</a></p>

<p>Show Notes: Tim McNamara</p>

<p>Hosts: <a href="https://twitter.com/timClicks">Tim McNamara</a>, <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a> and <a href="https://twitter.com/allenwyma">Allen Wyma</a>.</p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-06-08-twir-446.mp3" length="27035648" type="audio/mpeg"/>
			<itunes:duration>00:56:19</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/andrew-kelley/</link>
			<pubDate>Fri, 24 Jun 2022 16:05:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/andrew-kelley/</guid>
			

			<title><![CDATA[ Zig with Andrew Kelley ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Andrew Kelley, creator of Zig. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Andrew Kelley, creator of Zig. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:51] - Andrew’s introduction
  [@2:55] - Rust vs Zig
  [@5:27] - What is undefined behavior (UB) and what causes it?
  [@11:37] - How does Zig deal with undefined behavior?
  [@16:09] - How well does Zig work in production?
  [@22:46] - Deeper dive into Andrew’s programming background
  [@33:35] - Zig’s mission statement and what they’re doing as a non-profit
  [@37:38] - Zig’s update release management
  [@40:06] - Andrew’s OkCupid project
  [@42:20] - Andrew’s preparations and motivations for making a language
  [@46:11] - Zig using LLVM
  [@49:12] - What’s next for Zig?
  [@54:20] - Parting thoughts


Other Resources

  Zig’s Github
  Andrew’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://andrewkelley.me/">Andrew Kelley</a>, creator of <a href="https://ziglang.org/">Zig</a>. Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:51] - Andrew’s introduction</li>
  <li>[@2:55] - Rust vs Zig</li>
  <li>[@5:27] - What is <a href="https://doc.rust-lang.org/reference/behavior-considered-undefined.html">undefined behavior (UB)</a> and what causes it?</li>
  <li>[@11:37] - How does Zig deal with undefined behavior?</li>
  <li>[@16:09] - How well does Zig work in production?</li>
  <li>[@22:46] - Deeper dive into Andrew’s programming background</li>
  <li>[@33:35] - Zig’s mission statement and what they’re doing as a non-profit</li>
  <li>[@37:38] - Zig’s update release management</li>
  <li>[@40:06] - Andrew’s <a href="https://andrewkelley.me/post/full-time-zig.html">OkCupid project</a></li>
  <li>[@42:20] - Andrew’s preparations and motivations for making a language</li>
  <li>[@46:11] - Zig using <a href="https://llvm.org/">LLVM</a></li>
  <li>[@49:12] - What’s next for Zig?</li>
  <li>[@54:20] - Parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/ziglang">Zig’s Github</a></li>
  <li><a href="https://github.com/andrewrk">Andrew’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-06-24-andrew-kelley.mp3" length="54172108" type="audio/mpeg"/>
			<itunes:duration>56:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rust-1.60-1.61/</link>
			<pubDate>Tue, 21 Jun 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rust-1.60-1.61/</guid>
			

			<title><![CDATA[ What's New in Rust 1.60 and 1.61 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.60 and 1.61 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.60 and 1.61 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:15] - Rust 1.60


  [@01:45] - Source-Based Code Coverage
    
      -Cinstrument-coverage documentation
      grcov
      cargo-llvm-cov
    
  
  [@08:21] - cargo --timings
    
      Example output for Cargo build
      Cargo documentation
    
  
  [@10:21] - New syntax for Cargo features
    
      Optional dependencies
      Dependency features
    
  
  [@17:06] - Incremental compilation status
    
      Incremental disabled in 1.59
    
  
  [@20:06] - Instant monotonicity guarantees
    
      “And now we come upon a sad state of affairs”
      PR moving from Mutex to AtomicU64
      PR removing backsliding protection
    
  
  [@26:01] - Stabilized APIs
    
      Arc::new_cyclic
        
          Source for Arc::new_cyclic
        
      
      &lt;[u8]&gt;::escape_ascii
      usize::abs_diff
    
  
  [@32:27] - Changelog deep-dive
    
      Stabilize #[cfg(panic = "..")]
      Port cargo from toml-rs to toml_edit
        
          toml_edit crate
        
      
      Adding OpenWRT target
        
          OpenWRT
        
      
    
  


[@36:59] - Rust 1.61


  [@36:59] - Custom exit codes from main
    
      Termination
      ExitCode
      Why ExitCode is opaque
      try_trait_v2
    
  
  [@45:05] - More capabilities for const fn
    
      Meta tracking issue for const fn
    
  
  [@52:20] - Static handles for locked stdio
    
      Stdout::lock
    
  
  [@54:33] - Stabilized APIs
    
      Vec::retain_mut
      &lt;*const T&gt;::offset
    
  
  [@59:22] - Changelog deep-dive
    
      std::thread::available_parallelism
        
          Respecting Linux cgroups
          Cargo dropping num_cpus
        
      
      Sparse registries RFC
        
          Implementation
          Call for testing
        
      
      Linux baseline requirements bump
        
          Likely landing in 1.64
        
      
      Compatibility Notes
      #[ignore = ".."]
      Removing “everybody loops”
        
          When rustdoc stopped looping everybody
        
      
    
  


[@1:12:55] - Rust 2024 Roadmap


  Living roadmap


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.60 and 1.61 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0115---rust-160">[@01:15] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html">Rust 1.60</a></h4>

<ul>
  <li>[@01:45] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#source-based-code-coverage">Source-Based Code Coverage</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/rustc/instrument-coverage.html"><code>-Cinstrument-coverage</code> documentation</a></li>
      <li><a href="https://github.com/mozilla/grcov"><code>grcov</code></a></li>
      <li><a href="https://github.com/taiki-e/cargo-llvm-cov"><code>cargo-llvm-cov</code></a></li>
    </ul>
  </li>
  <li>[@08:21] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#cargo---timings"><code>cargo --timings</code></a>
    <ul>
      <li><a href="https://blog.rust-lang.org/images/2022-04-07-timing.html">Example output for Cargo build</a></li>
      <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/timings.html">Cargo documentation</a></li>
    </ul>
  </li>
  <li>[@10:21] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#new-syntax-for-cargo-features">New syntax for Cargo features</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/cargo/reference/features.html#optional-dependencies">Optional dependencies</a></li>
      <li><a href="https://doc.rust-lang.org/cargo/reference/features.html#dependency-features">Dependency features</a></li>
    </ul>
  </li>
  <li>[@17:06] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#incremental-compilation-status">Incremental compilation status</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#incremental-compilation-off-by-default">Incremental disabled in 1.59</a></li>
    </ul>
  </li>
  <li>[@20:06] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#instant-monotonicity-guarantees"><code>Instant</code> monotonicity guarantees</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/commit/9d8ef1160747a4d033f21803770641f2deb32b25#diff-c0599a43ca38e854116fe267604d2f9c5b565adad68a1e0e17fc59f99e439647L252-L290">“And now we come upon a sad state of affairs”</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/83093">PR moving from <code>Mutex</code> to <code>AtomicU64</code></a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/89926">PR removing backsliding protection</a></li>
    </ul>
  </li>
  <li>[@26:01] - <a href="https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.new_cyclic"><code>Arc::new_cyclic</code></a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/blob/08871139915b95ec868aff807f224f78d00f4311/library/alloc/src/sync.rs#L408">Source for <code>Arc::new_cyclic</code></a></li>
        </ul>
      </li>
      <li><a href="https://doc.rust-lang.org/stable/std/primitive.slice.html#method.escape_ascii"><code>&lt;[u8]&gt;::escape_ascii</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/primitive.usize.html#method.abs_diff"><code>usize::abs_diff</code></a></li>
    </ul>
  </li>
  <li>[@32:27] - Changelog deep-dive
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/93658">Stabilize <code>#[cfg(panic = "..")]</code></a></li>
      <li><a href="https://github.com/rust-lang/cargo/pull/10086">Port cargo from toml-rs to toml_edit</a>
        <ul>
          <li><a href="https://docs.rs/toml_edit/"><code>toml_edit</code> crate</a></li>
        </ul>
      </li>
      <li><a href="https://github.com/rust-lang/rust/pull/92300">Adding OpenWRT target</a>
        <ul>
          <li><a href="https://openwrt.org/">OpenWRT</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="3659---rust-161">[@36:59] - <a href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html">Rust 1.61</a></h4>

<ul>
  <li>[@36:59] - <a href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html#custom-exit-codes-from-main">Custom exit codes from <code>main</code></a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/process/trait.Termination.html"><code>Termination</code></a></li>
      <li><a href="https://doc.rust-lang.org/std/process/struct.ExitCode.html"><code>ExitCode</code></a></li>
      <li><a href="https://github.com/rust-lang/rust/blob/ec21d7ea3ca8e96863f175fbd4a6bfee79529d6c/library/std/src/process.rs#L1774-L1780">Why <code>ExitCode</code> is opaque</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/84277"><code>try_trait_v2</code></a></li>
    </ul>
  </li>
  <li>[@45:05] - <a href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html#more-capabilities-for-const-fn">More capabilities for <code>const fn</code></a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/57563">Meta tracking issue for <code>const fn</code></a></li>
    </ul>
  </li>
  <li>[@52:20] - <a href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html#static-handles-for-locked-stdio">Static handles for locked stdio</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/io/struct.Stdout.html#method.lock"><code>Stdout::lock</code></a></li>
    </ul>
  </li>
  <li>[@54:33] - <a href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/1.61.0/std/vec/struct.Vec.html#method.retain_mut"><code>Vec::retain_mut</code></a></li>
      <li><a href="https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.offset"><code>&lt;*const T&gt;::offset</code></a></li>
    </ul>
  </li>
  <li>[@59:22] - Changelog deep-dive
    <ul>
      <li><a href="https://doc.rust-lang.org/std/thread/fn.available_parallelism.html"><code>std::thread::available_parallelism</code></a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/92697">Respecting Linux cgroups</a></li>
          <li><a href="https://github.com/rust-lang/cargo/pull/10427">Cargo dropping <code>num_cpus</code></a></li>
        </ul>
      </li>
      <li><a href="https://rust-lang.github.io/rfcs/2789-sparse-index.html">Sparse registries RFC</a>
        <ul>
          <li><a href="https://github.com/rust-lang/cargo/pull/10470">Implementation</a></li>
          <li><a href="https://github.com/rust-lang/blog.rust-lang.org/pull/990">Call for testing</a></li>
        </ul>
      </li>
      <li><a href="https://github.com/rust-lang/rust/pull/95026">Linux baseline requirements bump</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/95026#issuecomment-1144222893">Likely landing in 1.64</a></li>
        </ul>
      </li>
      <li><a href="https://github.com/rust-lang/rust/blob/fe5b13d681f25ee6474be29d748c65adcd91f69e/RELEASES.md#compatibility-notes">Compatibility Notes</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/92714"><code>#[ignore = ".."]</code></a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/93913/">Removing “everybody loops”</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/73566">When <code>rustdoc</code> stopped looping everybody</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="11255---rust-2024-roadmap">[@1:12:55] - <a href="https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html">Rust 2024 Roadmap</a></h4>

<ul>
  <li><a href="https://lang-team.rust-lang.org/roadmaps/roadmap-2024.html">Living roadmap</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-06-21-rust-1.60-1.61.mp3" length="90996024" type="audio/mpeg"/>
			<itunes:duration>01:15:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/grant-gurvis/</link>
			<pubDate>Fri, 17 Jun 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/grant-gurvis/</guid>
			

			<title><![CDATA[ Fig with Grant Gurvis ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Grant Gurvis, Founding Engineer at Fig. Fig adds IDE-style autocomplete to your existing terminal.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Grant Gurvis, Founding Engineer at Fig. Fig adds IDE-style autocomplete to your existing terminal.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:32] - Grant’s bio and Fig introduction
  [@4:25] - Fig’s support and integration expansion
  [@6:05] - Differentiating Warp and Fig
  [@8:38] - Changes that need to happen in order to support Linux and Windows
  [@10:36] - Fig’s switch to Rust
  [@18:40] - Grant’s experience using different programming platforms
  [@25:06] - Fig’s monetization plans
  [@26:53] - Fig’s user reviews and feedback
  [@29:55] - Opportunites for Rust engineers


Other Resources

  Fig’s GitHub
  Grant’s GitHub


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://ggurvis.com/">Grant Gurvis</a>, Founding Engineer at <a href="https://fig.io/">Fig</a>. Fig adds IDE-style autocomplete to your existing terminal.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:32] - Grant’s bio and <a href="https://fig.io/">Fig</a> introduction</li>
  <li>[@4:25] - Fig’s support and integration expansion</li>
  <li>[@6:05] - Differentiating <a href="https://www.warp.dev/">Warp</a> and Fig</li>
  <li>[@8:38] - Changes that need to happen in order to support Linux and Windows</li>
  <li>[@10:36] - Fig’s switch to Rust</li>
  <li>[@18:40] - Grant’s experience using different programming platforms</li>
  <li>[@25:06] - Fig’s monetization plans</li>
  <li>[@26:53] - Fig’s user reviews and feedback</li>
  <li>[@29:55] - Opportunites for Rust engineers</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/withfig">Fig’s GitHub</a></li>
  <li><a href="https://github.com/grant0417">Grant’s GitHub</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e074-grant-gurvis.mp3" length="29934237" type="audio/mpeg"/>
			<itunes:duration>31:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/twir-445/</link>
			<pubDate>Thu, 16 Jun 2022 15:00:59 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/twir-445/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 445 ]]></title>
			<itunes:summary><![CDATA[ Highlights from This Week in Rust - Issue
445,
presented by Tim and Allen.
Themes for the discussion include getting work as a Rust developer, creating a
specification for Rust, and the health of the community.

 ]]></itunes:summary>
			<description><![CDATA[ Highlights from This Week in Rust - Issue
445,
presented by Tim and Allen.
Themes for the discussion include getting work as a Rust developer, creating a
specification for Rust, and the health of the community.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources



[@00:00] Welcome


  [@00:10] - Introduction
  [@01:49] - Agenda
  [@02:44] - Quote of the week
    
      Rust is a perfect language for a dad like me, who every day puts kids to
sleep, and tired after long day of work and chores, can sit down and possibly 
write some code for the hobby open source project, even when he’s already just
half awake. And it usually just works, tend to be robust and make the day
feel extra productive.
    
  
  [@04:14] - Crate of the week
    
      Tectonic
      d3.js
      matplotlib
    
  


[@07:26] Official Notices


  [@07:30] - Concluding the events of last November


[@14:20] Highlights


  [@14:27] - [video] Rust makes you feel like a GENIUS by Tris Oaten
    
      [video] Wat lightning talk
      [video] Rust: Your code can be perfect
    
  
  [@18:32] - Builder Lite pattern by
matklad
  [@22:06] - The Rust Jobs Market by Alfie John
  [@26:55] - Introducing the Ferrocene Language Specification by Ferrous Systems
    
      Ferrous Systems and AdaCore to join forces on Ferrocene
      [audio] Rust Safety with Quentin Ochem and Florian
Gilcher
      High Assurance Rust
    
  
  [@32:12] Simple rust interview questions by Maciej
Flak
  [@36:36] PR 97046: improve case conversion happy
path by Conrad Ludgate


Other items


  [@39:12] Call for Participation: mirrord
  [@39:25] RFC: create a “types team”
  [@40:37] PR: improve error message for E0081


Credits

Intro Theme: Aerocity

Audio Editing: Aleksandar Nikolic

Hosting Infrastructure: Jon Gjengset

Show Notes: Tim McNamara

Hosts: Tim McNamara and Allen Wyma.

 ]]></description>
			<content:encoded><![CDATA[ <p>Highlights from <a href="https://this-week-in-rust.org/blog/2022/06/01/this-week-in-rust-445/">This Week in Rust - Issue
445</a>,
presented by <a href="https://twitter.com/timClicks">Tim</a> and <a href="https://twitter.com/allenwyma">Allen</a>.
Themes for the discussion include getting work as a Rust developer, creating a
specification for Rust, and the health of the community.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h4 id="0000-welcome">[@00:00] Welcome</h4>

<ul>
  <li>[@00:10] - Introduction</li>
  <li>[@01:49] - Agenda</li>
  <li>[@02:44] - <a href="https://www.reddit.com/r/rust/comments/uxx7w8/this_week_in_rust_444/ia1cwn6">Quote of the week</a>
    <blockquote>
      <p>Rust is a perfect language for a dad like me, who every day puts kids to
sleep, and tired after long day of work and chores, can sit down and possibly 
write some code for the hobby open source project, even when he’s already just
half awake. And it usually just works, tend to be robust and make the day
feel extra productive.</p>
    </blockquote>
  </li>
  <li>[@04:14] - <a href="https://github.com/DJDuque/pgfplots">Crate of the week</a>
    <ul>
      <li><a href="https://tectonic-typesetting.github.io/">Tectonic</a></li>
      <li><a href="https://d3js.org/">d3.js</a></li>
      <li><a href="https://matplotlib.org/">matplotlib</a></li>
    </ul>
  </li>
</ul>

<h4 id="0726-official-notices">[@07:26] Official Notices</h4>

<ul>
  <li>[@07:30] - <a href="https://blog.rust-lang.org/inside-rust/2022/05/26/Concluding-events-mods.html">Concluding the events of last November</a></li>
</ul>

<h4 id="1420-highlights">[@14:20] Highlights</h4>

<ul>
  <li>[@14:27] - [video] <a href="https://www.youtube.com/watch?v=0rJ94rbdteE">Rust makes you feel like a GENIUS</a> by <a href="https://twitter.com/0atman">Tris Oaten</a>
    <ul>
      <li>[video] <a href="https://www.destroyallsoftware.com/talks/wat">Wat</a> lightning talk</li>
      <li>[video] <a href="https://www.youtube.com/watch?v=IA4q0lzmyfM">Rust: Your code can be perfect</a></li>
    </ul>
  </li>
  <li>[@18:32] - <a href="https://matklad.github.io/2022/05/29/builder-lite.html">Builder Lite</a> pattern by
<a href="https://github.com/matklad">matklad</a></li>
  <li>[@22:06] - <a href="https://www.rustjobs.com/blog/the-rust-jobs-market.html">The Rust Jobs Market</a> by Alfie John</li>
  <li>[@26:55] - <a href="https://ferrous-systems.com/blog/ferrocene-language-specification/">Introducing the Ferrocene Language Specification</a> by Ferrous Systems
    <ul>
      <li><a href="https://ferrous-systems.com/blog/ferrous-systems-adacore-joining-forces/">Ferrous Systems and AdaCore to join forces on Ferrocene</a></li>
      <li>[audio] <a href="https://rustacean-station.org/episode/067-quentin-ochem-florian-gilcher/">Rust Safety with Quentin Ochem and Florian
Gilcher</a></li>
      <li><a href="https://highassurance.rs/">High Assurance Rust</a></li>
    </ul>
  </li>
  <li>[@32:12] <a href="https://flakm.github.io/posts/rust_interview_questions/">Simple rust interview questions</a> by <a href="https://github.com/FlakM">Maciej
Flak</a></li>
  <li>[@36:36] <a href="https://github.com/rust-lang/rust/pull/97046">PR 97046: improve case conversion happy
path</a> by <a href="https://twitter.com/conradludgate">Conrad Ludgate</a></li>
</ul>

<h4 id="other-items">Other items</h4>

<ul>
  <li>[@39:12] <a href="https://github.com/metalbear-co/mirrord/issues/53">Call for Participation: mirrord</a></li>
  <li>[@39:25] <a href="https://github.com/rust-lang/rfcs/pull/3254">RFC: create a “types team”</a></li>
  <li>[@40:37] <a href="https://github.com/rust-lang/rust/pull/97456">PR: improve error message for E0081</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Aleksandar Nikolic</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/timClicks">Tim McNamara</a></p>

<p>Hosts: <a href="https://twitter.com/timClicks">Tim McNamara</a> and <a href="https://twitter.com/allenwyma">Allen Wyma</a>.</p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-06-01-twir-445.mp3" length="20205010" type="audio/mpeg"/>
			<itunes:duration>00:42:06</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/rebecca-rumbul/</link>
			<pubDate>Fri, 10 Jun 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/rebecca-rumbul/</guid>
			

			<title><![CDATA[ Rust Foundation with Rebecca Rumbul ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Rebecca Rumbul, Executive Director and CEO at Rust Foundation. The Rust Foundation is an independent non-profit organization to steward the Rust programming language and ecosystem, with a unique focus on supporting the set of maintainers that govern and develop the project.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Rebecca Rumbul, Executive Director and CEO at Rust Foundation. The Rust Foundation is an independent non-profit organization to steward the Rust programming language and ecosystem, with a unique focus on supporting the set of maintainers that govern and develop the project.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@1:00] - Rebecca’s Bio
  [@2:36] - The Rust Foundation
  [@7:27] - How the Rust Foundation deals with legal work
  [@9:26] - How the Rust Foundation helps all contributors
  [@12:47] - Scoring matrix to measure the value
  [@15:20] - DevX Initiative &amp; Ernest Kissiedu
  [@17:14] - Competing in funding projects
  [@20:29] - Applying for a membership in The Rust Foundation
  [@23:25] - Company membership benefits
  [@28:34] - The Rust Foundation can potentially connect people and projects
  [@31:08] - Board member Nell Shamrell-Harrington &amp; The Rust Foundation sponsoring
  [@35:00] - Rebecca on making tough decisions
  [@36:46] - Nell’s weekly newsletter
  [@40:20] - What makes a company pay for a Platinum membership?
  [@44:21] - Rebecca’s background
  [@49:28] - Anything difficult in running The Rust Foundation?
  [@51:16] - Future plans for Rust Foundation
  [@54:12] - Contacting The Rust Foundation
  [@54:48] - Parting words


Other Resources

Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/rebeccarumbul">Rebecca Rumbul</a>, Executive Director and CEO at <a href="https://foundation.rust-lang.org/">Rust Foundation</a>. The Rust Foundation is an independent non-profit organization to steward the Rust programming language and ecosystem, with a unique focus on supporting the set of maintainers that govern and develop the project.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@1:00] - Rebecca’s <a href="https://twitter.com/rebeccarumbul">Bio</a></li>
  <li>[@2:36] - <a href="https://foundation.rust-lang.org/">The Rust Foundation</a></li>
  <li>[@7:27] - How the Rust Foundation deals with legal work</li>
  <li>[@9:26] - How the Rust Foundation helps all contributors</li>
  <li>[@12:47] - Scoring matrix to measure the value</li>
  <li>[@15:20] - <a href="https://devxinitiative.org/">DevX Initiative</a> &amp; <a href="https://github.com/ernestkissiedu">Ernest Kissiedu</a></li>
  <li>[@17:14] - Competing in funding projects</li>
  <li>[@20:29] - Applying for a <a href="https://foundation.rust-lang.org/members/">membership</a> in The Rust Foundation</li>
  <li>[@23:25] - Company membership benefits</li>
  <li>[@28:34] - The Rust Foundation can potentially connect people and projects</li>
  <li>[@31:08] - Board member <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a> &amp; The Rust Foundation sponsoring</li>
  <li>[@35:00] - Rebecca on making tough decisions</li>
  <li>[@36:46] - Nell’s weekly newsletter</li>
  <li>[@40:20] - What makes a company pay for a Platinum membership?</li>
  <li>[@44:21] - Rebecca’s <a href="https://www.linkedin.com/in/rebecca-rumbul-96a5441a/">background</a></li>
  <li>[@49:28] - Anything difficult in running The Rust Foundation?</li>
  <li>[@51:16] - Future plans for Rust Foundation</li>
  <li>[@54:12] - <a href="https://foundation.rust-lang.org/info/contact/">Contacting The Rust Foundation</a></li>
  <li>[@54:48] - Parting words</li>
</ul>

<h2 id="other-resources">Other Resources</h2>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e073-rebecca-rumbul.mp3" length="55601613" type="audio/mpeg"/>
			<itunes:duration>56:47</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/twir-444/</link>
			<pubDate>Wed, 08 Jun 2022 00:50:30 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/twir-444/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 444 ]]></title>
			<itunes:summary><![CDATA[ Highlights from This Week in Rust - Issue
444. This
week features a juicy post-mortem, open source, open hardware, and lots of news
from around the Rust ecosystem.
 ]]></itunes:summary>
			<description><![CDATA[ Highlights from This Week in Rust - Issue
444. This
week features a juicy post-mortem, open source, open hardware, and lots of news
from around the Rust ecosystem.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources



[@00:00] Welcome


  [@00:10] - Introduction
  [@00:50] - Agenda
  [@01:23] - Quote of the week
    
      This is the difference in approaches of the two languages. In C++ if the
code is vulnerable, the blame is on the programmer. In Rust if the code is
vulnerable, Rust considers it a failure of the language, and takes
responsibility to stop even “bad” programmers from writing vulnerable code.
I can’t stress enough how awesome it is that I can be a careless fool, and
still write perfectly robust highly multi-threaded code that never crashes.
    
    
      [@03:09] Allen: Rust is both good and bad at marketing
    
  
  [@03:30] - Crate of the week
    
      [@04:15] - Tim and Sean discuss parsing in episode
2022-05-26 at 47:10
    
  


[@05:10] Official Notices


  [@05:22] - Announcing Rust 1.61.0
    
      Custom exit codes from main
        
          [Note from Tim: I say “termination crate”, but should have said “Termination trait”.]
        
      
      More capabilities for const fn
        
          “Basic” handling of fn pointers
          Add trait bounds to a const fn
          dyn trait and impl Trait support
        
      
      Stdio handles can be locked directly
      Several stabilized APIs
    
  


[@08:07] Highlights


  [@08:27] - Developer survey: JavaScript and Python reign, but Rust is rising
    
      [@09:09] - Sean: “Rust adoption has nearly quadrupled in the last two years, going from
 600k developers in Q1 2022 to 2.2m in Q1 2022.”
    
  
  [@13:00] - Redust by Will Nelson
    
      [@13:50] Allen: I think the comments are actually more interesting. They
are starting to point to something really—I don’t know whether it’s
good or bad for the community—where, you know, people start rolling
their own crates instead of, say, doing stuff upstream. It kind of goes back
to what Tim was complaining about before [Easy Mode for
Rust, discussed on This Week in Rust - Issue 441]—well, lightly
pointing out to people out there—that okay, now which crate should I
use?
      [@16:20] Tim: Open source is really complicated. You need to talk to
people. That’s … challenging. [Laughs]
      [@16:40] Josh Triplett on Building with
Rust,
 discussing the orphan rule
      [@16:50] Sean: Rust is not very good at sharing between crates.
    
  
  [@19:07] - Rust: A Critical
Retrospective by bunnie
    
      Links
        
          The Hardware Hacker, bunnie’s autobiography
          [video] “Shenzhen: An Alternative to the American way of
Innovation”
          [@28:56] A Programmer’s Brain, by Felienne Hermans, about working memory
in programmers.
        
      
      [@19:58] - Hacking the Xbox book
      [@20:04] - [video] Linux.conf.au 2013
  keynote
  discussing Chumby and creating a hardware startup
      [@20:20] - betrusted.io, a secure communications system that
  runs the Xous microkernel operating  system
      [@21:07] - Tim: Security-critical applications have issues when they … rely on Rust.
  There’s one quote I want to pull out of the post, which is: “I’m not sure
  if there is even a good solution to this problem, but, if you are
  super-paranoid and your goal is to be able to build trustable firmware, be
  wary of Rust’s expansive software supply chain attack surface!”
      [@26:09] - Sean: bunnie I think that you are absolutely, totally, qualified.
      [@30:17] - Allen: I did see a macro that he put in there. … I forget
extact. It was very crazy and I was like, “Come on, no one’s every going to
write something crazy like this” and then I took a look at the RFC that
Sean’s gonna do and in the comments there was a crazy one like that and I
was like, “oh wow, this guy’s point’s valid”.
      [@30:49] - Hyrum’s Law, named after Hyrum
Wright.
        
          With a sufficient number of users of an API, it does not matter what you
promise in the contract: all observable behaviors of your system will be
depended on by somebody.
        
      
    
  
  [@31:50] Fixing memory leaks by Lily Mara
    
      [@34:01] - tracing crate, created as part of
 the tokio project
      [@32:33] - “Is it possible to cause a memory leak in
Rust?” - Stack Overflow
      [@33:06] -
std::ops::Drop trait
documentation
      std::mem::forget and
Box::leak
for intentionally leaking memory
      Out-of memory (OOM) killer internals page from the Linux memory
management wiki
      [@37:54] tracing::instrument::Instrument trait, which fixes this issue
    
  
  [@41:29] Building a Cloud Database from Scratch: Why We Moved from C++ to
Rust
by Yingjun Wu
    
      GAT (generic associated traits)
      Allen: [C++ vs Rust] is like apples vs apple pie.
    
  
  [@45:50] - [video] Deref and Drop traits by Dan
Chiarlone
    
      “Smart pointers”,
chapter 15 of The Rust Programming Language.
      std::ops::Deref trait documentation
    
  
  [@46:40] - Optimizing the size of your Rust
binaries by Sylvain Kerkour
    
      cargo-bloat, for determining
the size impact of code and dependencies
      twiggy, a similar tool for WASM targets
    
  
  [@48:10] - RFC: Add more support for fallible allocations in
Vec by Daniel Paoliello
and contributors
    
      Sean: This RFC is intended as a stop-gap, to unblock on-going work like—I
imagine—adding Rust to the Linux kernel while better long-term
solutions are explored.
      “Example: Implementing Vec” chapter of the Rustnomicon, describes how
Vec’s memory allocation works in detail
      Never type reference documentation
      [@54:40] Tim: I want to bring out a comment that was made to me in private,
because I’ve been toying with the idea of becoming a rustc contributor,
particularly on the standard library side, and Ashley
Mannix sent me a really lovely note, which
was: “Rust is also chronically friendly so nobody gets chewed out for making mistakes. They happen. They get caught. They get patched. You learn something new. It’s ok.”.
    
  
  [@55:51] - How we use Rust, SQLx and Rocket for Oso Cloud by Steve Olsen


Other items


  [@57:20] Meetups
  [@57:31] Major release announcements
    
      DataFusion 8.0
      IntelliJ Rust plugin 2022.1
    
  
  [@57:40] Join us in the #this-week-in-rust channel of the Rustacean Station Discord server


Credits

Intro Theme: Aerocity

Audio Editing: Aleksandar Nikolic

Hosting Infrastructure: Jon Gjengset

Show Notes: Tim McNamara

Hosts: Tim McNamara, Sean Chen, and Allen Wyma.

 ]]></description>
			<content:encoded><![CDATA[ <p>Highlights from <a href="https://this-week-in-rust.org/blog/2022/05/25/this-week-in-rust-444/">This Week in Rust - Issue
444</a>. This
week features a juicy post-mortem, open source, open hardware, and lots of news
from around the Rust ecosystem.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h4 id="0000-welcome">[@00:00] Welcome</h4>

<ul>
  <li>[@00:10] - Introduction</li>
  <li>[@00:50] - Agenda</li>
  <li>[@01:23] - <a href="https://lobste.rs/s/wiavtb/rust_critical_retrospective#c_jkfhpb">Quote of the week</a>
    <blockquote>
      <p>This is the difference in approaches of the two languages. In C++ if the
code is vulnerable, the blame is on the programmer. In Rust if the code is
vulnerable, Rust considers it a failure of the language, and takes
responsibility to stop even “bad” programmers from writing vulnerable code.
I can’t stress enough how awesome it is that I can be a careless fool, and
still write perfectly robust highly multi-threaded code that never crashes.</p>
    </blockquote>
    <ul>
      <li>[@03:09] Allen: Rust is both good and bad at marketing</li>
    </ul>
  </li>
  <li>[@03:30] - <a href="https://docs.rs/rustdoc-types">Crate of the week</a>
    <ul>
      <li>[@04:15] - Tim and Sean discuss parsing in <a href="https://rustacean-station.org/episode/071-twir-442/">episode
2022-05-26</a> at 47:10</li>
    </ul>
  </li>
</ul>

<h4 id="0510-official-notices">[@05:10] Official Notices</h4>

<ul>
  <li>[@05:22] - <a href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html">Announcing Rust 1.61.0</a>
    <ul>
      <li>Custom exit codes from main
        <ul>
          <li>[Note from Tim: I say “termination crate”, but should have said “Termination trait”.]</li>
        </ul>
      </li>
      <li>More capabilities for const fn
        <ul>
          <li>“Basic” handling of fn pointers</li>
          <li>Add trait bounds to a const fn</li>
          <li>dyn trait and impl Trait support</li>
        </ul>
      </li>
      <li>Stdio handles can be locked directly</li>
      <li>Several stabilized APIs</li>
    </ul>
  </li>
</ul>

<h4 id="0807-highlights">[@08:07] Highlights</h4>

<ul>
  <li>[@08:27] - <a href="https://www.infoworld.com/article/3661248/developer-survey-javascript-and-python-reign-but-rust-is-rising.html">Developer survey: JavaScript and Python reign, but Rust is rising</a>
    <ul>
      <li>[@09:09] - Sean: “Rust adoption has nearly quadrupled in the last two years, going from
 600k developers in Q1 2022 to 2.2m in Q1 2022.”</li>
    </ul>
  </li>
  <li>[@13:00] - <a href="https://github.com/appellation/redust">Redust</a> by <a href="https://wnelson.dev/">Will Nelson</a>
    <ul>
      <li>[@13:50] Allen: I think the comments are actually more interesting. They
are starting to point to something really—I don’t know whether it’s
good or bad for the community—where, you know, people start rolling
their own crates instead of, say, doing stuff upstream. It kind of goes back
to what <a href="https://rustacean-station.org/episode/069-twir-441/">Tim was complaining about before</a> [Easy Mode for
Rust, discussed on This Week in Rust - Issue 441]—well, lightly
pointing out to people out there—that okay, now which crate should I
use?</li>
      <li>[@16:20] Tim: Open source is really complicated. You need to talk to
people. That’s … challenging. [Laughs]</li>
      <li>[@16:40] <a href="https://anchor.fm/building-with-rust/episodes/Josh-Triplett-on-Building-the-Build-System-of-his-Dreams-e1dt81c">Josh Triplett on Building with
Rust</a>,
 discussing the orphan rule</li>
      <li>[@16:50] Sean: Rust is not very good at sharing between crates.</li>
    </ul>
  </li>
  <li>[@19:07] - <a href="https://www.bunniestudios.com/blog/?p=6375">Rust: A Critical
Retrospective</a> by <a href="https://en.wikipedia.org/wiki/Andrew_Huang_(hacker)">bunnie</a>
    <ul>
      <li>Links
        <ul>
          <li><a href="https://nostarch.com/hardwarehackerpaperback">The Hardware Hacker</a>, bunnie’s autobiography</li>
          <li>[video] “<a href="https://youtu.be/S39fhrGjr4U">Shenzhen: An Alternative to the American way of
Innovation</a>”</li>
          <li>[@28:56] <em>A Programmer’s Brain</em>, by Felienne Hermans, about working memory
in programmers.</li>
        </ul>
      </li>
      <li>[@19:58] - <a href="https://www.hackingthexbox.com/">Hacking the Xbox</a> book</li>
      <li>[@20:04] - [video] <a href="https://mirror.linux.org.au/pub/linux.conf.au/2013/mp4/Keynote_Andrew_Bunnie_Huang.mp4">Linux.conf.au 2013
  keynote</a>
  discussing <a href="https://en.wikipedia.org/wiki/Chumby">Chumby</a> and creating a hardware startup</li>
      <li>[@20:20] - <a href="https://betrusted.io/">betrusted.io</a>, a secure communications system that
  runs the <a href="https://betrusted.io/xous-book/">Xous microkernel operating  system</a></li>
      <li>[@21:07] - Tim: Security-critical applications have issues when they … rely on Rust.
  There’s one quote I want to pull out of the post, which is: “I’m not sure
  if there is even a good solution to this problem, but, if you are
  super-paranoid and your goal is to be able to build trustable firmware, be
  wary of Rust’s expansive software supply chain attack surface!”</li>
      <li>[@26:09] - Sean: bunnie I think that you are absolutely, totally, qualified.</li>
      <li>[@30:17] - Allen: I did see a macro that he put in there. … I forget
extact. It was very crazy and I was like, “Come on, no one’s every going to
write something crazy like this” and then I took a look at the RFC that
Sean’s gonna do and in the comments there was a crazy one like that and I
was like, “oh wow, this guy’s point’s valid”.</li>
      <li>[@30:49] - <a href="https://www.hyrumslaw.com/">Hyrum’s Law</a>, named after <a href="https://twitter.com/hyrumwright">Hyrum
Wright</a>.
        <blockquote>
          <p>With a sufficient number of users of an API, it does not matter what you
promise in the contract: all observable behaviors of your system will be
depended on by somebody.</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>[@31:50] <a href="https://onesignal.com/blog/solving-memory-leaks-in-rust/">Fixing memory leaks</a> by <a href="https://twitter.com/TheLily_Mara">Lily Mara</a>
    <ul>
      <li>[@34:01] - <a href="https://docs.rs/tracing"><code>tracing</code></a> crate, created as part of
 the <a href="https://tokio.rs/tokio/topics/tracing">tokio</a> project</li>
      <li>[@32:33] - “<a href="https://stackoverflow.com/q/55553048/395287">Is it possible to cause a memory leak in
Rust?</a>” - Stack Overflow</li>
      <li>[@33:06] -
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html"><code>std::ops::Drop</code></a> trait
documentation</li>
      <li><a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a> and
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak"><code>Box::leak</code></a>
for intentionally leaking memory</li>
      <li><a href="https://linux-mm.org/OOM_Killer">Out-of memory (OOM) killer internals page</a> from the <a href="https://linux-mm.org/">Linux memory
management wiki</a></li>
      <li>[@37:54] <a href="https://docs.rs/tracing/0.1.34/tracing/instrument/trait.Instrument.html"><code>tracing::instrument::Instrument</code> trait</a>, which fixes this issue</li>
    </ul>
  </li>
  <li>[@41:29] <a href="https://singularity-data.com/blog/building-a-cloud-database-from-scratch-why-we-moved-from-cpp-to-rust/">Building a Cloud Database from Scratch: Why We Moved from C++ to
Rust</a>
by <a href="https://twitter.com/YingjunWu">Yingjun Wu</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2021/08/03/GATs-stabilization-push.html">GAT (generic associated traits)</a></li>
      <li>Allen: [C++ vs Rust] is like apples vs apple pie.</li>
    </ul>
  </li>
  <li>[@45:50] - [video] <a href="https://www.youtube.com/watch?v=Nlc3HdVyaNg">Deref and Drop traits</a> by <a href="https://twitter.com/danologue">Dan
Chiarlone</a>
    <ul>
      <li>“<a href="https://doc.rust-lang.org/book/ch15-00-smart-pointers.html">Smart pointers</a>”,
chapter 15 of <em>The Rust Programming Language</em>.</li>
      <li><a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"><code>std::ops::Deref</code> trait</a> documentation</li>
    </ul>
  </li>
  <li>[@46:40] - <a href="https://kerkour.com/optimize-rust-binary-size">Optimizing the size of your Rust
binaries</a> by <a href="https://kerkour.com/">Sylvain Kerkour</a>
    <ul>
      <li><a href="https://github.com/RazrFalcon/cargo-bloat"><code>cargo-bloat</code></a>, for determining
the size impact of code and dependencies</li>
      <li><a href="https://github.com/rustwasm/twiggy"><code>twiggy</code></a>, a similar tool for WASM targets</li>
    </ul>
  </li>
  <li>[@48:10] - <a href="https://github.com/rust-lang/rfcs/pull/3271">RFC: Add more support for fallible allocations in
Vec</a> by <a href="https://github.com/dpaoliello">Daniel Paoliello</a>
and contributors
    <ul>
      <li>Sean: This RFC is intended as a stop-gap, to unblock on-going work like—I
imagine—adding Rust to the Linux kernel while better long-term
solutions are explored.</li>
      <li>“<a href="https://doc.rust-lang.org/nomicon/vec/vec.html">Example: Implementing Vec</a>” chapter of the <em>Rustnomicon</em>, describes how
Vec’s memory allocation works in detail</li>
      <li><a href="https://doc.rust-lang.org/reference/types/never.html">Never type</a> reference documentation</li>
      <li>[@54:40] Tim: I want to bring out a comment that was made to me in private,
because I’ve been toying with the idea of becoming a <code>rustc</code> contributor,
particularly on the standard library side, and <a href="https://twitter.com/kodraus">Ashley
Mannix</a> sent me a really lovely note, which
was: “Rust is also chronically friendly so nobody gets chewed out for making mistakes. They happen. They get caught. They get patched. You learn something new. It’s ok.”.</li>
    </ul>
  </li>
  <li>[@55:51] - <a href="https://www.osohq.com/post/rust-rocket-sqlx">How we use Rust, SQLx and Rocket for Oso Cloud</a> by Steve Olsen</li>
</ul>

<h4 id="other-items">Other items</h4>

<ul>
  <li>[@57:20] Meetups</li>
  <li>[@57:31] Major release announcements
    <ul>
      <li>DataFusion 8.0</li>
      <li>IntelliJ Rust plugin 2022.1</li>
    </ul>
  </li>
  <li>[@57:40] Join us in the <code>#this-week-in-rust</code> channel of the <a href="https://discord.gg/cHc3Gyc">Rustacean Station Discord server</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Aleksandar Nikolic</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/timClicks">Tim McNamara</a></p>

<p>Hosts: Tim McNamara, <a href="https://twitter.com/seanchen1991">Sean Chen</a>, and <a href="https://twitter.com/allenwyma">Allen Wyma</a>.</p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-05-25-twir-444.mp3" length="28021436" type="audio/mpeg"/>
			<itunes:duration>00:58:22</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/emil-ernerfeldt/</link>
			<pubDate>Fri, 03 Jun 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/emil-ernerfeldt/</guid>
			

			<title><![CDATA[ egui with Emil Ernerfeldt ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Emil Ernerfeldt, creator of egui. egui is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and in your favorite game engine (or will soon).
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Emil Ernerfeldt, creator of egui. egui is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and in your favorite game engine (or will soon).

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:41] - History of Emil’s last name “Ernerfeldt”
  [@1:25] - Getting Emil on this podcast
  [@4:06] - Emil’s Bio and egui
  [@11:52] - Building egui
  [@16:47] - Immediate mode
  [@26:27] - Knowing when to use egui
  [@31:35] - Parent-child contraints
  [@34:21] - Immediate mode is dynamic
  [@36:22] - Refresh rate and Continuous mode
  [@39:11] - Themes in egui
  [@39:59] - egui more for development or client side app?
  [@45:17] - Opinions on hiring people and Emil’s company
  [@49:09] - Opinions on products built by you vs built by others
  [@53:48] - Other GUIs
  [@56:54] - Future plans on egui
  [@58:45] - Anything else you want to mention?


Other Resources

  egui’s Github
  Emil’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/ernerfeldt">Emil Ernerfeldt</a>, creator of <a href="https://www.egui.rs/">egui</a>. egui is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and in your favorite game engine (or will soon).</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:41] - History of Emil’s last name “Ernerfeldt”</li>
  <li>[@1:25] - Getting Emil on this podcast</li>
  <li>[@4:06] - Emil’s Bio and <a href="https://www.egui.rs/">egui</a></li>
  <li>[@11:52] - Building egui</li>
  <li>[@16:47] - Immediate mode</li>
  <li>[@26:27] - Knowing when to use egui</li>
  <li>[@31:35] - Parent-child contraints</li>
  <li>[@34:21] - Immediate mode is dynamic</li>
  <li>[@36:22] - Refresh rate and Continuous mode</li>
  <li>[@39:11] - Themes in egui</li>
  <li>[@39:59] - egui more for development or client side app?</li>
  <li>[@45:17] - Opinions on hiring people and <a href="https://www.rerun.io/">Emil’s company</a></li>
  <li>[@49:09] - Opinions on products built by you vs built by others</li>
  <li>[@53:48] - Other GUIs</li>
  <li>[@56:54] - Future plans on egui</li>
  <li>[@58:45] - Anything else you want to mention?</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/emilk/egui">egui’s Github</a></li>
  <li><a href="https://github.com/emilk">Emil’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e072-emil-ernerfeldt.mp3" length="60401530" type="audio/mpeg"/>
			<itunes:duration>1:01:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/twir-443/</link>
			<pubDate>Mon, 30 May 2022 20:15:54 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/twir-443/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 443 ]]></title>
			<itunes:summary><![CDATA[ Highlights from This Week in Rust - Issue 443. This week features a new section within the newsletter as well as the hosts Sean, Allen and Tim chatting about compilers, front-end development, extending databases with Rust and more.
 ]]></itunes:summary>
			<description><![CDATA[ Highlights from This Week in Rust - Issue 443. This week features a new section within the newsletter as well as the hosts Sean, Allen and Tim chatting about compilers, front-end development, extending databases with Rust and more.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources



[@00:00] Welcome


  [@00:10] - Introduction
  [@00:50] - Agenda
  [@01:20] - Quote of the week
  [@02:50] - Crate of the week


[@03:30] Highlights


  [@03:45] - Things are Getting Rusty in Kernel Land
    
      Rust for Linux GitHub org
      Version 6 of the Rust patchset
      Supporting Linux kernel development in Rust LWN article discussing the Linux Plumbers 2020 session that kicked off the effort
      Prossimo funding the effort, sponsored by Google
    
  
  [@09:45] - The Rust Borrow Checker - A Deep Dive
    
      MIR (Mid-level representation) introduction
      From MIR to binaries discusses how binaries are generated
      MIR borrow check section of the rustc dev guide
      rustc_borrowck crate within the compiler
    
  
  [@14:40] - PixelBox Public Alpha
    
      PixelBox source code
      egui GUI framework for Rust
      PyTorch, a popular Python wrapper for the Torch machine learning framework
      ONNX machine learning format
    
  
  [@18:00] - Rust Ergonomics: Default and From
    
      std::default::Default trait documentation
      std::convert::From trait documentation
      std::convert::Into trait documentation
      Code Like a Pro in Rust book by Brendan Matthews, published by Manning
    
  
  [@23:30] - Our Experience Porting the YJIT Ruby Compiler to Rust
    
      YJIT: Building a New JIT Compiler for CRuby
      [talk] MoreVMs’21: “YJIT: Building a New JIT Compiler Inside CRuby”
– Maxime Chevalier-Boisvert
    
  
  [@30:30] - Asteracea
    
      JSX introduction, from the ReactJS project
      [audio] Carl Lerche on macros (skip to 28:25)
      How does WebAssembly fit into the web platform?, an article discussing the interacting with the DOM from wasm.
    
  
  [@37:46] - Ferrite: A Judgmental Embedding of Session Types in Rust
    
      Haskell Session Types with (Almost) No Class
      [pdf] Session Types for Rust
      Session type
      Affine type, definition from Wikipedia. [Note from Tim: the definition provided by me in the podcast is incorrect. The term “affine type” is derived from affine logic, not affine transformation.]
    
  
  [@40:40] - New newsletter section: Call for testing
    
      RFC: Deduplicate cargo workspace information
      Scoped threads in the standard library
      crossbeam crate
      rustc dev guide
    
  
  [@45:45] - [video] Neon - Building a Postgres storage system in Rust
    
      pgx crate for extending PostgreSQL in Rust
      neon database source code
    
  
  [@50:55] - Extending SQLite with Rust
    
      Stored procedure English Wikipedia article
    
  


Other items


  [@59:30] Final Comment Period for RFCs, PRs
  [@59:42] What is “yeet”?


Credits

Intro Theme: Aerocity

Audio Editing: Brógan Molloy

Hosting Infrastructure: Jon Gjengset

Show Notes: Tim McNamara

Hosts: Tim McNamara, Sean Chen, and Allen Wyma.

 ]]></description>
			<content:encoded><![CDATA[ <p>Highlights from <a href="https://this-week-in-rust.org/blog/2022/05/18/this-week-in-rust-443/">This Week in Rust - Issue 443</a>. This week features a new section within the newsletter as well as the hosts Sean, Allen and Tim chatting about compilers, front-end development, extending databases with Rust and more.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h4 id="0000-welcome">[@00:00] Welcome</h4>

<ul>
  <li>[@00:10] - Introduction</li>
  <li>[@00:50] - Agenda</li>
  <li>[@01:20] - <a href="https://lobste.rs/s/vtcocq/c_is_truly_all_we_need_everything_else_is#c_yrcjm1">Quote of the week</a></li>
  <li>[@02:50] - <a href="https://crates.io/crates/cargo-supply-chain">Crate of the week</a></li>
</ul>

<h4 id="0330-highlights">[@03:30] Highlights</h4>

<ul>
  <li>[@03:45] - <a href="https://hackaday.com/2022/05/17/things-are-getting-rusty-in-kernel-land/">Things are Getting Rusty in Kernel Land</a>
    <ul>
      <li><a href="https://github.com/Rust-for-Linux">Rust for Linux</a> GitHub org</li>
      <li><a href="https://lore.kernel.org/lkml/20220507052451.12890-1-ojeda@kernel.org/">Version 6 of the Rust patchset</a></li>
      <li><a href="https://lwn.net/Articles/829858/">Supporting Linux kernel development in Rust</a> LWN article discussing the Linux Plumbers 2020 session that kicked off the effort</li>
      <li><a href="https://www.memorysafety.org/initiative/linux-kernel/">Prossimo funding the effort</a>, sponsored by Google</li>
    </ul>
  </li>
  <li>[@09:45] - <a href="https://www.infoq.com/presentations/rust-borrow-checker/">The Rust Borrow Checker - A Deep Dive</a>
    <ul>
      <li><a href="https://rustc-dev-guide.rust-lang.org/mir/index.html">MIR</a> (Mid-level representation) introduction</li>
      <li><a href="https://rustc-dev-guide.rust-lang.org/part-5-intro.html">From MIR to binaries</a> discusses how binaries are generated</li>
      <li><a href="https://rustc-dev-guide.rust-lang.org/borrow_check.html">MIR borrow check</a> section of the <a href="https://rustc-dev-guide.rust-lang.org/">rustc dev guide</a></li>
      <li><a href="https://doc.rust-lang.org/nightly/nightly-rustc/rustc_borrowck/index.html"><code>rustc_borrowck</code></a> crate within the compiler</li>
    </ul>
  </li>
  <li>[@14:40] - <a href="https://www.josephcatrambone.com/?p=1382">PixelBox Public Alpha</a>
    <ul>
      <li><a href="https://github.com/JosephCatrambone/pixelbox">PixelBox source code</a></li>
      <li><a href="https://github.com/emilk/egui">egui</a> GUI framework for Rust</li>
      <li><a href="https://pytorch.org/">PyTorch</a>, a popular Python wrapper for the <a href="http://torch.ch/">Torch machine learning framework</a></li>
      <li><a href="https://onnx.ai/">ONNX</a> machine learning format</li>
    </ul>
  </li>
  <li>[@18:00] - <a href="https://elijahcaine.me/rust-default-from/">Rust Ergonomics: Default and From</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/default/trait.Default.html"><code>std::default::Default</code> trait</a> documentation</li>
      <li><a href="https://doc.rust-lang.org/std/convert/trait.From.html"><code>std::convert::From</code> trait</a> documentation</li>
      <li><a href="https://doc.rust-lang.org/std/convert/trait.Into.html"><code>std::convert::Into</code> trait</a> documentation</li>
      <li><a href="https://www.manning.com/books/code-like-a-pro-in-rust"><em>Code Like a Pro in Rust</em></a> book by Brendan Matthews, published by Manning</li>
    </ul>
  </li>
  <li>[@23:30] - <a href="https://shopify.engineering/porting-yjit-ruby-compiler-to-rust">Our Experience Porting the YJIT Ruby Compiler to Rust</a>
    <ul>
      <li><a href="https://shopify.engineering/yjit-just-in-time-compiler-cruby">YJIT: Building a New JIT Compiler for CRuby</a></li>
      <li>[talk] <a href="https://www.youtube.com/watch?v=vucLAqv7qpc">MoreVMs’21: “YJIT: Building a New JIT Compiler Inside CRuby”</a>
– <a href="https://twitter.com/Love2Code">Maxime Chevalier-Boisvert</a></li>
    </ul>
  </li>
  <li>[@30:30] - <a href="https://blog.schichler.dev/posts/Asteracea/">Asteracea</a>
    <ul>
      <li><a href="https://reactjs.org/docs/introducing-jsx.html">JSX introduction</a>, from the <a href="https://reactjs.org/">ReactJS</a> project</li>
      <li>[audio] <a href="https://rustacean-station.org/episode/041-carl-lerche/">Carl Lerche</a> on macros (skip to 28:25)</li>
      <li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts#how_does_webassembly_fit_into_the_web_platform">How does WebAssembly fit into the web platform?</a>, an article discussing the interacting with the DOM from wasm.</li>
    </ul>
  </li>
  <li>[@37:46] - <a href="https://arxiv.org/abs/2205.06921">Ferrite: A Judgmental Embedding of Session Types in Rust</a>
    <ul>
      <li><a href="https://users.cs.northwestern.edu/~jesse/pubs/haskell-session-types/">Haskell Session Types with (Almost) No Class</a></li>
      <li>[pdf] <a href="https://munksgaard.me/papers/laumann-munksgaard-larsen.pdf">Session Types for Rust</a></li>
      <li><a href="https://en.wikipedia.org/wiki/Session_type">Session type</a></li>
      <li><a href="https://en.wikipedia.org/wiki/Substructural_type_system#Affine_type_systems">Affine type</a>, definition from Wikipedia. [Note from Tim: the definition provided by me in the podcast is incorrect. The term “affine type” is derived from <a href="https://en.wikipedia.org/wiki/Affine_logic">affine logic</a>, not <a href="https://en.wikipedia.org/wiki/Affine_transformation">affine transformation</a>.]</li>
    </ul>
  </li>
  <li>[@40:40] - New newsletter section: Call for testing
    <ul>
      <li><a href="https://github.com/rust-lang/rfcs/pull/2906">RFC: Deduplicate cargo workspace information</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/93203">Scoped threads in the standard library</a></li>
      <li><a href="https://docs.rs/crossbeam/"><code>crossbeam</code> crate</a></li>
      <li><a href="https://rustc-dev-guide.rust-lang.org/">rustc dev guide</a></li>
    </ul>
  </li>
  <li>[@45:45] - [video] <a href="https://www.youtube.com/watch?v=kAQeout-mh8">Neon - Building a Postgres storage system in Rust</a>
    <ul>
      <li><a href="https://github.com/tcdi/pgx"><code>pgx</code> crate</a> for extending PostgreSQL in Rust</li>
      <li><a href="https://github.com/neondatabase/neon">neon database</a> source code</li>
    </ul>
  </li>
  <li>[@50:55] - <a href="https://ricardoanderegg.com/posts/extending-sqlite-with-rust/">Extending SQLite with Rust</a>
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Stored_procedure">Stored procedure</a> English Wikipedia article</li>
    </ul>
  </li>
</ul>

<h4 id="other-items">Other items</h4>

<ul>
  <li>[@59:30] Final Comment Period for RFCs, PRs</li>
  <li>[@59:42] What is “yeet”?</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Brógan Molloy</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/timClicks">Tim McNamara</a></p>

<p>Hosts: Tim McNamara, <a href="https://twitter.com/seanchen1991">Sean Chen</a>, and <a href="https://twitter.com/allenwyma">Allen Wyma</a>.</p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/2022-05-18-twir-443.mp3" length="87791800" type="audio/mpeg"/>
			<itunes:duration>01:01:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/kyle-machulis/</link>
			<pubDate>Sat, 28 May 2022 17:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/kyle-machulis/</guid>
			

			<title><![CDATA[ Buttplug with Kyle Machulis ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Kyle Machulis, lead developer on Buttplug. Buttplug is an open-source standards and software project for controlling intimate hardware such as sex toys.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Kyle Machulis, lead developer on Buttplug. Buttplug is an open-source standards and software project for controlling intimate hardware such as sex toys.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:58] - Kyle’s Introduction
  [@3:17] - What got Kyle into sex tech and why start Buttplug
  [@9:08] - How does Buttplug operate and what functions does it provide?
  [@11:45] - How did Rust come into their project?
  [@19:48] - How was their experience with the Rust community?
  [@28:05] - What protocols does Buttplug use and develop?
  [@33:33] - Buttplug’s capabilities, limitations, and safety protocols
  [@44:23] - Why the name “Buttplug”?
  [@51:53] - Buttplug’s push for not just entertainment but also health and wellness purposes
  [@56:07] - How people can help contribute to pushing Buttplug’s project
  [@59:45] - Kyle’s parting thoughts


Other Resources

  Buttplug’s Twitter
  Buttplug’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/qDot">Kyle Machulis</a>, lead developer on <a href="https://buttplug.io/">Buttplug</a>. Buttplug is an open-source standards and software project for controlling intimate hardware such as sex toys.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:58] - Kyle’s Introduction</li>
  <li>[@3:17] - What got Kyle into sex tech and why start Buttplug</li>
  <li>[@9:08] - How does Buttplug operate and what functions does it provide?</li>
  <li>[@11:45] - How did Rust come into their project?</li>
  <li>[@19:48] - How was their experience with the Rust community?</li>
  <li>[@28:05] - What protocols does Buttplug use and develop?</li>
  <li>[@33:33] - Buttplug’s capabilities, limitations, and safety protocols</li>
  <li>[@44:23] - Why the name “Buttplug”?</li>
  <li>[@51:53] - Buttplug’s push for not just entertainment but also health and wellness purposes</li>
  <li>[@56:07] - How people can help contribute to pushing Buttplug’s project</li>
  <li>[@59:45] - Kyle’s parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://twitter.com/buttplugio">Buttplug’s Twitter</a></li>
  <li><a href="https://github.com/buttplugio">Buttplug’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e071-kyle-machulis.mp3" length="59048856" type="audio/mpeg"/>
			<itunes:duration>1:01:30</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/071-twir-442/</link>
			<pubDate>Thu, 26 May 2022 00:00:01 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/071-twir-442/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 442 ]]></title>
			<itunes:summary><![CDATA[ Tim McNamara, Sean Chen and Allen Wyma discuss their
highlights from This Week in Rust
442.
Themes include security, testing, embedded development and async Rust. Watch out
for the cameo by the Ada programming language towards the end!

 ]]></itunes:summary>
			<description><![CDATA[ Tim McNamara, Sean Chen and Allen Wyma discuss their
highlights from This Week in Rust
442.
Themes include security, testing, embedded development and async Rust. Watch out
for the cameo by the Ada programming language towards the end!

Timestamps

Welcome


  [@00:12] Introductions and agenda
  [@01:20] Quote of the week


[@02:57] Official updates


  [@03:01] Security advisory: the rustdecimal crate
  [@06:55] CTCFC Agenda
    
      A whirlwind tour of Embedded
  Rust by James Munns
      Async Rust for Embedded
Systems by Dario
Nieuwenhuis
      Rust in Automotive by Christof
Petig and Florian Gilcher
    
  


[@09:50] Highlights from the newsletter


  [@10:15] Kani Rust Verifier
Project announcement
  [@20:29] Rocket web framework v0.5 2nd release candidate
  [@23:35] Xilem, a
UI architecture for Rust
  [@29:30] Over-Engineering A Fairly Simple Coding
Challenge
  [@35:26] RepliByte’s release
announcement
  [@39:07] Securing
Crates, discussing side channel attacks
  [@44:09] Modeling Interconnected Social and Technical Risks in Open Source
Software Ecosystems, a related paper
  [@47:10] Parsing/Recursive Descent Parser
  [@54:10] Rust Safety with Quentin Ochem and Florian Gilcher


Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to
suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Credits

Intro Theme: Aerocity

Audio Editing: Aleksandar Nikolic

Hosting Infrastructure: Jon Gjengset

Show Notes: Tim McNamara

Hosts: Tim McNamara, Allen Wyma, and Sean Chen

 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://twitter.com/timClicks">Tim McNamara</a>, <a href="https://twitter.com/seanchen1991">Sean Chen</a> and <a href="https://twitter.com/allenwyma">Allen Wyma</a> discuss their
highlights from <a href="https://this-week-in-rust.org/blog/2022/05/11/this-week-in-rust-442/">This Week in Rust
442</a>.
Themes include security, testing, embedded development and async Rust. Watch out
for the cameo by the Ada programming language towards the end!</p>

<h3 id="timestamps">Timestamps</h3>

<h4 id="welcome">Welcome</h4>

<ul>
  <li>[@00:12] Introductions and agenda</li>
  <li>[@01:20] Quote of the week</li>
</ul>

<h4 id="0257-official-updates">[@02:57] Official updates</h4>

<ul>
  <li>[@03:01] Security advisory: the <code>rustdecimal</code> crate</li>
  <li>[@06:55] CTCFC Agenda
    <ul>
      <li><a href="https://www.youtube.com/watch?v=MfG7OvfVYQY&amp;t=105s">A whirlwind tour of Embedded
  Rust</a> by James Munns</li>
      <li><a href="https://www.youtube.com/watch?v=MfG7OvfVYQY&amp;t=1260s">Async Rust for Embedded
Systems</a> by Dario
Nieuwenhuis</li>
      <li><a href="https://www.youtube.com/watch?v=MfG7OvfVYQY&amp;t=2760s">Rust in Automotive</a> by Christof
Petig and Florian Gilcher</li>
    </ul>
  </li>
</ul>

<h4 id="0950-highlights-from-the-newsletter">[@09:50] Highlights from the newsletter</h4>

<ul>
  <li>[@10:15] <a href="https://model-checking.github.io/kani-verifier-blog/2022/05/04/announcing-the-kani-rust-verifier-project.html">Kani Rust Verifier
Project</a> announcement</li>
  <li>[@20:29] <a href="https://rocket.rs/v0.5-rc/news/2022-05-09-version-0.5-rc.2/">Rocket web framework v0.5 2nd release candidate</a></li>
  <li>[@23:35] <a href="https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html">Xilem</a>, a
UI architecture for Rust</li>
  <li>[@29:30] <a href="https://ada-x64.github.io/over-engineering/">Over-Engineering A Fairly Simple Coding
Challenge</a></li>
  <li>[@35:26] <a href="https://www.reddit.com/r/rust/comments/ukmnow/an_opensource_tool_to_seed_your_dev_database_with/">RepliByte’s release
announcement</a></li>
  <li>[@39:07] <a href="https://tl8.co/entry/securing-crates">Securing
Crates</a>, discussing side channel attacks</li>
  <li>[@44:09] <a href="https://arxiv.org/abs/2205.04268">Modeling Interconnected Social and Technical Risks in Open Source
Software Ecosystems</a>, a related paper</li>
  <li>[@47:10] <a href="https://www.huy.rocks/everyday/05-08-2022-parsing-recursive-descent-parser">Parsing/Recursive Descent Parser</a></li>
  <li>[@54:10] <a href="https://rustacean-station.org/episode/067-quentin-ochem-florian-gilcher/">Rust Safety with Quentin Ochem and Florian Gilcher</a></li>
</ul>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to
suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://linkedin.com/in/dbsound">Aleksandar Nikolic</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/timClicks">Tim McNamara</a></p>

<p>Hosts: <a href="https://twitter.com/timClicks">Tim McNamara</a>, <a href="https://twitter.com/allenwyma">Allen Wyma</a>, and <a href="https://twitter.com/seanchen1991">Sean Chen</a></p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2022-05-11.mp3" length="141555550" type="audio/mpeg"/>
			<itunes:duration>58:58</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/070-rob-ede/</link>
			<pubDate>Fri, 20 May 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/070-rob-ede/</guid>
			

			<title><![CDATA[ Actix Web with Rob Ede ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Rob Ede, lead developer on Actix Web. Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Rob Ede, lead developer on Actix Web. Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:27] - Rob’s programming background
  [@3:28] - Rob’s experience with Actix Web
  [@8:46] - What got Rob into Rust
  [@14:01] - How Rust came into their project
  [@22:21] - How Rob got involved in the Actix web framework
  [@24:28] - Actix Web versions
  [@30:24] - Why Actix Web does not use Hyper
  [@38:14] - Actix Web’s upcoming updates and roadmap
  [@38:56] - Rob’s parting thoughts


Other Resources

Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/robjtede">Rob Ede</a>, lead developer on <a href="https://actix.rs/">Actix Web</a>. Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:27] - Rob’s programming background</li>
  <li>[@3:28] - Rob’s experience with Actix Web</li>
  <li>[@8:46] - What got Rob into Rust</li>
  <li>[@14:01] - How Rust came into their project</li>
  <li>[@22:21] - How Rob got involved in the Actix web framework</li>
  <li>[@24:28] - Actix Web versions</li>
  <li>[@30:24] - Why Actix Web does not use <a href="https://hyper.rs/">Hyper</a></li>
  <li>[@38:14] - Actix Web’s upcoming updates and roadmap</li>
  <li>[@38:56] - Rob’s parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e070-rob-ede.mp3" length="41115063" type="audio/mpeg"/>
			<itunes:duration>42:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/069-twir-441/</link>
			<pubDate>Wed, 18 May 2022 04:00:37 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/069-twir-441/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 441 ]]></title>
			<itunes:summary><![CDATA[ Tim McNamara and Allen Wyma discuss their highlights from This
Week in Rust 441.

 ]]></itunes:summary>
			<description><![CDATA[ Tim McNamara and Allen Wyma discuss their highlights from This
Week in Rust 441.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to
suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Credits

Intro Theme: Aerocity

Audio Editing: Jan Lund

Hosting Infrastructure: Jon Gjengset

Show Notes: Tim McNamara

Hosts: Tim McNamara and Allen Wyma

 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://twitter.com/timClicks">Tim McNamara</a> and <a href="https://twitter.com/allenwyma">Allen Wyma</a> discuss their highlights from <a href="https://this-week-in-rust.org/blog/2022/05/04/this-week-in-rust-441/">This
Week in Rust 441</a>.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to
suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: Jan Lund</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/timClicks">Tim McNamara</a></p>

<p>Hosts: <a href="https://twitter.com/timClicks">Tim McNamara</a> and <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2022-05-04.mp3" length="67521792" type="audio/mpeg"/>
			<itunes:duration>35:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/068-tobias-hunger/</link>
			<pubDate>Fri, 13 May 2022 15:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/068-tobias-hunger/</guid>
			

			<title><![CDATA[ Slint with Tobias Hunger ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Tobias Hunger, developer on Slint. Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Tobias Hunger, developer on Slint. Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:30] - Tobias’ introduction
  [@2:21] - What does Slint offer compared to other GUI frameworks?
  [@6:52] - Slint’s UI language
  [@9:02] - From SixtyFPS to Slint, what’s the idea behind the name change?
  [@14:57] - Different industries that Slint is serving
  [@18:45] - Three different options for licensing Slint
  [@21:39] - Slint’s progress and efforts in supporting more customization
  [@32:07] - Slint’s upcoming projects and roadmap
  [@35:19] - Tobias parting thoughts


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/t_hunger">Tobias Hunger</a>, developer on <a href="https://slint-ui.com/">Slint</a>. Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:30] - Tobias’ introduction</li>
  <li>[@2:21] - What does Slint offer compared to other GUI frameworks?</li>
  <li>[@6:52] - Slint’s UI language</li>
  <li>[@9:02] - From SixtyFPS to Slint, what’s the idea behind the <a href="https://slint-ui.com/blog/sixtyfps-becomes-slint.html">name change</a>?</li>
  <li>[@14:57] - Different industries that Slint is serving</li>
  <li>[@18:45] - Three different options for licensing Slint</li>
  <li>[@21:39] - Slint’s progress and efforts in supporting more customization</li>
  <li>[@32:07] - Slint’s upcoming projects and roadmap</li>
  <li>[@35:19] - Tobias parting thoughts</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e068-tobias-hunger.mp3" length="38796224" type="audio/mpeg"/>
			<itunes:duration>40:24</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/067-quentin-ochem-florian-gilcher/</link>
			<pubDate>Sun, 08 May 2022 16:55:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/067-quentin-ochem-florian-gilcher/</guid>
			

			<title><![CDATA[ Rust Safety with Quentin Ochem and Florian Gilcher ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Quentin Ochem, Lead of Product Management and Business Development at AdaCore and Florian Gilcher, Managing Director at Ferrous Systems. Rust use in safety-critical industries is becoming more and more desired from users. Allen, Quentin, and Florian discuss the recent partnership between AdaCore and Ferrous Systems.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Quentin Ochem, Lead of Product Management and Business Development at AdaCore and Florian Gilcher, Managing Director at Ferrous Systems. Rust use in safety-critical industries is becoming more and more desired from users. Allen, Quentin, and Florian discuss the recent partnership between AdaCore and Ferrous Systems.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@1:46] - What is Ferrocene?
  [@6:08] - Why does Ferrocene need to exist?
  [@10:18] - How can Ferrocene help industries that require high-quality security?
  [@16:14] - Why AdaCore decided to support Rust.
  [@21:25] - Does Ada use a VM?
  [@24:06] - What brought Quentin &amp; Florian together to work on Rust?
  [@30:52] - What are the changes that came along with AdaCore and Ferrous Systems’ partnership?
  [@40:46] - How in demand is AdaCore and Ferrous System with their customers in different industries?
  [@47:01] - AdaCore and Ferrous System’s quality management
  [@49:35] - Quentin &amp; Florian’s parting thoughts.


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://www.linkedin.com/in/quentin-ochem-5653864/">Quentin Ochem</a>, Lead of Product Management and Business Development at <a href="https://www.adacore.com/">AdaCore</a> and <a href="https://twitter.com/argorak">Florian Gilcher</a>, Managing Director at <a href="https://ferrous-systems.com/">Ferrous Systems</a>. Rust use in safety-critical industries is becoming more and more desired from users. Allen, Quentin, and Florian discuss the recent partnership between AdaCore and Ferrous Systems.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@1:46] - What is <a href="https://ferrous-systems.com/ferrocene/">Ferrocene</a>?</li>
  <li>[@6:08] - Why does Ferrocene need to exist?</li>
  <li>[@10:18] - How can Ferrocene help industries that require high-quality security?</li>
  <li>[@16:14] - Why AdaCore decided to support Rust.</li>
  <li>[@21:25] - Does Ada use a VM?</li>
  <li>[@24:06] - What brought Quentin &amp; Florian together to work on Rust?</li>
  <li>[@30:52] - What are the changes that came along with <a href="https://www.adacore.com/press/adacore-joins-forces-ferrous-systems-support-rust">AdaCore and Ferrous Systems’ partnership</a>?</li>
  <li>[@40:46] - How in demand is AdaCore and Ferrous System with their customers in different industries?</li>
  <li>[@47:01] - AdaCore and Ferrous System’s quality management</li>
  <li>[@49:35] - Quentin &amp; Florian’s parting thoughts.</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e067-quentin-ochem-florian-gilcher.mp3" length="48869042" type="audio/mpeg"/>
			<itunes:duration>50:54</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/066-eric-smith/</link>
			<pubDate>Fri, 29 Apr 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/066-eric-smith/</guid>
			

			<title><![CDATA[ Game Development with Rust and WebAssembly with Eric Smith ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Eric Smith, author of Game Development with Rust and WebAssembly. Game Development with Rust and WebAssembly teaches you how to make games for the web, using Rust and WebAssembly.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Eric Smith, author of Game Development with Rust and WebAssembly. Game Development with Rust and WebAssembly teaches you how to make games for the web, using Rust and WebAssembly.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:59] - Eric’s introduction
  [@3:26] - Eric’s experience using Rust vs other programming languages
  [@9:20] - What makes Rust appealing?
  [@11:32] - Why Rust is becoming a good language for game development.
  [@13:47] - Comparison of different game engines
  [@19:48] - Insights on Rust game development
  [@26:06] - Eric talks about his book — Game Development with Rust and WebAssembly
  [@29:17] - WebAssembly versus other platforms
  [@41:29] - Eric’s writing process
  [@43:24] - Is Rust web ready?
  [@50:19] - Parting thoughts and where to check out Eric’s book


Other Resources

  Eric’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/paytonrules">Eric Smith</a>, author of <a href="https://www.packtpub.com/product/game-development-with-rust-and-webassembly/9781801070973">Game Development with Rust and WebAssembly</a>. Game Development with Rust and WebAssembly teaches you how to make games for the web, using Rust and WebAssembly.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:59] - Eric’s introduction</li>
  <li>[@3:26] - Eric’s experience using Rust vs other programming languages</li>
  <li>[@9:20] - What makes Rust appealing?</li>
  <li>[@11:32] - Why Rust is becoming a good language for game development.</li>
  <li>[@13:47] - Comparison of different game engines</li>
  <li>[@19:48] - Insights on Rust game development</li>
  <li>[@26:06] - Eric talks about his book — Game Development with Rust and WebAssembly</li>
  <li>[@29:17] - WebAssembly versus other platforms</li>
  <li>[@41:29] - Eric’s writing process</li>
  <li>[@43:24] - Is Rust web ready?</li>
  <li>[@50:19] - Parting thoughts and where to check out Eric’s book</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/paytonrules">Eric’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e066-eric-smith.mp3" length="50326047" type="audio/mpeg"/>
			<itunes:duration>52:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/065-ed-page/</link>
			<pubDate>Sun, 24 Apr 2022 01:25:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/065-ed-page/</guid>
			

			<title><![CDATA[ clap with Ed Page ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Ed Page, maintainer of clap. Command Line Argument Parser (clap) is a library to help create CLI apps using Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Ed Page, maintainer of clap. Command Line Argument Parser (clap) is a library to help create CLI apps using Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:41] - Ed’s introduction of clap
  [@3:09] - What makes clap better than other parsing solutions?
  [@7:30] - Ed’s programming background
  [@10:10] - Ed’s comparison of Rust vs other programming languages
  [@14:06] - Ed and his team’s participation in the Rust community
  [@22:07] - Futurewei’s Rust development efforts
  [@26:51] - How did Ed start in Rust and what took him to clap
  [@32:05] - How does clap handle customization.
  [@34:28] - clap’s 3.0 &amp; 3.1 release
  [@42:03] - What are the future plans for clap
  [@47:40] - argparse vs Click
  [@51:34] - Ongoing plans for clap’s improvement
  [@53:45] - Ed’s efforts on keeping CLI alive
  [@56:09] - What is cargo-script?
  [@1:03:12] - Ed’s view about the state of education in Rust
  [@1:08:06] - Ed’s tips and tricks for beginners.


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/epage">Ed Page</a>, maintainer of <a href="https://github.com/clap-rs/clap">clap</a>. Command Line Argument Parser (clap) is a library to help create CLI apps using Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:41] - Ed’s introduction of clap</li>
  <li>[@3:09] - What makes clap better than other parsing solutions?</li>
  <li>[@7:30] - Ed’s programming background</li>
  <li>[@10:10] - Ed’s comparison of Rust vs other programming languages</li>
  <li>[@14:06] - Ed and his team’s participation in the Rust community</li>
  <li>[@22:07] - Futurewei’s Rust development efforts</li>
  <li>[@26:51] - How did Ed start in Rust and what took him to clap</li>
  <li>[@32:05] - How does clap handle customization.</li>
  <li>[@34:28] - clap’s 3.0 &amp; 3.1 release</li>
  <li>[@42:03] - What are the future plans for clap</li>
  <li>[@47:40] - <a href="https://docs.python.org/3/library/argparse.html">argparse</a> vs <a href="https://click.palletsprojects.com/en/8.1.x/">Click</a></li>
  <li>[@51:34] - Ongoing plans for clap’s improvement</li>
  <li>[@53:45] - Ed’s efforts on keeping CLI alive</li>
  <li>[@56:09] - What is <a href="https://github.com/DanielKeep/cargo-script">cargo-script</a>?</li>
  <li>[@1:03:12] - Ed’s view about the state of education in Rust</li>
  <li>[@1:08:06] - Ed’s tips and tricks for beginners.</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e065-ed-page.mp3" length="67724852" type="audio/mpeg"/>
			<itunes:duration>1:10:32</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/064-armin-ronacher/</link>
			<pubDate>Fri, 15 Apr 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/064-armin-ronacher/</guid>
			

			<title><![CDATA[ Armin Ronacher on experimental deserialization with Deser ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Armin Ronacher, creator of Deser. Deser is an experimental serialization system for Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Armin Ronacher, creator of Deser. Deser is an experimental serialization system for Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:50] - Armin’s background
  [@2:49] - The difference between Jinja &amp; Jinja2
  [@3:47] - What is Twig?
  [@4:14] - Where did the names Jinja &amp; Twig come from?
  [@7:36] - What makes Jinja2 good in portablility?
  [@12:46] - Armin’s programming history
  [@16:07] - How did Armin go from Delphi to Python?
  [@19:18] - The Pocoo team
  [@23:25] - When did Armin start using Rust?
  [@27:26] - The pros &amp; cons of mixing Python and Rust together
  [@36:14] - Stacktrace errors
  [@41:41] - How does Armin deal with developers having different compilers in a working environment.
  [@45:57] - Armin talks about Serde and other serialization challenges
  [@55:33] - Serialization Frameworks
  [@1:04:23] - Where to check out Armin’s library: https://github.com/mitsuhiko/deser
  [@1:07:34] - Armin’s tips and tricks for people starting in Rust


Other Resources

  Armin’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="http://armin.ronacher.eu/">Armin Ronacher</a>, creator of <a href="https://github.com/mitsuhiko/deser">Deser</a>. Deser is an experimental serialization system for Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:50] - Armin’s background</li>
  <li>[@2:49] - The difference between <a href="https://jinja.palletsprojects.com/">Jinja</a> &amp; Jinja2</li>
  <li>[@3:47] - What is <a href="https://twig.symfony.com/">Twig</a>?</li>
  <li>[@4:14] - Where did the names Jinja &amp; Twig come from?</li>
  <li>[@7:36] - What makes Jinja2 good in portablility?</li>
  <li>[@12:46] - Armin’s programming history</li>
  <li>[@16:07] - How did Armin go from Delphi to Python?</li>
  <li>[@19:18] - The Pocoo team</li>
  <li>[@23:25] - When did Armin start using Rust?</li>
  <li>[@27:26] - The pros &amp; cons of mixing Python and Rust together</li>
  <li>[@36:14] - Stacktrace errors</li>
  <li>[@41:41] - How does Armin deal with developers having different compilers in a working environment.</li>
  <li>[@45:57] - Armin talks about Serde and other serialization challenges</li>
  <li>[@55:33] - Serialization Frameworks</li>
  <li>[@1:04:23] - Where to check out Armin’s library: https://github.com/mitsuhiko/deser</li>
  <li>[@1:07:34] - Armin’s tips and tricks for people starting in Rust</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/mitsuhiko">Armin’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e064-armin-ronacher.mp3" length="66479752" type="audio/mpeg"/>
			<itunes:duration>1:09:14</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/063-martin-jones/</link>
			<pubDate>Fri, 08 Apr 2022 16:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/063-martin-jones/</guid>
			

			<title><![CDATA[ Purdy with Marty Jones ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Marty Jones, creator of Purdy. Purdy is an experimental PDF renderer built on top of WebGPU.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Marty Jones, creator of Purdy. Purdy is an experimental PDF renderer built on top of WebGPU.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:55] - Marty’s Background
  [@4:06] - What sparked Marty’s interest in PDFs
  [@6:21] - What kind of primitives are built into PDF?
  [@8:56] - How to solve edge cases in PDFs?
  [@11:54] - Property-based testing
  [@16:54] - The deciding factor that got Marty into creating his library.
  [@19:59] - What is Web GPU
  [@22:13] - Marty’s goal with PDF JS
  [@24:08] - Why use PDF JS?
  [@29:02] - Why Marty used Rust instead of JavaScript
  [@30:15] - What’s next with PDF JS?
  [@36:51] - Legalities of PDFs
  [@41:42] - How to reach Marty


Other Resources

  Marty’s Github
  What is unique about PDF rendering?


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/murtyjones">Marty Jones</a>, creator of <a href="https://github.com/murtyjones/purdy">Purdy</a>. Purdy is an experimental PDF renderer built on top of WebGPU.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:55] - Marty’s Background</li>
  <li>[@4:06] - What sparked Marty’s interest in PDFs</li>
  <li>[@6:21] - What kind of primitives are built into PDF?</li>
  <li>[@8:56] - How to solve edge cases in PDFs?</li>
  <li>[@11:54] - Property-based testing</li>
  <li>[@16:54] - The deciding factor that got Marty into creating his library.</li>
  <li>[@19:59] - What is Web GPU</li>
  <li>[@22:13] - Marty’s goal with PDF JS</li>
  <li>[@24:08] - Why use PDF JS?</li>
  <li>[@29:02] - Why Marty used Rust instead of JavaScript</li>
  <li>[@30:15] - What’s next with PDF JS?</li>
  <li>[@36:51] - Legalities of PDFs</li>
  <li>[@41:42] - How to reach Marty</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/murtyjones">Marty’s Github</a></li>
  <li><a href="https://www.youtube.com/watch?v=TiqDqd-1pwU">What is unique about PDF rendering?</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e063-martin-jones.mp3" length="45286296" type="audio/mpeg"/>
			<itunes:duration>47:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/062-nathan-stocks/</link>
			<pubDate>Fri, 01 Apr 2022 15:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/062-nathan-stocks/</guid>
			

			<title><![CDATA[ Rusty Engine ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Nathan Stocks, creator of Rusty Engine. Rusty Engine is a simple 2D game engine for those who are learning Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Nathan Stocks, creator of Rusty Engine. Rusty Engine is a simple 2D game engine for those who are learning Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:46] - Nathan’s background and programming history
  [@11:08] - Nathan talks about his Python course and other programming languages
  [@18:13] - What led Nathan to create his Rust course
  [@25:12] - Bevy &amp; other game engines
  [@36:50] - Nathan’s views and opinions with Unreal Engine
  [@40:59] - Malware and other safety issues with Rust
  [@43:20] - Why Nathan prefers Rust over other languages
  [@47:15] - Nathan’s experience working with Go
  [@53:37] - Nathan’s announcement with his ongoing course
  [@54:41] - Nathan’s tips and tricks for beginners who want to learn Rust


Other Resources

  Nathan’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/nathanstocks">Nathan Stocks</a>, creator of <a href="https://github.com/CleanCut/rusty_engine">Rusty Engine</a>. Rusty Engine is a simple 2D game engine for those who are learning Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:46] - Nathan’s background and programming history</li>
  <li>[@11:08] - Nathan talks about his Python course and other programming languages</li>
  <li>[@18:13] - What led Nathan to create his Rust course</li>
  <li>[@25:12] - Bevy &amp; other game engines</li>
  <li>[@36:50] - Nathan’s views and opinions with Unreal Engine</li>
  <li>[@40:59] - Malware and other safety issues with Rust</li>
  <li>[@43:20] - Why Nathan prefers Rust over other languages</li>
  <li>[@47:15] - Nathan’s experience working with Go</li>
  <li>[@53:37] - Nathan’s announcement with his ongoing course</li>
  <li>[@54:41] - Nathan’s tips and tricks for beginners who want to learn Rust</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/CleanCut">Nathan’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e062-nathan-stocks.mp3" length="56035788" type="audio/mpeg"/>
			<itunes:duration>58:22</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/061-prabhu-eshwarla/</link>
			<pubDate>Fri, 25 Mar 2022 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/061-prabhu-eshwarla/</guid>
			

			<title><![CDATA[ Rust Servers, Services, and Apps with Prabhu Eshwarla ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Prabhu Eshwarla, author of Rust Servers, Services, and Apps. Rust Servers, Services, and Apps teaches you how to build web servers, RESTful services, server-rendered apps, and client front-ends in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Prabhu Eshwarla, author of Rust Servers, Services, and Apps. Rust Servers, Services, and Apps teaches you how to build web servers, RESTful services, server-rendered apps, and client front-ends in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:49] - Prabhu’s Introduction
  [@1:28] - Elixir vs Rust
  [@4:20] - Prabhu’s Phoenix experience
  [@8:09] - What is required to do web development?
  [@25:09] - Java vs Rust
  [@29:07] - Asynchronous programming vs multithreading
  [@34:13] - Why Rust is a good choice for blockchain
  [@42:12] - What is Blockchain?
  [@53:34] - Next generation of blockchain - Assests, NFTs, Data Storage
  [@1:02:50] - Why Prabhu thinks Rust is the right language for web development
  [@1:04:42] - Prabhu’s tips for people who are beginners in Rust
  [@1:09:42] - Prabhu’s book and parting thoughts.


Other Resources

  Zeeshan’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/peshwarla">Prabhu Eshwarla</a>, author of <a href="https://www.manning.com/books/rust-servers-services-and-apps">Rust Servers, Services, and Apps</a>. Rust Servers, Services, and Apps teaches you how to build web servers, RESTful services, server-rendered apps, and client front-ends in Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:49] - Prabhu’s Introduction</li>
  <li>[@1:28] - Elixir vs Rust</li>
  <li>[@4:20] - Prabhu’s Phoenix experience</li>
  <li>[@8:09] - What is required to do web development?</li>
  <li>[@25:09] - Java vs Rust</li>
  <li>[@29:07] - Asynchronous programming vs multithreading</li>
  <li>[@34:13] - Why Rust is a good choice for blockchain</li>
  <li>[@42:12] - What is Blockchain?</li>
  <li>[@53:34] - Next generation of blockchain - Assests, NFTs, Data Storage</li>
  <li>[@1:02:50] - Why Prabhu thinks Rust is the right language for web development</li>
  <li>[@1:04:42] - Prabhu’s tips for people who are beginners in Rust</li>
  <li>[@1:09:42] - Prabhu’s book and parting thoughts.</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/zeenix">Zeeshan’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e061-prabhu-eshwarla.mp3" length="68964334" type="audio/mpeg"/>
			<itunes:duration>1:11:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/060-roel/</link>
			<pubDate>Fri, 18 Mar 2022 16:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/060-roel/</guid>
			

			<title><![CDATA[ id3 with Roel ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Roel, creator of id3. id3 is a Rust library used for reading id3.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Roel, creator of id3. id3 is a Rust library used for reading id3.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:44] - Roel’s Bio
  [@1:59] - What is ID3?
  [@4:41] - What does ID3 tech consists of and what is its structure?
  [@09:08] - What got Roel interested in ID3?
  [@10:49] - What are some notable projects that use ID3?
  [@19:57] - ID3 Future Roadmap
  [@24:37] - The Rust Community in the Netherlands
  [@25:30] - Go vs Rust
  [@29:23] - Roel’s programs and upcoming events
  [@31:37] - Hackerspace and Roel’s parting thoughts


Other Resources

  Roel’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://polyfloyd.net/">Roel</a>, creator of <a href="https://docs.rs/id3/latest/id3/">id3</a>. id3 is a Rust library used for reading <a href="https://id3.org/">id3</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:44] - Roel’s Bio</li>
  <li>[@1:59] - What is ID3?</li>
  <li>[@4:41] - What does ID3 tech consists of and what is its structure?</li>
  <li>[@09:08] - What got Roel interested in ID3?</li>
  <li>[@10:49] - What are some notable projects that use ID3?</li>
  <li>[@19:57] - ID3 Future Roadmap</li>
  <li>[@24:37] - The Rust Community in the Netherlands</li>
  <li>[@25:30] - Go vs Rust</li>
  <li>[@29:23] - Roel’s programs and upcoming events</li>
  <li>[@31:37] - Hackerspace and Roel’s parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/polyfloyd">Roel’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e060-roel.mp3" length="31771167" type="audio/mpeg"/>
			<itunes:duration>33:05</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/059-martin-loncaric/</link>
			<pubDate>Fri, 11 Mar 2022 17:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/059-martin-loncaric/</guid>
			

			<title><![CDATA[ PancakeDB with Martin Loncaric ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Martin Loncaric, creator of PancakeDB. PancakeDB is a database that focuses on low latency ingestion of data.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Martin Loncaric, creator of PancakeDB. PancakeDB is a database that focuses on low latency ingestion of data.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:35] - Martin’s Bio
  [@1:30] - What is PancakeDB?
  [@5:48] - How does Pancake compare to CSV &amp; Parquet?
  [@7:09] - Where did the idea of working on PancakeDB come from?
  [@9:25] - PancakeDB license &amp; monetization
  [@14:00] - What makes PancakeDB so highly performant
  [@18:21] - How Martin got into Big Data
  [@21:22] - How PancakeDB addresses the data ingestion problem
  [@26:28] - Where did the name Pancake DB come from?
  [@27:42] - Recommended ways to implement data ingestion
  [@30:37] - Rust vs other languages when it comes to data processing
  [@34:05] - What brought Martin to Rust
  [@37:23] - How can Rust improve &amp; Martin’s parting thoughts


Other Resources

  Martin’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/m_wlon">Martin Loncaric</a>, creator of <a href="https://pancakedb.com/">PancakeDB</a>. PancakeDB is a database that focuses on low latency ingestion of data.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:35] - Martin’s Bio</li>
  <li>[@1:30] - What is PancakeDB?</li>
  <li>[@5:48] - How does Pancake compare to CSV &amp; Parquet?</li>
  <li>[@7:09] - Where did the idea of working on PancakeDB come from?</li>
  <li>[@9:25] - PancakeDB license &amp; monetization</li>
  <li>[@14:00] - What makes PancakeDB so highly performant</li>
  <li>[@18:21] - How Martin got into Big Data</li>
  <li>[@21:22] - How PancakeDB addresses the data ingestion problem</li>
  <li>[@26:28] - Where did the name Pancake DB come from?</li>
  <li>[@27:42] - Recommended ways to implement data ingestion</li>
  <li>[@30:37] - Rust vs other languages when it comes to data processing</li>
  <li>[@34:05] - What brought Martin to Rust</li>
  <li>[@37:23] - How can Rust improve &amp; Martin’s parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/mwlon">Martin’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e059-martin-loncaric.mp3" length="38184750" type="audio/mpeg"/>
			<itunes:duration>39:46</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/058-rust-1.58-1.59/</link>
			<pubDate>Tue, 08 Mar 2022 20:25:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/058-rust-1.58-1.59/</guid>
			

			<title><![CDATA[ What's New in Rust 1.58 and 1.59 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.58 and 1.59 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.58 and 1.59 releases of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:10] - Rust 1.58

  [@01:18] - Captured identifiers in format strings
  [@07:40] - Reduced Windows Command search path
    
      ripgrep CVE
      ripgrep fix commit
    
  
  [@11:05] - More #[must_use] in the standard library
    
      Tracking issue for #[must_use] PRs
      When to use #[must_use]
    
  
  [@17:16] - Stabilized APIs
    
      std::fs::OpenOptions
      Tracking issue for *::unwrap_unchecked
    
  
  [@22:50] - Rust 1.58.1
    
      Security Advisory
      C++ is probably also vulnerable
    
  


[@27:15] - Rust 1.59


  [@28:00] - Inline assembly
    
      std::intrinsics
      Inline assembly by example
    
  
  [@39:06] - Destructuring assignments
  [@44:00] - Const generics defaults and interleaving
  [@46:11] - Future incompatibility warnings
  [@51:28] - Creating stripped binaries
  [@53:54] - Incremental compilation off by default
    
      Incremental disabled back in Rust 1.52.1
      The identified issue
    
  
  [@58:50] - Stabilized APIs
    
      available_parallelism
      num_cpus crate
    
  
  [@1:03:04] - Changelog deep-dive
    
      cargo r -r
      Tracking issue for v0 symbol mangling
      Switching to v0 by default
      HashSet and HashMap method bounds changed
      fantoccini using multiple impl blocks
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.58 and 1.59 releases of Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0110---rust-158">[@01:10] - <a href="https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html">Rust 1.58</a></h4>
<ul>
  <li>[@01:18] - <a href="https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#captured-identifiers-in-format-strings">Captured identifiers in format strings</a></li>
  <li>[@07:40] - <a href="https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#reduced-windows-command-search-path">Reduced Windows <code>Command</code> search path</a>
    <ul>
      <li><a href="https://www.cve.org/CVERecord?id=CVE-2021-3013">ripgrep CVE</a></li>
      <li><a href="https://github.com/BurntSushi/ripgrep/commit/229d1a8d41b0023420e7815578fa0b39c0d5c2e4">ripgrep fix commit</a></li>
    </ul>
  </li>
  <li>[@11:05] - <a href="https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#more-must_use-in-the-standard-library">More <code>#[must_use]</code> in the standard library</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/89692/">Tracking issue for <code>#[must_use]</code> PRs</a></li>
      <li><a href="https://std-dev-guide.rust-lang.org/code-considerations/design/must-use.html">When to use <code>#[must_use]</code></a></li>
    </ul>
  </li>
  <li>[@17:16] - <a href="https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/fs/struct.OpenOptions.html"><code>std::fs::OpenOptions</code></a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/81383">Tracking issue for <code>*::unwrap_unchecked</code></a></li>
    </ul>
  </li>
  <li>[@22:50] - <a href="https://blog.rust-lang.org/2022/01/20/Rust-1.58.1.html">Rust 1.58.1</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html">Security Advisory</a></li>
      <li><a href="https://www.reddit.com/r/rust/comments/s8h1kr/comment/hth7go5/?utm_source=share&amp;utm_medium=web2x&amp;context=3">C++ is probably also vulnerable</a></li>
    </ul>
  </li>
</ul>

<h4 id="2715---rust-159">[@27:15] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html">Rust 1.59</a></h4>

<ul>
  <li>[@28:00] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#inline-assembly">Inline assembly</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/intrinsics/index.html"><code>std::intrinsics</code></a></li>
      <li><a href="https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html">Inline assembly by example</a></li>
    </ul>
  </li>
  <li>[@39:06] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#destructuring-assignments">Destructuring assignments</a></li>
  <li>[@44:00] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#const-generics-defaults-and-interleaving">Const generics defaults and interleaving</a></li>
  <li>[@46:11] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#future-incompatibility-warnings">Future incompatibility warnings</a></li>
  <li>[@51:28] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#creating-stripped-binaries">Creating stripped binaries</a></li>
  <li>[@53:54] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#incremental-compilation-off-by-default">Incremental compilation off by default</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html">Incremental disabled back in Rust 1.52.1</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/94124">The identified issue</a></li>
    </ul>
  </li>
  <li>[@58:50] - <a href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/thread/fn.available_parallelism.html"><code>available_parallelism</code></a></li>
      <li><a href="https://docs.rs/num_cpus/"><code>num_cpus</code> crate</a></li>
    </ul>
  </li>
  <li>[@1:03:04] - Changelog deep-dive
    <ul>
      <li><a href="https://github.com/rust-lang/cargo/pull/10133"><code>cargo r -r</code></a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/60705">Tracking issue for v0 symbol mangling</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/89917">Switching to v0 by default</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/91593/">HashSet and HashMap method bounds changed</a></li>
      <li><a href="https://docs.rs/fantoccini/latest/fantoccini/struct.Client.html"><code>fantoccini</code> using multiple <code>impl</code> blocks</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e058-rust-1.58-1.59.mp3" length="88392669" type="audio/mpeg"/>
			<itunes:duration>01:13:39</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/057-nick-mathewson/</link>
			<pubDate>Fri, 04 Mar 2022 16:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/057-nick-mathewson/</guid>
			

			<title><![CDATA[ Tor with Nick Mathewson ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Nick Mathewson, one of the creators of Tor Project. Tor is free and open-source software for enabling anonymous communication.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Nick Mathewson, one of the creators of Tor Project. Tor is free and open-source software for enabling anonymous communication.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:39] - Nick’s Bio &amp; Tor Project Introduction
  [@2:33] - Deeper dive into Tor
  [@8:07] - Advantage of Rust over C when trying to bring stronger privacy to internet.
  [@21:44] - The History of Tor
  [@26:02] - How does Tor stay in business despite being a free service?
  [@28:11] - What is Onion Routing and how does it work at a high level?
  [@38:54] - The Tor Browser
  [@42:14] - Advise on how to maintain anonymity online
  [@55:17] - Rust vs other languages
  [@1:03:54] - Tips &amp; tricks for people who are starting off in Rust
  [@1:06:00] - Parting thoughts


Other Resources

  Tor’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="http://www.wangafu.net/~nickm/">Nick Mathewson</a>, one of the creators of <a href="https://www.torproject.org/">Tor Project</a>. Tor is free and open-source software for enabling anonymous communication.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:39] - Nick’s Bio &amp; Tor Project Introduction</li>
  <li>[@2:33] - Deeper dive into Tor</li>
  <li>[@8:07] - Advantage of Rust over C when trying to bring stronger privacy to internet.</li>
  <li>[@21:44] - The History of Tor</li>
  <li>[@26:02] - How does Tor stay in business despite being a free service?</li>
  <li>[@28:11] - What is Onion Routing and how does it work at a high level?</li>
  <li>[@38:54] - The Tor Browser</li>
  <li>[@42:14] - Advise on how to maintain anonymity online</li>
  <li>[@55:17] - Rust vs other languages</li>
  <li>[@1:03:54] - Tips &amp; tricks for people who are starting off in Rust</li>
  <li>[@1:06:00] - Parting thoughts</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/TheTorProject">Tor’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e057-nick-mathewson.mp3" length="64767372" type="audio/mpeg"/>
			<itunes:duration>01:07:27</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/056-zeeshan-ali/</link>
			<pubDate>Sun, 30 Jan 2022 22:40:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/056-zeeshan-ali/</guid>
			

			<title><![CDATA[ zbus with Zeeshan Ali ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Zeeshan Ali, creator of zbus. zbus is a Rust library used for interprocess communication using D-Bus.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Zeeshan Ali, creator of zbus. zbus is a Rust library used for interprocess communication using D-Bus.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:51] - Zeeshan’s Bio and zbus
  [@7:16] - D-Bus at the high level
  [@14:43] - Knowing when to use D-Bus or message queue
  [@19:28] - Authentication methods when going non-local
  [@20:16] - Is it possible to use D-Bus on Kubernetes?
  [@22:00] - zbus is able to support multiple async runtimes
  [@28:18] - Difference between Tokio and async-std
  [@32:30] - Async Foundations working group
  [@40:06] - Is it expensive to run async runtime?
  [@41:37] - zbus macros and their Matrix channel
  [@44:00] - IPC (Inter-Process Communication)


Other Resources

  Zeeshan’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/zeenix">Zeeshan Ali</a>, creator of <a href="https://gitlab.freedesktop.org/dbus/zbus/">zbus</a>. zbus is a Rust library used for interprocess communication using <a href="https://dbus.freedesktop.org/doc/dbus-specification.html">D-Bus</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:51] - Zeeshan’s Bio and <a href="https://lib.rs/crates/zbus">zbus</a></li>
  <li>[@7:16] - D-Bus at the high level</li>
  <li>[@14:43] - Knowing when to use D-Bus or message queue</li>
  <li>[@19:28] - Authentication methods when going non-local</li>
  <li>[@20:16] - Is it possible to use D-Bus on <a href="https://kubernetes.io/">Kubernetes</a>?</li>
  <li>[@22:00] - zbus is able to support multiple async runtimes</li>
  <li>[@28:18] - Difference between <a href="https://tokio.rs/">Tokio</a> and <a href="https://async.rs/">async-std</a></li>
  <li>[@32:30] - Async Foundations working group</li>
  <li>[@40:06] - Is it expensive to run async runtime?</li>
  <li>[@41:37] - zbus macros and their <a href="https://matrix.to/#/#zbus:matrix.org">Matrix channel</a></li>
  <li>[@44:00] - IPC (Inter-Process Communication)</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/zeenix">Zeeshan’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e056-zeeshan-ali.mp3" length="49020887" type="audio/mpeg"/>
			<itunes:duration>50:00</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/055-sebastian-thiel/</link>
			<pubDate>Sat, 22 Jan 2022 20:15:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/055-sebastian-thiel/</guid>
			

			<title><![CDATA[ Gitoxide with Sebastian Thiel ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Sebastian Thiel, creator of Gitoxide.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Sebastian Thiel, creator of Gitoxide.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:31] - Gitoxide
  [@6:29] - Reasons why Sebastian chose Rust
  [@9:45] - Story of Gitoxide
  [@13:29] - Status of Gitoxide
  [@15:41] - git2
  [@23:24] - “Gix” is now “Ein”
  [@28:14] - JGit
  [@32:02] - Reference for the implementation of Gitoxide
  [@38:31] - Getting sponsored for Gitoxide
  [@41:56] - Accounting timesheet and the vision for Gitoxide
  [@48:38] - Ways to help Gitoxide
  [@50:00] - Tips for beginners in Rust


Other Resources

  Sebastian’s Github
  Learn Rust with Gitoxide - Youtube


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/theelbasian">Sebastian Thiel</a>, creator of <a href="https://github.com/Byron/gitoxide">Gitoxide</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:31] - Gitoxide</li>
  <li>[@6:29] - Reasons why Sebastian chose Rust</li>
  <li>[@9:45] - Story of Gitoxide</li>
  <li>[@13:29] - Status of Gitoxide</li>
  <li>[@15:41] - <a href="https://docs.rs/git2/latest/git2/">git2</a></li>
  <li>[@23:24] - <a href="https://www.reddit.com/r/rust/comments/rm5e9f/gitoxide_november_update_new_cargo_features/">“Gix” is now “Ein”</a></li>
  <li>[@28:14] - JGit</li>
  <li>[@32:02] - Reference for the implementation of Gitoxide</li>
  <li>[@38:31] - Getting sponsored for Gitoxide</li>
  <li>[@41:56] - Accounting <a href="https://github.com/Byron/byron/blob/main/timesheets/2021.csv">timesheet</a> and the vision for Gitoxide</li>
  <li>[@48:38] - Ways to help Gitoxide</li>
  <li>[@50:00] - Tips for beginners in Rust</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/Byron">Sebastian’s Github</a></li>
  <li><a href="https://www.youtube.com/playlist?list=PLMHbQxe1e9Mk5kOHrm9v20-umkE2ck_gE">Learn Rust with Gitoxide - Youtube</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e055-sebastian-thiel.mp3" length="54075439" type="audio/mpeg"/>
			<itunes:duration>55:16</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/054-paul-schoenfelder/</link>
			<pubDate>Fri, 14 Jan 2022 16:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/054-paul-schoenfelder/</guid>
			

			<title><![CDATA[ Lumen with Paul Schoenfelder ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Paul Schoenfelder, contributor to Lumen.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Paul Schoenfelder, contributor to Lumen.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:27] - Paul’s Bio and Lumen
  [@4:30] - Lumen can only compile Erlang
  [@9:26] - SSA (Static Single Assignment)
  [@12:02] - BEAM
  [@22:03] - Web Assembly
  [@25:02] - Rust makes low level stuff easy to implement
  [@34:44] - WASM Browser limitations
  [@37:01] - Erlang’s Observer and Distribution Protocol
  [@41:10] - What is WASM (Web Assembly)?
  [@49:01] - WASI (WebAssembly System Interface)
  [@55:31] - Why should I learn another language when I can stick with Javascript?
  [@1:01:30] - The WASM working group vs The community group
  [@1:08:39] - How to participate in Lumen?


Other Resources

  Lumen’s Github
  Paul’s Github
  Paul’s Website


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/gotbones">Paul Schoenfelder</a>, contributor to <a href="https://getlumen.org/">Lumen</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:27] - Paul’s Bio and Lumen</li>
  <li>[@4:30] - Lumen can only compile <a href="https://www.erlang.org/">Erlang</a></li>
  <li>[@9:26] - SSA (Static Single Assignment)</li>
  <li>[@12:02] - BEAM</li>
  <li>[@22:03] - <a href="https://webassembly.org/">Web Assembly</a></li>
  <li>[@25:02] - Rust makes low level stuff easy to implement</li>
  <li>[@34:44] - WASM Browser limitations</li>
  <li>[@37:01] - Erlang’s <a href="https://www.erlang.org/doc/apps/observer/observer_ug.html">Observer</a> and <a href="https://www.erlang.org/doc/apps/erts/erl_dist_protocol.html">Distribution Protocol</a></li>
  <li>[@41:10] - What is WASM (Web Assembly)?</li>
  <li>[@49:01] - <a href="https://wasi.dev/">WASI</a> (WebAssembly System Interface)</li>
  <li>[@55:31] - Why should I learn another language when I can stick with Javascript?</li>
  <li>[@1:01:30] - The WASM working group vs The community group</li>
  <li>[@1:08:39] - How to participate in Lumen?</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/lumen/lumen">Lumen’s Github</a></li>
  <li><a href="https://github.com/bitwalker">Paul’s Github</a></li>
  <li><a href="http://bitwalker.org/">Paul’s Website</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e054-paul-schoenfelder.mp3" length="71177281" type="audio/mpeg"/>
			<itunes:duration>1:13:07</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/053-julius-lungys/</link>
			<pubDate>Fri, 07 Jan 2022 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/053-julius-lungys/</guid>
			

			<title><![CDATA[ Yew with Julius Lungys ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Julius Lungys, contributor to Yew.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Julius Lungys, contributor to Yew.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@1:29] -	Core values and benefits of Yew
  [@3:32] -	The performance of Yew
  [@6:57] -	Cargo workspaces
  [@8:05] -  Trunk &amp; Wasm-pack
  [@10:07] - Virtual DOM &amp; Debugging
  [@11:24] - Source Maps in Yew
  [@12:21] - Krustlet
  [@13:34] - Reasons to choose Wasm over JavaScript
  [@15:26] - Ecosystem of Yew
  [@16:32] - Glue package
  [@21:32] - How Yew relates to Elm
  [@22:32] - Functional Components
  [@25:05] - Server Side Rendering (SSR)
  [@26:52] - When should you consider Yew
  [@34:24] - TypeScript
  [@38:46] - Is Yew limited to the browser?
  [@39:56] - Electron
  [@41:03] - Yew’s browser support
  [@44:14] - Tips for beginners from Julius


Other Resources

  Julius’s Github
  The Company (Nikulipe)


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/voidpumpkin">Julius Lungys</a>, contributor to <a href="https://yew.rs/">Yew</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@1:29] -	Core values and benefits of Yew</li>
  <li>[@3:32] -	The performance of Yew</li>
  <li>[@6:57] -	<a href="https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html#cargo-workspaces">Cargo workspaces</a></li>
  <li>[@8:05] -  <a href="https://trunkrs.dev/">Trunk</a> &amp; <a href="https://rustwasm.github.io/docs/wasm-pack/">Wasm-pack</a></li>
  <li>[@10:07] - Virtual DOM &amp; Debugging</li>
  <li>[@11:24] - Source Maps in Yew</li>
  <li>[@12:21] - <a href="https://github.com/krustlet">Krustlet</a></li>
  <li>[@13:34] - Reasons to choose <a href="https://webassembly.org/">Wasm</a> over JavaScript</li>
  <li>[@15:26] - Ecosystem of Yew</li>
  <li>[@16:32] - <a href="https://crates.io/crates/wasm-glue">Glue package</a></li>
  <li>[@21:32] - How Yew relates to <a href="https://elm-lang.org/">Elm</a></li>
  <li>[@22:32] - <a href="https://yew.rs/docs/next/concepts/function-components/introduction">Functional Components</a></li>
  <li>[@25:05] - Server Side Rendering (SSR)</li>
  <li>[@26:52] - When should you consider Yew</li>
  <li>[@34:24] - <a href="https://www.typescriptlang.org/">TypeScript</a></li>
  <li>[@38:46] - Is Yew limited to the browser?</li>
  <li>[@39:56] - <a href="https://www.electronjs.org/">Electron</a></li>
  <li>[@41:03] - Yew’s browser support</li>
  <li>[@44:14] - Tips for beginners from Julius</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/voidpumpkin">Julius’s Github</a></li>
  <li><a href="https://www.nikulipe.com/">The Company (Nikulipe)</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e053-julius-lungys.mp3" length="46305986" type="audio/mpeg"/>
			<itunes:duration>47:13</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/052-daniel-teberian/</link>
			<pubDate>Fri, 31 Dec 2021 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/052-daniel-teberian/</guid>
			

			<title><![CDATA[ LibertyOS with Daniel Teberian ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Daniel Teberian, the creator of LibertyOS.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Daniel Teberian, the creator of LibertyOS.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@0:41] -	Daniel’s Bio
  [@3:14] -	Recent work on LibertyOS
  [@4:36] -	Getting help from some crates or totally starting from scratch?
  [@8:08] -	The team behind LibertyOS
  [@10:04] - Every processor is different so you can’t write Rust for everything
  [@17:27] - What can LibertyOS do at the moment?
  [@20:19] - How to support writing Rust programs on a Rust-based OS?
  [@27:38] - How are decisions made for LibertyOS?
  [@34:07] - Cargo check
  [@37:12] - More on the LibertyOS members
  [@42:34] - Why LibertyOS may change their name
  [@44:46] - Final words and ways to contribute to the project


Other Resources

  Daniel’s Github


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/zippydpt">Daniel Teberian</a>, the creator of <a href="https://github.com/LibertyOS-Development/kernel">LibertyOS</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@0:41] -	Daniel’s Bio</li>
  <li>[@3:14] -	Recent work on <a href="https://github.com/LibertyOS-Development">LibertyOS</a></li>
  <li>[@4:36] -	Getting help from some crates or totally starting from scratch?</li>
  <li>[@8:08] -	The team behind LibertyOS</li>
  <li>[@10:04] - Every processor is different so you can’t write Rust for everything</li>
  <li>[@17:27] - What can LibertyOS do at the moment?</li>
  <li>[@20:19] - How to support writing Rust programs on a Rust-based OS?</li>
  <li>[@27:38] - How are decisions made for LibertyOS?</li>
  <li>[@34:07] - <a href="https://doc.rust-lang.org/cargo/commands/cargo-check.html">Cargo check</a></li>
  <li>[@37:12] - More on the LibertyOS members</li>
  <li>[@42:34] - Why LibertyOS may change their name</li>
  <li>[@44:46] - Final words and ways to contribute to the project</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/danielteberian">Daniel’s Github</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e052-daniel-teberian.mp3" length="46238033" type="audio/mpeg"/>
			<itunes:duration>47:10</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/051-brenden-matthews/</link>
			<pubDate>Fri, 24 Dec 2021 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/051-brenden-matthews/</guid>
			

			<title><![CDATA[ Code Like a Pro in Rust with Brenden Matthews ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Brenden Matthews, the author of the book Code Like a Pro in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Brenden Matthews, the author of the book Code Like a Pro in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:41] -	Brenden’s Bio
  [@1:30] -	Where the idea to write the book came from
  [@4:32] -	Pythonic, Rustacious/Idiomatic Rust and other coding style terms
  [@6:25] -	Writing idiomatic code
  [@10:19] - Helper methods
  [@12:34] - From trait
  [@15:20] - Into trait
  [@17:00] - Errors	in Rust
  [@26:59] - Other languages borrowing Rust’s ideas for memory safety and no null type
  [@29:21] - Kotlin, Dart, Swift &amp; Zig
  [@30:58] - LLVM, Swift &amp; Rust and evolution of languages
  [@35:32] - Backwards compatibility in Rust
  [@39:00] - Experiences and the improvements in Rust
  [@42:44] - Components are added manually, but should they be installed by default?
  [@48:16] - Knowing when to use libc and adding a C runtime
  [@59:58] - Who Code Like a Pro in Rust is written for


Other Resources

  Brenden’s Blog


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/brndnmtthws">Brenden Matthews</a>, the author of the book <a href="https://www.manning.com/books/code-like-a-pro-in-rust">Code Like a Pro in Rust</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:41] -	Brenden’s Bio</li>
  <li>[@1:30] -	Where the idea to write the <a href="https://www.manning.com/books/code-like-a-pro-in-rust?utm_source=brendenm&amp;utm_medium=affiliate&amp;utm_campaign=book_matthews_code_9_22_21&amp;a_aid=brendenm&amp;a_bid=3eb61509">book</a> came from</li>
  <li>[@4:32] -	Pythonic, Rustacious/Idiomatic Rust and other coding style terms</li>
  <li>[@6:25] -	Writing idiomatic code</li>
  <li>[@10:19] - Helper methods</li>
  <li>[@12:34] - <a href="https://doc.rust-lang.org/std/convert/trait.From.html">From</a> trait</li>
  <li>[@15:20] - <a href="https://doc.rust-lang.org/std/convert/trait.Into.html">Into</a> trait</li>
  <li>[@17:00] - Errors	in Rust</li>
  <li>[@26:59] - Other languages borrowing Rust’s ideas for memory safety and no null type</li>
  <li>[@29:21] - <a href="https://kotlinlang.org/">Kotlin</a>, <a href="https://dart.dev/">Dart</a>, <a href="https://developer.apple.com/swift/">Swift</a> &amp; <a href="https://ziglang.org/">Zig</a></li>
  <li>[@30:58] - <a href="https://www.llvm.org/">LLVM</a>, Swift &amp; Rust and evolution of languages</li>
  <li>[@35:32] - Backwards compatibility in Rust</li>
  <li>[@39:00] - Experiences and the improvements in Rust</li>
  <li>[@42:44] - Components are added manually, but should they be installed by default?</li>
  <li>[@48:16] - Knowing when to use libc and adding a C runtime</li>
  <li>[@59:58] - Who Code Like a Pro in Rust is written for</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://brndn.io/">Brenden’s Blog</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e051-brenden-matthews.mp3" length="60817752" type="audio/mpeg"/>
			<itunes:duration>1:02:23</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/050-rust-1.56-1.57/</link>
			<pubDate>Thu, 23 Dec 2021 20:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/050-rust-1.56-1.57/</guid>
			

			<title><![CDATA[ What's New in Rust 1.56 and 1.57 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.56 and 1.57 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.56 and 1.57 releases of Rust.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:14] - Rust 2021 edition


  [@01:16] - What is an edition?
  [@05:03] - Disjoint captures in closures
    
      Niko’s “view types” proposal
    
  
  [@09:00] - IntoIterator for arrays
  [@11:12] - Or patterns in macro_rules
  [@13:31] - New default Cargo feature resolver
    
      Details on the new resolver
    
  
  [@15:16] - Additions to the prelude
    
      std::prelude
      FromIterator
    
  
  [@19:38] - Panic macro consistency and new reserved syntax
    
      [@20:33] - Implicit formatting captures (more on Reddit)
      [@25:00] - Reserved syntax for “f-strings”
      [@27:54] - Why panic! had to change
      [@28:55] - Other uses for reserved syntax
    
  
  [@30:15] - Warnings promoted to errors
    
      Future incompatibility warnings
    
  
  [@35:23] - cargo fix


[@36:20] - Rust 1.56


  [@36:30] - Cargo.toml rust-version
    
      Cargo book entry
    
  
  [@42:54] - New bindings in binding @ pattern
  [@44:27] - Stabilized APIs
  [@49:27] - Changelog deep-dive
    
      [@49:27] - impl From&lt;[(K, V), N]&gt; for collections
        
          RFC for adding collection literal macros
        
      
      [@53:07] - Remove P: Unpin bound on impl Future for Pin
      [@55:16] - Instant backsliding protection optimization
        
          May end up being removed!
        
      
      [@58:01] - LLVM 13 upgrade
        
          LLVM’s new pass manager
        
      
      [@59:23] - Have Cargo set environment variables
    
  
  [@1:00:17] - Rust 1.56.1
    
      Security advisory
      The “Trojan Source” vulnerability
      Rust RFC on non-ASCII identifiers
    
  


[@1:04:52] - Rust 1.57


  [@1:05:20] - Panic in const contexts
  [@1:07:20] - Custom Cargo profiles
    
      Cargo book on profiles
    
  
  [@1:08:45] - Fallible allocation
    
      Fallible collection allocation RFC
      Linux Torvals on handling allocation failures
      Rust features still needed by the Linux kernel
    
  
  [@1:12:33] - Stabilized APIs
  [@1:16:45] - Changelog deep-dive
    
      [@1:16:50] - Vec::leak no longer allocates
      [@1:18:03] - Nintendo 3DS added as Tier 3 platform
      [@1:19:03] - Cargo no longer passes through RUSTFLAGS
        
          Environment variables set by Cargo
        
      
      [@1:20:13] - Lots more #[must_use] in std
      [@1:22:00] - File::read_to_* optimized
      [@1:23:24] - Curly braces macros accept following . and ?
    
  
  [@1:25:22] - Banter – Rust all the way down.


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel

Transcript: Eric Seppanen
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.56 and 1.57 releases of Rust.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0114---rust-2021-edition">[@01:14] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/index.html">Rust 2021 edition</a></h4>

<ul>
  <li>[@01:16] - <a href="https://rust-lang.github.io/rfcs/3085-edition-2021.html">What is an edition?</a></li>
  <li>[@05:03] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/disjoint-capture-in-closures.html">Disjoint captures in closures</a>
    <ul>
      <li><a href="https://smallcultfollowing.com/babysteps//blog/2021/11/05/view-types/">Niko’s “view types” proposal</a></li>
    </ul>
  </li>
  <li>[@09:00] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/IntoIterator-for-arrays.html"><code>IntoIterator</code> for arrays</a></li>
  <li>[@11:12] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/or-patterns-macro-rules.html">Or patterns in macro_rules</a></li>
  <li>[@13:31] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/default-cargo-resolver.html">New default Cargo feature resolver</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/cargo/reference/resolver.html#feature-resolver-version-2">Details on the new resolver</a></li>
    </ul>
  </li>
  <li>[@15:16] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/prelude.html">Additions to the prelude</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/prelude/index.html"><code>std::prelude</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html"><code>FromIterator</code></a></li>
    </ul>
  </li>
  <li>[@19:38] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/panic-macro-consistency.html">Panic macro consistency</a> and <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/reserving-syntax.html">new reserved syntax</a>
    <ul>
      <li>[@20:33] - <a href="https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html">Implicit formatting captures</a> (more <a href="https://www.reddit.com/r/rust/comments/qu3cli/pr_to_stabilize_implicit_captures_in_string/">on Reddit</a>)</li>
      <li>[@25:00] - Reserved syntax for “f-strings”</li>
      <li>[@27:54] - Why <code>panic!</code> had to change</li>
      <li>[@28:55] - Other uses for reserved syntax</li>
    </ul>
  </li>
  <li>[@30:15] - <a href="https://doc.rust-lang.org/stable/edition-guide/rust-2021/warnings-promoted-to-error.html">Warnings promoted to errors</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/2834-cargo-report-future-incompat.html">Future incompatibility warnings</a></li>
    </ul>
  </li>
  <li>[@35:23] - <a href="https://doc.rust-lang.org/stable/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html"><code>cargo fix</code></a></li>
</ul>

<h4 id="3620---rust-156">[@36:20] - <a href="https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html">Rust 1.56</a></h4>

<ul>
  <li>[@36:30] - <a href="https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#cargo-rust-version">Cargo.toml <code>rust-version</code></a>
    <ul>
      <li><a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field">Cargo book entry</a></li>
    </ul>
  </li>
  <li>[@42:54] - <a href="https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#new-bindings-in-binding--pattern">New bindings in <code>binding @ pattern</code></a></li>
  <li>[@44:27] - <a href="https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#stabilized-apis">Stabilized APIs</a></li>
  <li>[@49:27] - Changelog deep-dive
    <ul>
      <li>[@49:27] - <a href="https://github.com/rust-lang/rust/pull/84111"><code>impl From&lt;[(K, V), N]&gt;</code> for collections</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rfcs/issues/542">RFC for adding collection literal macros</a></li>
        </ul>
      </li>
      <li>[@53:07] - <a href="https://github.com/rust-lang/rust/pull/81363">Remove <code>P: Unpin</code> bound on <code>impl Future for Pin</code></a></li>
      <li>[@55:16] - <a href="https://github.com/rust-lang/rust/pull/83093">Instant backsliding protection optimization</a>
        <ul>
          <li><a href="https://github.com/rust-lang/rust/pull/89926">May end up being removed!</a></li>
        </ul>
      </li>
      <li>[@58:01] - <a href="https://github.com/rust-lang/rust/pull/87570">LLVM 13 upgrade</a>
        <ul>
          <li><a href="https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/">LLVM’s new pass manager</a></li>
        </ul>
      </li>
      <li>[@59:23] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/config.html#env">Have Cargo set environment variables</a></li>
    </ul>
  </li>
  <li>[@1:00:17] - <a href="https://blog.rust-lang.org/2021/11/01/Rust-1.56.1.html">Rust 1.56.1</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2021/11/01/cve-2021-42574.html">Security advisory</a></li>
      <li><a href="https://trojansource.codes/">The “Trojan Source” vulnerability</a></li>
      <li><a href="https://rust-lang.github.io/rfcs/2457-non-ascii-idents.html">Rust RFC on non-ASCII identifiers</a></li>
    </ul>
  </li>
</ul>

<h4 id="10452---rust-157">[@1:04:52] - <a href="https://blog.rust-lang.org/2021/12/02/Rust-1.57.0.html">Rust 1.57</a></h4>

<ul>
  <li>[@1:05:20] - <a href="https://blog.rust-lang.org/2021/12/02/Rust-1.57.0.html#panic-in-const-contexts">Panic in const contexts</a></li>
  <li>[@1:07:20] - <a href="https://blog.rust-lang.org/2021/12/02/Rust-1.57.0.html#cargo-support-for-custom-profiles">Custom Cargo profiles</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/cargo/reference/profiles.html">Cargo book on profiles</a></li>
    </ul>
  </li>
  <li>[@1:08:45] - <a href="https://blog.rust-lang.org/2021/12/02/Rust-1.57.0.html#fallible-allocation">Fallible allocation</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/2116-alloc-me-maybe.html">Fallible collection allocation RFC</a></li>
      <li><a href="https://lkml.org/lkml/2021/4/14/1099">Linux Torvals on handling allocation failures</a></li>
      <li><a href="https://github.com/Rust-for-Linux/linux/issues/2">Rust features still needed by the Linux kernel</a></li>
    </ul>
  </li>
  <li>[@1:12:33] - <a href="https://blog.rust-lang.org/2021/12/02/Rust-1.57.0.html#stabilized-apis">Stabilized APIs</a></li>
  <li>[@1:16:45] - Changelog deep-dive
    <ul>
      <li>[@1:16:50] - <a href="https://github.com/rust-lang/rust/pull/89337/"><code>Vec::leak</code> no longer allocates</a></li>
      <li>[@1:18:03] - <a href="https://github.com/rust-lang/rust/pull/88529/">Nintendo 3DS added as Tier 3 platform</a></li>
      <li>[@1:19:03] - <a href="https://github.com/rust-lang/cargo/issues/10111">Cargo no longer passes through <code>RUSTFLAGS</code></a>
        <ul>
          <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts">Environment variables set by Cargo</a></li>
        </ul>
      </li>
      <li>[@1:20:13] - <a href="https://github.com/rust-lang/rust/issues/89692/">Lots more <code>#[must_use]</code> in <code>std</code></a></li>
      <li>[@1:22:00] - <a href="https://github.com/rust-lang/rust/pull/89582/"><code>File::read_to_*</code> optimized</a></li>
      <li>[@1:23:24] - <a href="https://github.com/rust-lang/rust/pull/88690/">Curly braces macros accept following <code>.</code> and <code>?</code></a></li>
    </ul>
  </li>
  <li>[@1:25:22] - Banter – Rust all the way down.</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>

<p>Transcript: <a href="https://github.com/ericseppanen">Eric Seppanen</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e050-rust-1.56-1.57.mp3" length="62815762" type="audio/mpeg"/>
			<itunes:duration>1:27:14</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/049-lily-mara/</link>
			<pubDate>Sat, 11 Dec 2021 17:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/049-lily-mara/</guid>
			

			<title><![CDATA[ Refactoring to Rust with Lily Mara ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Lily Mara, the author of the book Refactoring to Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Lily Mara, the author of the book Refactoring to Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@1:26] -	Lily’s Bio
  [@3:33] -	Her blogs helped her improve her writing
  [@5:09] -	How the book came to be
  [@9:34] -	Knowing when to add a new language to an existing project
  [@12:07] - Tools for measuring memory usage
  [@15:04] - Garbage collection
  [@18:30] - Strongly and weakly typed languages &amp; dynamic vs static dispatch
  [@21:13] - About the book
  [@25:40] - Go being treated like a C library
  [@27:02] - Memory allocators
  [@35:51] - When did Lily started working on the book?
  [@37:44] - Writing examples (it’s hard!)
  [@46:36] - How technical are the editors?
  [@49:00] - The Rust community is very welcoming
  [@50:14] - Publishers that are publishing Rust books
  [@52:17] - Lily’s Twitch stream for Manning
  [@53:07] - Lily’s advice for aspiring Rust developers


Other Resources

  PyO3
  Flutter Rust Bridge


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/TheLily_Mara">Lily Mara</a>, the author of the book <a href="https://www.manning.com/books/refactoring-to-rust">Refactoring to Rust</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@1:26] -	Lily’s Bio</li>
  <li>[@3:33] -	Her <a href="https://onesignal.com/blog/author/lily/">blogs</a> helped her improve her writing</li>
  <li>[@5:09] -	How the <a href="https://www.manning.com/books/refactoring-to-rust">book</a> came to be</li>
  <li>[@9:34] -	Knowing when to add a new language to an existing project</li>
  <li>[@12:07] - Tools for measuring memory usage</li>
  <li>[@15:04] - Garbage collection</li>
  <li>[@18:30] - Strongly and weakly typed languages &amp; dynamic vs static dispatch</li>
  <li>[@21:13] - About the book</li>
  <li>[@25:40] - Go being treated like a C library</li>
  <li>[@27:02] - Memory allocators</li>
  <li>[@35:51] - When did Lily started working on the book?</li>
  <li>[@37:44] - Writing examples (it’s hard!)</li>
  <li>[@46:36] - How technical are the editors?</li>
  <li>[@49:00] - The Rust community is very welcoming</li>
  <li>[@50:14] - Publishers that are publishing Rust books</li>
  <li>[@52:17] - Lily’s Twitch stream for Manning</li>
  <li>[@53:07] - Lily’s advice for aspiring Rust developers</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/PyO3/pyo3">PyO3</a></li>
  <li><a href="https://github.com/fzyzcjy/flutter_rust_bridge">Flutter Rust Bridge</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e049-lily-mara.mp3" length="55910810" type="audio/mpeg"/>
			<itunes:duration>0:57:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/048-herbert-wolverson/</link>
			<pubDate>Fri, 26 Nov 2021 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/048-herbert-wolverson/</guid>
			

			<title><![CDATA[ Game Development with Herbert Wolverson ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Herbert Wolverson, the author of the book Hands-on Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Herbert Wolverson, the author of the book Hands-on Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@0:57] - About Herbert and his book
  [@3:01] - Explaining Rust’s traits
  [@4:27] - The book is for intermediate programming
  [@5:32] - Most beneficial part about using Rust over other languages
  [@7:42] - Unreal Engine
  [@11:13] - Unreal, Unity &amp; Godot
  [@13:44] - Bevy Engine &amp; Amethyst Engine
  [@18:31] - Zig
  [@20:38] - Herbert’s Bracket-Lib engine
  [@24:18] - Creating a game engine from scratch
  [@34:03] - ECS (Entity Component System) &amp; OPP (Object-Oriented Programming)
  [@42:02] - Other game engines mentioned in the book
  [@43:12] - Macroquad &amp; Miniquad
  [@45:39] - Amethyst
  [@49:51] - RG3D
  [@51:58] - Book Status &amp; Rust Brain Teasers
  [@57:44] - Pragprog Publishing
  [@01:02:30] - How to contact Herbert


Other Resources

  Hands-on Rust
  Roguelike Tutorial
  The Bracket


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/herberticus">Herbert Wolverson</a>, the author of the book <a href="https://pragprog.com/titles/hwrust/hands-on-rust/">Hands-on Rust</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@0:57] - About Herbert and his <a href="https://pragprog.com/titles/hwrust/hands-on-rust/">book</a></li>
  <li>[@3:01] - Explaining Rust’s <a href="https://doc.rust-lang.org/book/ch10-02-traits.html">traits</a></li>
  <li>[@4:27] - The book is for intermediate programming</li>
  <li>[@5:32] - Most beneficial part about using Rust over other languages</li>
  <li>[@7:42] - <a href="https://www.unrealengine.com/">Unreal Engine</a></li>
  <li>[@11:13] - Unreal, <a href="https://unity.com/">Unity</a> &amp; <a href="https://godotengine.org/">Godot</a></li>
  <li>[@13:44] - <a href="https://bevyengine.org/">Bevy</a> Engine &amp; <a href="https://amethyst.rs/">Amethyst</a> Engine</li>
  <li>[@18:31] - <a href="https://ziglang.org/">Zig</a></li>
  <li>[@20:38] - Herbert’s <a href="https://bracketproductions.com/">Bracket-Lib</a> engine</li>
  <li>[@24:18] - Creating a game engine from scratch</li>
  <li>[@34:03] - ECS (Entity Component System) &amp; OPP (Object-Oriented Programming)</li>
  <li>[@42:02] - Other game engines mentioned in the book</li>
  <li>[@43:12] - Macroquad &amp; Miniquad</li>
  <li>[@45:39] - Amethyst</li>
  <li>[@49:51] - <a href="https://rg3d.rs/">RG3D</a></li>
  <li>[@51:58] - Book Status &amp; <a href="https://pragprog.com/titles/hwrustbrain/rust-brain-teasers/">Rust Brain Teasers</a></li>
  <li>[@57:44] - <a href="https://pragprog.com/">Pragprog</a> Publishing</li>
  <li>[@01:02:30] - How to contact Herbert</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://hands-on-rust.com/">Hands-on Rust</a></li>
  <li><a href="https://github.com/amethyst/rustrogueliketutorial">Roguelike Tutorial</a></li>
  <li><a href="https://github.com/thebracket/">The Bracket</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e048-herbert-wolverson.mp3" length="63273551" type="audio/mpeg"/>
			<itunes:duration>1:05:00</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/047-jane-lusby/</link>
			<pubDate>Fri, 19 Nov 2021 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/047-jane-lusby/</guid>
			

			<title><![CDATA[ Error Handling in Rust with Jane Lusby ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Jane Lusby, the Error Handling Project Group Lead, and also the Project Director of Collaboration at Rust Foundation.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Jane Lusby, the Error Handling Project Group Lead, and also the Project Director of Collaboration at Rust Foundation.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:57] - Jane’s bio
  [@04:10] - Jane’s contributions to Clippy
  [@08:54] - Eyre
  [@15:49] - Failure &amp; Anyhow
  [@17:13] - Choosing between anyhow &amp; eyre
  [@20:05] - AnyError and ThisError
  [@23:31] - Color-eyre
  [@26:08] - Other crates that are also in eyre
  [@28:59] - Error Handling Group
  [@38:12] - Collaboration with other groups
  [@46:05] - Rust 2021 &amp; 2018 Editions


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/yaahc">Jane Lusby</a>, the Error Handling Project Group Lead, and also the Project Director of Collaboration at <a href="https://foundation.rust-lang.org/">Rust Foundation</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:57] - Jane’s bio</li>
  <li>[@04:10] - Jane’s contributions to <a href="https://github.com/rust-lang/rust-clippy">Clippy</a></li>
  <li>[@08:54] - <a href="https://github.com/yaahc/eyre">Eyre</a></li>
  <li>[@15:49] - <a href="https://docs.rs/failure/">Failure</a> &amp; <a href="https://docs.rs/anyhow/">Anyhow</a></li>
  <li>[@17:13] - Choosing between anyhow &amp; eyre</li>
  <li>[@20:05] - <a href="https://docs.rs/err-context/0.1/err_context/type.AnyError.html">AnyError</a> and <a href="https://docs.rs/thiserror/">ThisError</a></li>
  <li>[@23:31] - <a href="https://github.com/yaahc/color-eyre">Color-eyre</a></li>
  <li>[@26:08] - Other crates that are also in eyre</li>
  <li>[@28:59] - <a href="https://github.com/rust-lang/project-error-handling">Error Handling Group</a></li>
  <li>[@38:12] - Collaboration with other groups</li>
  <li>[@46:05] - Rust 2021 &amp; 2018 Editions</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e047-jane-lusby.mp3" length="51684453" type="audio/mpeg"/>
			<itunes:duration>52:58</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/046-alice-ryhl/</link>
			<pubDate>Fri, 12 Nov 2021 18:25:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/046-alice-ryhl/</guid>
			

			<title><![CDATA[ Tokio Ecosystem with Alice Ryhl ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Alice Ryhl, one of the maintainers of the open source project Tokio.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Alice Ryhl, one of the maintainers of the open source project Tokio.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:40] - Alice’s Bio
  [@01:08] - Managing pull requests on GitHub
  [@05:00] - Alice’s involvement in Tokio
  [@08:23] - Tokio’s topics page
  [@11:06] - Alice’s favorite part of contributing
  [@12:55] - Changes in Tokio since Alice joined
  [@16:52] - Measuring metrics
  [@19:38] - Cooperative &amp; preemptive scheduling
  [@24:30] - Diesel
  [@25:45] - Definition of [blocking]((https://ryhl.io/blog/async-what-is-blocking/)
  [@27:37] - I/O threads
  [@31:21] - What are sleeping threads?
  [@33:41] - Tokio Console
  [@41:14] - Pros and cons of using actors
  [@47:05] - Alice’s academic background
  [@49:22] - Tokio’s upcoming roadmap
  [@57:33] - Replacing epoll with io_uring
  [@58:56] - Axum, Tower, and Loom
  [@01:01:45] - Web frameworks for Rust
  [@01:05:57] - How to contact Alice


Other Resources

  Rust in Android Platform
  Tokio’s Discord
  Tokio’s Topics Pages
  Cooperative Scheduling
  Tokio Metrics
  Actors in Tokio
  io_uring with Tokio


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://ryhl.io/">Alice Ryhl</a>, one of the maintainers of the open source project <a href="https://tokio.rs/">Tokio</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:40] - Alice’s Bio</li>
  <li>[@01:08] - Managing pull requests on GitHub</li>
  <li>[@05:00] - Alice’s involvement in Tokio</li>
  <li>[@08:23] - Tokio’s topics page</li>
  <li>[@11:06] - Alice’s favorite part of contributing</li>
  <li>[@12:55] - Changes in Tokio since Alice joined</li>
  <li>[@16:52] - Measuring metrics</li>
  <li>[@19:38] - Cooperative &amp; preemptive scheduling</li>
  <li>[@24:30] - <a href="https://diesel.rs/">Diesel</a></li>
  <li>[@25:45] - Definition of [blocking]((https://ryhl.io/blog/async-what-is-blocking/)</li>
  <li>[@27:37] - I/O threads</li>
  <li>[@31:21] - What are sleeping threads?</li>
  <li>[@33:41] - <a href="https://tokio.rs/blog/2021-09-console-dev-diary-1">Tokio Console</a></li>
  <li>[@41:14] - Pros and cons of using actors</li>
  <li>[@47:05] - Alice’s academic background</li>
  <li>[@49:22] - Tokio’s upcoming roadmap</li>
  <li>[@57:33] - Replacing epoll with io_uring</li>
  <li>[@58:56] - <a href="https://github.com/tokio-rs/axum">Axum</a>, <a href="https://github.com/tower-rs/tower">Tower</a>, and <a href="https://github.com/tokio-rs/loom">Loom</a></li>
  <li>[@01:01:45] - Web frameworks for Rust</li>
  <li>[@01:05:57] - How to contact Alice</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html">Rust in Android Platform</a></li>
  <li><a href="https://discord.com/invite/tokio">Tokio’s Discord</a></li>
  <li><a href="https://tokio.rs/tokio/topics">Tokio’s Topics Pages</a></li>
  <li><a href="https://tokio.rs/blog/2020-04-preemption">Cooperative Scheduling</a></li>
  <li><a href="https://github.com/tokio-rs/tokio/issues/4073">Tokio Metrics</a></li>
  <li><a href="https://ryhl.io/blog/actors-with-tokio/">Actors in Tokio</a></li>
  <li><a href="https://github.com/tokio-rs/tokio-uring/">io_uring with Tokio</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e046-alice-ryhl.mp3" length="66908058" type="audio/mpeg"/>
			<itunes:duration>1:08:50</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/045-sean-arthur/</link>
			<pubDate>Fri, 05 Nov 2021 15:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/045-sean-arthur/</guid>
			

			<title><![CDATA[ Hyper with Sean McArthur ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Sean McArthur, the creator of Hyper, an HTTP library for Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Sean McArthur, the creator of Hyper, an HTTP library for Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@01:37] - The history of Hyper
  [@07:41] - Is Hyper a client or a server side component?
  [@11:09] - Async/await
  [@13:24] - Benefits to using async over blocking?
  [@14:35] - Relationship between Tokio and Hyper
  [@16:11] - Mio – Metal IO
  [@16:48] - Can Hyper run on other async runtimes?
  [@18:27] - Fuchsia OS
  [@22:39] - Governance of the Hyper Project
  [@25:25] - Why did Hyper choose Tokio?
  [@34:35] - Reqwest
  [@36:07] - cURL
  [@38:29] - What is a C application binary interface (ABI)?
  [@50:29] - HTTP/3 support in future
  [@50:54] - Differences between HTTP/2 and HTTP/3
  [@53:26] - Rust library for C
  [@57:26] - Upcoming plan for Hyper
  [@01:00:36] - Advice for newcomers to Rust?


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/seanmonstar">Sean McArthur</a>, the creator of <a href="https://github.com/hyperium/hyper">Hyper</a>, an HTTP library for Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@01:37] - The history of Hyper</li>
  <li>[@07:41] - Is Hyper a client or a server side component?</li>
  <li>[@11:09] - Async/await</li>
  <li>[@13:24] - Benefits to using async over blocking?</li>
  <li>[@14:35] - Relationship between <a href="https://github.com/tokio-rs/tokio">Tokio</a> and Hyper</li>
  <li>[@16:11] - <a href="https://github.com/tokio-rs/mio">Mio – Metal IO</a></li>
  <li>[@16:48] - Can Hyper run on other async runtimes?</li>
  <li>[@18:27] - <a href="https://fuchsia.dev/">Fuchsia OS</a></li>
  <li>[@22:39] - Governance of the Hyper Project</li>
  <li>[@25:25] - Why did Hyper choose Tokio?</li>
  <li>[@34:35] - <a href="https://github.com/seanmonstar/reqwest">Reqwest</a></li>
  <li>[@36:07] - <a href="https://curl.se/">cURL</a></li>
  <li>[@38:29] - What is a C application binary interface (ABI)?</li>
  <li>[@50:29] - HTTP/3 support in future</li>
  <li>[@50:54] - Differences between <a href="https://http2.github.io/">HTTP/2</a> and <a href="https://blog.cloudflare.com/http3-the-past-present-and-future/">HTTP/3</a></li>
  <li>[@53:26] - Rust library for C</li>
  <li>[@57:26] - Upcoming plan for Hyper</li>
  <li>[@01:00:36] - Advice for newcomers to Rust?</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e045-sean-mcarthur.mp3" length="63525368" type="audio/mpeg"/>
			<itunes:duration>1:05:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/044-zach-lloyd/</link>
			<pubDate>Wed, 03 Nov 2021 02:11:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/044-zach-lloyd/</guid>
			

			<title><![CDATA[ Warp with Zach Lloyd ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Zach Lloyd, the founder of Warp. Warp is a blazingly fast, Rust-based terminal that makes you and your team more productive.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Zach Lloyd, the founder of Warp. Warp is a blazingly fast, Rust-based terminal that makes you and your team more productive.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@00:58] - Is Warp a GUI app?
  [@04:08] - The history of Warp
  [@06:27] - Difference between Warp and other Unix shells like Csh
  [@10:22] - Warp’s open API
  [@13:50] - Terminal improvements over the last 10 years
  [@17:06] - Sharing blocks &amp; live collaboration
  [@19:08] - Will Warp run on multiple platforms?
  [@21:45] - Zach’s background
  [@25:38] - Why Rust over Go?
  [@29:51] - Warp’s dependencies
  [@36:36] - Objective-C vs. Rust
  [@41:49] - Zach’s build pipeline
  [@43:21] - cargo-bundle
  [@44:52] - Warp’s business model
  [@46:28] - Postman
  [@49:50] - Funding &amp; business pitch of Warp
  [@54:30] - Zach’s Rust setup
  [@57:46] - Tips for newcomers to Rust


Other Resources

  Warp’s Twitter
  Warp’s GitHub
  Zach’s engineering handbook
    Credits
    Intro Theme: Aerocity
  


Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/zachlloydtweets">Zach Lloyd</a>, the founder of <a href="https://www.warp.dev">Warp</a>. Warp is a blazingly fast, Rust-based terminal that makes you and your team more productive.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@00:58] - Is Warp a GUI app?</li>
  <li>[@04:08] - The history of Warp</li>
  <li>[@06:27] - Difference between Warp and other Unix shells like <a href="http://cshell.net/">Csh</a></li>
  <li>[@10:22] - Warp’s open API</li>
  <li>[@13:50] - Terminal improvements over the last 10 years</li>
  <li>[@17:06] - Sharing blocks &amp; live collaboration</li>
  <li>[@19:08] - Will Warp run on multiple platforms?</li>
  <li>[@21:45] - Zach’s background</li>
  <li>[@25:38] - Why Rust over <a href="https://golang.org/">Go</a>?</li>
  <li>[@29:51] - Warp’s dependencies</li>
  <li>[@36:36] - Objective-C vs. Rust</li>
  <li>[@41:49] - Zach’s build pipeline</li>
  <li>[@43:21] - <a href="https://github.com/burtonageo/cargo-bundle"><code>cargo-bundle</code></a></li>
  <li>[@44:52] - Warp’s business model</li>
  <li>[@46:28] - <a href="https://www.postman.com/">Postman</a></li>
  <li>[@49:50] - Funding &amp; business pitch of Warp</li>
  <li>[@54:30] - Zach’s Rust setup</li>
  <li>[@57:46] - Tips for newcomers to Rust</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://twitter.com/warpdotdev">Warp’s Twitter</a></li>
  <li><a href="https://github.com/warpdotdev/warp">Warp’s GitHub</a></li>
  <li><a href="https://thezbook.com/">Zach’s engineering handbook</a>
    <h2 id="credits">Credits</h2>
    <p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>
  </li>
</ul>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e044-zach-lloyd.mp3" length="61148368" type="audio/mpeg"/>
			<itunes:duration>1:02:51</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/043-bastian-gruber/</link>
			<pubDate>Tue, 26 Oct 2021 01:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/043-bastian-gruber/</guid>
			

			<title><![CDATA[ Rust Web Development with Bastian Gruber ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Bastian Gruber, author of “Rust Web Development”, about his book.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Bastian Gruber, author of “Rust Web Development”, about his book.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@01:22] - Bastian’s Bio
  [@02:53] - “Rust Web Development” on Manning
  [@04:06] - Using Rust for web development
  [@04:52] - Hyper.rs
  [@05:13] - Choices of frameworks for Rust web development
  [@07:49] - Rocket in production
  [@08:35] - Tools for Rust web services
  [@10:39] - Choosing SQLx over Diesel?
  [@13:58] - Why Bastian switched from Node.js to Rust
  [@17:36] - Bastian’s role at Twilio
  [@19:57] - Popularity of Rust in Berlin
  [@25:57] - Warp
  [@29:14] - Zero to Production in Rust
  [@31:03] - How does Bastian write?
  [@37:48] - Rust vs other languages
  [@42:40] - Tips to help you stand out as a Rust developer
  [@46:21] - Tips for beginners


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/gruberb">Bastian Gruber</a>, author of <a href="https://www.rustwebdevelopment.com/">“Rust Web Development”</a>, about his book.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@01:22] - <a href="https://twitter.com/recvonline">Bastian’s Bio</a></li>
  <li>[@02:53] - <a href="https://www.manning.com/books/rust-web-development">“Rust Web Development” on Manning</a></li>
  <li>[@04:06] - Using Rust for web development</li>
  <li>[@04:52] - <a href="https://hyper.rs/">Hyper.rs</a></li>
  <li>[@05:13] - Choices of frameworks for Rust web development</li>
  <li>[@07:49] - <a href="https://rocket.rs/">Rocket</a> in production</li>
  <li>[@08:35] - Tools for Rust web services</li>
  <li>[@10:39] - Choosing <a href="https://github.com/launchbadge/sqlx">SQLx</a> over <a href="https://diesel.rs/">Diesel</a>?</li>
  <li>[@13:58] - Why Bastian switched from <a href="https://nodejs.org/en/">Node.js</a> to Rust</li>
  <li>[@17:36] - Bastian’s role at Twilio</li>
  <li>[@19:57] - Popularity of Rust in Berlin</li>
  <li>[@25:57] - <a href="https://github.com/seanmonstar/warp">Warp</a></li>
  <li>[@29:14] - <a href="https://www.zero2prod.com/index.html">Zero to Production in Rust</a></li>
  <li>[@31:03] - How does Bastian write?</li>
  <li>[@37:48] - Rust vs other languages</li>
  <li>[@42:40] - Tips to help you stand out as a Rust developer</li>
  <li>[@46:21] - Tips for beginners</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e043-bastian-gruber.mp3" length="51158078" type="audio/mpeg"/>
			<itunes:duration>52:28</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/039-rust-1.54-1.55/</link>
			<pubDate>Mon, 25 Oct 2021 01:27:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/039-rust-1.54-1.55/</guid>
			

			<title><![CDATA[ What's New in Rust 1.54 and 1.55 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.54 and 1.55 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.54 and 1.55 releases of Rust.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:37] - Rust 1.54


  [@00:55] - Attributes can invoke function-like macros
    
      The doc attribute
    
  
  [@04:04] - wasm32 intrinsics stabilized
    
      std::intrinsics
      Target families
    
  
  [@06:59] - Incremental compilation is re-enabled by default
    
      Rust 1.52.1 disables incremental compilation
      Incremental compilation issues tracking issue
    
  
  [@08:55] - Stabilized APIs
  [@11:00] - Changelog deep-div
    
      [@11:04] - cargo report and future incompatibility lints
      [@14:12] - LLVM mutable noalias is on again
      [@16:24] - CARGO_TARGET_TMPDIR
      [@17:24] - Use semver 1.0
        
          Checking semver 1.0 against crates.io
        
      
    
  


[@19:18] - Rust 1.55


  [@19:26] - Cargo deduplicates compiler errors
  [@20:24] - Faster, more correct float parsing
    
      The PR
      Reddit post with details
    
  
  [@22:20] - io::ErrorKind variants updates
  [@28:08] - Open range patterns added
  [@29:44] - Stabilized APIs
    
      [@29:44] - MaybeUninit
      [@32:44] - ops::ControlFlow
        
          Try trait (v2) RFC
        
      
      [@35:59] - string::Drain::as_str
    
  
  [@37:52] - Changelog deep-dive
    
      [@38:08] - Build scripts informed about rustc configuration
      [@38:38] - cargo clippy --fix
      [@39:10] - Clippy lint override survey
      [@40:07] - #[doc(hidden)] on trait implementations
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel

Transcript: Eric Seppanen
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.54 and 1.55 releases of Rust.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0037---rust-154">[@00:37] - <a href="https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html">Rust 1.54</a></h4>

<ul>
  <li>[@00:55] - <a href="https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#attributes-can-invoke-function-like-macros">Attributes can invoke function-like macros</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/rustdoc/the-doc-attribute.html">The <code>doc</code> attribute</a></li>
    </ul>
  </li>
  <li>[@04:04] - <a href="https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#wasm32-intrinsics-stabilized">wasm32 intrinsics stabilized</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/intrinsics/index.html"><code>std::intrinsics</code></a></li>
      <li><a href="https://doc.rust-lang.org/reference/conditional-compilation.html#target_family">Target families</a></li>
    </ul>
  </li>
  <li>[@06:59] - <a href="https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#incremental-compilation-is-re-enabled-by-default">Incremental compilation is re-enabled by default</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html">Rust 1.52.1 disables incremental compilation</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/84970">Incremental compilation issues tracking issue</a></li>
    </ul>
  </li>
  <li>[@08:55] - <a href="https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#stabilized-apis">Stabilized APIs</a></li>
  <li>[@11:00] - Changelog deep-div
    <ul>
      <li>[@11:04] - <a href="https://github.com/rust-lang/cargo/pull/9438"><code>cargo report</code> and future incompatibility lints</a></li>
      <li>[@14:12] - <a href="https://github.com/rust-lang/rust/pull/82834">LLVM mutable noalias is on again</a></li>
      <li>[@16:24] - <a href="https://github.com/rust-lang/cargo/pull/9375"><code>CARGO_TARGET_TMPDIR</code></a></li>
      <li>[@17:24] - <a href="https://github.com/rust-lang/cargo/pull/9508">Use semver 1.0</a>
        <ul>
          <li><a href="https://github.com/dtolnay/semver/issues/237">Checking semver 1.0 against crates.io</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="1918---rust-155">[@19:18] - <a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html">Rust 1.55</a></h4>

<ul>
  <li>[@19:26] - <a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#cargo-deduplicates-compiler-errors">Cargo deduplicates compiler errors</a></li>
  <li>[@20:24] - <a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#faster-more-correct-float-parsing">Faster, more correct float parsing</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/86761">The PR</a></li>
      <li><a href="https://www.reddit.com/r/rust/comments/omelz4/making_rust_float_parsing_fast_libcore_edition/">Reddit post with details</a></li>
    </ul>
  </li>
  <li>[@22:20] - <a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#stdioerrorkind-variants-updated"><code>io::ErrorKind</code> variants updates</a></li>
  <li>[@28:08] - <a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#open-range-patterns-added">Open range patterns added</a></li>
  <li>[@29:44] - <a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li>[@29:44] - <a href="https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html"><code>MaybeUninit</code></a></li>
      <li>[@32:44] - <a href="https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html"><code>ops::ControlFlow</code></a>
        <ul>
          <li><a href="https://rust-lang.github.io/rfcs/3058-try-trait-v2.html">Try trait (v2) RFC</a></li>
        </ul>
      </li>
      <li>[@35:59] - <a href="https://doc.rust-lang.org/stable/std/string/struct.Drain.html#method.as_str"><code>string::Drain::as_str</code></a></li>
    </ul>
  </li>
  <li>[@37:52] - Changelog deep-dive
    <ul>
      <li>[@38:08] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts">Build scripts informed about rustc configuration</a></li>
      <li>[@38:38] - <a href="https://github.com/rust-lang/rust-clippy/pull/7405"><code>cargo clippy --fix</code></a></li>
      <li>[@39:10] - <a href="https://github.com/rust-lang/rust-clippy/issues/7666">Clippy lint override survey</a></li>
      <li>[@40:07] - <a href="https://github.com/rust-lang/rust/pull/86513"><code>#[doc(hidden)]</code> on trait implementations</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://www.softwaresessions.com">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>

<p>Transcript: <a href="https://github.com/ericseppanen">Eric Seppanen</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e039-rust-1.54-1.55.mp3" length="32018703" type="audio/mpeg"/>
			<itunes:duration>0:44:28</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/042-ben-striegel/</link>
			<pubDate>Fri, 22 Oct 2021 00:40:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/042-ben-striegel/</guid>
			

			<title><![CDATA[ History of Rust with Ben Striegel ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Ben Striegel, a member of Rust’s official community outreach team, about the history of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Ben Striegel, a member of Rust’s official community outreach team, about the history of Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@1:56] - What got Ben first interested in Rust?
  [@3:03] - How Ben got involved
  [@9:36] - Rust 1.0
  [@16:21] - What does move mean?
  [@17:36] - The Borrow Checker
  [@20:04] - What language was the Rust compiler first written in?
  [@25:04] - Choosing LLVM over GCC
  [@33:28] - 2 ways to target Windows
  [@34:39] - libc and musl
  [@36:22] - Rust Editions
  [@46:46] - Does Rust have a small standard library?
  [@54:18] - Why TOML? TOML vs YAML
  [@58:53] - “Tree shaking” in Rust?
  [@01:00:48] - Who created Cargo?
  [@01:02:26] - Rust’s milestones
  [@01:07:42] - Mozilla 2020 layoffs
    
      Discussion on /r/rust
    
  
  [@01:12:33] - Will Rust stay open-source?
  [01:18:10] - Future of Rust
  [01:24:48] - Who decides what changes make it into Rust?


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://github.com/bstrie">Ben Striegel</a>, a member of Rust’s official community outreach team, about the history of Rust.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@1:56] - What got Ben first interested in Rust?</li>
  <li>[@3:03] - How Ben got involved</li>
  <li>[@9:36] - Rust 1.0</li>
  <li>[@16:21] - What does <a href="https://doc.rust-lang.org/std/keyword.move.html">move</a> mean?</li>
  <li>[@17:36] - The <a href="https://rustc-dev-guide.rust-lang.org/borrow_check.html">Borrow Checker</a></li>
  <li>[@20:04] - What language was the Rust compiler first written in?</li>
  <li>[@25:04] - Choosing <a href="https://llvm.org/">LLVM</a> over <a href="https://gcc.gnu.org/">GCC</a></li>
  <li>[@33:28] - 2 ways to target Windows</li>
  <li>[@34:39] - <a href="https://crates.io/crates/libc">libc</a> and <a href="https://www.musl-libc.org/">musl</a></li>
  <li>[@36:22] - Rust Editions</li>
  <li>[@46:46] - Does Rust have a small standard library?</li>
  <li>[@54:18] - Why <a href="https://toml.io/en/">TOML</a>? TOML vs <a href="https://yaml.org/">YAML</a></li>
  <li>[@58:53] - <a href="https://webpack.js.org/guides/tree-shaking/">“Tree shaking”</a> in Rust?</li>
  <li>[@01:00:48] - Who created Cargo?</li>
  <li>[@01:02:26] - Rust’s milestones</li>
  <li>[@01:07:42] - <a href="https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/">Mozilla 2020 layoffs</a>
    <ul>
      <li><a href="https://www.reddit.com/r/rust/comments/i7stjy/how_do_mozilla_layoffs_affect_rust/">Discussion on /r/rust</a></li>
    </ul>
  </li>
  <li>[@01:12:33] - Will Rust stay open-source?</li>
  <li>[01:18:10] - Future of Rust</li>
  <li>[01:24:48] - Who decides what changes make it into Rust?</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e042-ben-striegel.mp3" length="89712021" type="audio/mpeg"/>
			<itunes:duration>1:32:39</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/041-carl-lerche/</link>
			<pubDate>Tue, 12 Oct 2021 01:25:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/041-carl-lerche/</guid>
			

			<title><![CDATA[ Tokio with Carl Lerche ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Carl Lerche, a principal engineer at AWS, also one of the founders of  Tokio.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Carl Lerche, a principal engineer at AWS, also one of the founders of  Tokio.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:35] - Carl’s Bio
  [@02:30] - Apache Cassandra
  [@07:45] - Epoll 
  [@07:51] - Kqueue
  [@07:55] - I/O Completion Ports
  [@14:07] - Eventual
  [@18:55] - Module pin
  [@28:35] - What do macros expand to?
  [@30:41] - Cargo-expand
  [@42:44] - What’s new since Tokio 1.0
  [@45:02] - Tokio-console
  [@01:05:15] - Tokio ecosystem


Other Resources

  Carl’s Github
  Carl’s personal blog


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with Carl Lerche, a principal engineer at <a href="https://aws.amazon.com/">AWS</a>, also one of the founders of  <a href="https://tokio.rs/">Tokio</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:35] - <a href="https://twitter.com/carllerche/">Carl’s Bio</a></li>
  <li>[@02:30] - <a href="https://cassandra.apache.org/_/index.html">Apache Cassandra</a></li>
  <li>[@07:45] - <a href="https://man7.org/linux/man-pages/man7/epoll.7.html">Epoll </a></li>
  <li>[@07:51] - <a href="https://www.freebsd.org/cgi/man.cgi?kqueue">Kqueue</a></li>
  <li>[@07:55] - <a href="https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports">I/O Completion Ports</a></li>
  <li>[@14:07] - <a href="https://github.com/carllerche/eventual">Eventual</a></li>
  <li>[@18:55] - <a href="https://doc.rust-lang.org/std/pin/index.html">Module pin</a></li>
  <li>[@28:35] - What do macros expand to?</li>
  <li>[@30:41] - <a href="https://github.com/dtolnay/cargo-expand">Cargo-expand</a></li>
  <li>[@42:44] - What’s new since Tokio 1.0</li>
  <li>[@45:02] - <a href="https://github.com/tokio-rs/console">Tokio-console</a></li>
  <li>[@01:05:15] - Tokio ecosystem</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://github.com/carllerche/">Carl’s Github</a></li>
  <li><a href="https://carllerche.com/">Carl’s personal blog</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e041-carl-lerche.mp3" length="73810256" type="audio/mpeg"/>
			<itunes:duration>1:16:07</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/040-louis-pilford/</link>
			<pubDate>Fri, 01 Oct 2021 16:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/040-louis-pilford/</guid>
			

			<title><![CDATA[ Gleam with Louis Pilfold ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Louis Pilfold, the creator and lead designer of Gleam.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Louis Pilfold, the creator and lead designer of Gleam.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:55] - Louis’s Bio
  [@02:15] - Erlang
  [@09:03] - Rust Project Manager, Cargo
  [@12:15] - Reason of using Rust to implement the compiler
  [@19:01] - Why Erlang?
  [@23:07] - Erlang programming model
  [@27:45] - How does Gleam work?
  [@31:07] - Problems with TypeScript
  [@33:38] - What is Erlang Dialyzer?
  [@38:06] - Changes to Gleam compiler
  [@44:47] - Gleam v0.17
  [@49:45] - Pros and Cons of using Rust as a compiler
  [@52:30] - Tips and Tricks for beginners


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with Louis Pilfold, the creator and lead designer of <a href="https://gleam.run/">Gleam</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@00:55] - <a href="https://twitter.com/louispilfold">Louis’s Bio</a></li>
  <li>[@02:15] - <a href="https://www.erlang.org/">Erlang</a></li>
  <li>[@09:03] - <a href="https://doc.rust-lang.org/book/ch01-03-hello-cargo.html">Rust Project Manager, Cargo</a></li>
  <li>[@12:15] - Reason of using Rust to implement the compiler</li>
  <li>[@19:01] - Why Erlang?</li>
  <li>[@23:07] - Erlang programming model</li>
  <li>[@27:45] - How does Gleam work?</li>
  <li>[@31:07] - Problems with <a href="https://www.typescriptlang.org/">TypeScript</a></li>
  <li>[@33:38] - What is <a href="https://erlang.org/doc/man/dialyzer.html">Erlang Dialyzer</a>?</li>
  <li>[@38:06] - Changes to Gleam compiler</li>
  <li>[@44:47] - <a href="https://gleam.run/news/gleam-v0.17-released/">Gleam v0.17</a></li>
  <li>[@49:45] - Pros and Cons of using Rust as a compiler</li>
  <li>[@52:30] - Tips and Tricks for beginners</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e040-louis-pilford.mp3" length="58430610" type="audio/mpeg"/>
			<itunes:duration>1:00:07</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/038-jon-gjengset/</link>
			<pubDate>Sat, 25 Sep 2021 00:20:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/038-jon-gjengset/</guid>
			

			<title><![CDATA[ Rust for Rustaceans by Jon Gjengset ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Jon Gjengset, a software engineer at AWS, about his book Rust for Rustaceans.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Jon Gjengset, a software engineer at AWS, about his book Rust for Rustaceans.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@11:24] - Noria
  [@13:00] - Jon’s Youtube Channel
  [@21:53] - Crust of Rust
  [@25:13] - What does it mean to be a Rustacean?
    
      Niko Matsakis’ Rustacean Principles
    
  
  [@27:23] - What does intermediate content mean?
  [@30:03] - Chapter on memory in Rust
  [@41:21] - Does Rust prevent bugs?
  [@58:20] - The Linux kernel and memory allocation failures
  [@1:05:43] - Feature flag discoverability
  [@1:10:14] - Tips for beginners


Other Resources

  Jon’s Fosstodon


Credits
Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with Jon Gjengset, a software engineer at <a href="https://aws.amazon.com/">AWS</a>, about his book <a href="https://nostarch.com/rust-rustaceans">Rust for Rustaceans</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>

<ul>
  <li>[@11:24] - <a href="https://github.com/mit-pdos/noria">Noria</a></li>
  <li>[@13:00] - <a href="https://www.youtube.com/c/JonGjengset">Jon’s Youtube Channel</a></li>
  <li>[@21:53] - <a href="https://www.youtube.com/watch?v=rAl-9HwD858&amp;list=PLqbS7AVVErFiWDOAVrPt7aYmnuuOLYvOa">Crust of Rust</a></li>
  <li>[@25:13] - What does it mean to be a Rustacean?
    <ul>
      <li><a href="https://github.com/nikomatsakis/rustacean-principles">Niko Matsakis’ Rustacean Principles</a></li>
    </ul>
  </li>
  <li>[@27:23] - What does intermediate content mean?</li>
  <li>[@30:03] - <a href="https://nostarch.com/download/samples/RustforRustaceans_Ch2new.pdf">Chapter on memory in Rust</a></li>
  <li>[@41:21] - Does Rust prevent bugs?</li>
  <li>[@58:20] - The Linux kernel and memory allocation failures</li>
  <li>[@1:05:43] - Feature flag discoverability</li>
  <li>[@1:10:14] - Tips for beginners</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://fosstodon.org/@jonhoo">Jon’s Fosstodon</a></li>
</ul>

<h2 id="credits">Credits</h2>
<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e038-jon-gjengset.mp3" length="79237006" type="audio/mpeg"/>
			<itunes:duration>1:21:48</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/037-daniel-mckenna/</link>
			<pubDate>Sat, 18 Sep 2021 23:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/037-daniel-mckenna/</guid>
			

			<title><![CDATA[ Rust Code Coverage with Daniel McKenna ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Daniel McKenna, a software enginner, about his code coverage tool for Rust projects, Tarpaulin.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Daniel McKenna, a software enginner, about his code coverage tool for Rust projects, Tarpaulin.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@01:35] - LLVM
  [@05:50] - Vectorcast
  [@07:00] - Cargo-kcov
  [@07:38] - Gdb
  [@07:47] - ptrace.2
  [@14:40] - Arduino
  [@15:47] - Probe-rs
  [@22:42] - Tarpaulin Crater (tater)
  [@23:34] - Tarpaulin-viewer
  [@27:51] - ImGui
  [@31:00] - Ndarray
  [@32:09] - Is rust a competitor of Julia and Python in terms of machine learning?
  [@36:10] - When did Daniel get into programming?
  [@49:20] - Tips for beginners
  [@53:53] - FiraCode


Other Resources

  Writing a Debugger
  Writing a Linux Debugger Setup
  Awesome Rust Mentors


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with Daniel McKenna, a software enginner, about his code coverage tool for Rust projects, <a href="https://github.com/xd009642/tarpaulin">Tarpaulin</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@01:35] - <a href="https://llvm.org/">LLVM</a></li>
  <li>[@05:50] - <a href="https://www.vector.com/int/en/products/products-a-z/software/vectorcast/">Vectorcast</a></li>
  <li>[@07:00] - <a href="https://github.com/kennytm/cargo-kcov">Cargo-kcov</a></li>
  <li>[@07:38] - <a href="https://www.gnu.org/software/gdb/">Gdb</a></li>
  <li>[@07:47] - <a href="https://man7.org/linux/man-pages/man2/ptrace.2.html">ptrace.2</a></li>
  <li>[@14:40] - <a href="https://www.arduino.cc/">Arduino</a></li>
  <li>[@15:47] - <a href="https://github.com/probe-rs/probe-rs">Probe-rs</a></li>
  <li>[@22:42] - <a href="https://github.com/xd009642/tater">Tarpaulin Crater (tater)</a></li>
  <li>[@23:34] - <a href="https://github.com/xd009642/tarpaulin-viewer">Tarpaulin-viewer</a></li>
  <li>[@27:51] - <a href="https://github.com/imgui-rs/imgui-rs">ImGui</a></li>
  <li>[@31:00] - <a href="https://github.com/rust-ndarray/ndarray">Ndarray</a></li>
  <li>[@32:09] - Is rust a competitor of Julia and Python in terms of machine learning?</li>
  <li>[@36:10] - When did Daniel get into programming?</li>
  <li>[@49:20] - Tips for beginners</li>
  <li>[@53:53] - <a href="https://github.com/tonsky/FiraCode">FiraCode</a></li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="http://system.joekain.com/debugger/">Writing a Debugger</a></li>
  <li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">Writing a Linux Debugger Setup</a></li>
  <li><a href="https://rustbeginners.github.io/awesome-rust-mentors/">Awesome Rust Mentors</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e037-daniel-mckenna.mp3" length="53865895" type="audio/mpeg"/>
			<itunes:duration>0:55:49</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/036-luca-palmieri/</link>
			<pubDate>Fri, 10 Sep 2021 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/036-luca-palmieri/</guid>
			

			<title><![CDATA[ From Zero to Production with Luca Palmieri ]]></title>
			<itunes:summary><![CDATA[ Allen Wyma talks with Luca Palmieri, a principal engineer at TrueLayer, about his book called “Zero To Production in Rust”.
 ]]></itunes:summary>
			<description><![CDATA[ Allen Wyma talks with Luca Palmieri, a principal engineer at TrueLayer, about his book called “Zero To Production in Rust”.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps

  [@02:30] - Book ideas
  [@13:20] - Reasons for using Rust in production
  [@10:34] - Asynchronous Programming in Rust
  [@16:45] - Actix Web
  [@32:21] - Challenges in using Rust as backend language
  [@36:30] - What is krustlet?
  [@46:35] - How is the process of writing the book
  [@54:50] - Rust edition 2021
  [@57:40] - Rust’s community
  [@59:37] - Rust for Rustaceans
  [@1:00:26] - Rust in Action
  [@1:01:34] - Tips for beginners


Other Resources

  Luca’s blog
  Hexagonal Architecture


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>Allen Wyma talks with <a href="https://twitter.com/algo_luca">Luca Palmieri</a>, a principal engineer at <a href="https://truelayer.com/">TrueLayer</a>, about his book called <a href="https://www.zero2prod.com/">“Zero To Production in Rust”</a>.</p>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@02:30] - Book ideas</li>
  <li>[@13:20] - Reasons for using Rust in production</li>
  <li>[@10:34] - <a href="https://rust-lang.github.io/async-book/08_ecosystem/00_chapter.html">Asynchronous Programming in Rust</a></li>
  <li>[@16:45] - <a href="https://github.com/actix/actix-web">Actix Web</a></li>
  <li>[@32:21] - Challenges in using Rust as backend language</li>
  <li>[@36:30] - What is <a href="https://krustlet.dev/">krustlet</a>?</li>
  <li>[@46:35] - How is the process of writing the book</li>
  <li>[@54:50] - <a href="https://doc.rust-lang.org/edition-guide/rust-2021/index.html">Rust edition 2021</a></li>
  <li>[@57:40] - Rust’s community</li>
  <li>[@59:37] - <a href="https://nostarch.com/rust-rustaceans">Rust for Rustaceans</a></li>
  <li>[@1:00:26] - <a href="https://www.manning.com/books/rust-in-action">Rust in Action</a></li>
  <li>[@1:01:34] - Tips for beginners</li>
</ul>

<h2 id="other-resources">Other Resources</h2>
<ul>
  <li><a href="https://lpalmieri.com">Luca’s blog</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">Hexagonal Architecture</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e036-luca-palmieri.mp3" length="65103280" type="audio/mpeg"/>
			<itunes:duration>1:07:42</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/035-daniel-stenberg/</link>
			<pubDate>Fri, 03 Sep 2021 15:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/035-daniel-stenberg/</guid>
			

			<title><![CDATA[ Rust in cURL ]]></title>
			<itunes:summary><![CDATA[ First time guest host, Allen Wyma talks with Daniel, the original author of cURL, about using Rust in cURL.
 ]]></itunes:summary>
			<description><![CDATA[ First time guest host, Allen Wyma talks with Daniel, the original author of cURL, about using Rust in cURL.


  cURL is a command line tool and library for transferring data with URLs.
  cURL, and its data transfer core, libcurl are both written in C, which is known to be not memory safe.
  While it is almost impossibe to rewrite it into another language, offering a third-party library written in Rust could take a further step forward.


Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Highlights


  Architecture of cURL &amp; libcurl
  What brought Daniel to Rust? How long has he been using Rust?
  What language was Daniel working in before that?
  Third party libraries written in Rust?
  What benefits does Rust bring to cURL?


Resources

  Curl
  Daniel’s Blog
  Project Gemini


Timestamps

  [@05:10] - cURL 7.78.0
  [@07:44] - Implementing Protocol
  [@09:25] - HTTP/3
  [@13:30] - Architecture of cURL &amp; libcurl
  [@17:40] - cURL as a hybrid library
  [@19:40] - Replacing C with Rust
  [@34:00] - Experience of using Rust
  [@35:40] - async/.await in rust
  [@40:45] - Anything dislike about Rust?
  [@42:35] - Challenge of integrating with Rust
  [@48:00] - Can Rust help curl survive?
  [@49:10] - Tips for beginners?


Credits

Intro Theme: Aerocity

Audio Editing: Plangora

Hosting Infrastructure: Jon Gjengset

Show Notes: Plangora

Hosts: Allen Wyma
 ]]></description>
			<content:encoded><![CDATA[ <p>First time guest host, Allen Wyma talks with Daniel, the original author of cURL, about using Rust in cURL.</p>

<ul>
  <li><a href="https://curl.se/">cURL</a> is a command line tool and library for transferring data with URLs.</li>
  <li>cURL, and its data transfer core, libcurl are both written in C, which is known to be not memory safe.</li>
  <li>While it is almost impossibe to rewrite it into another language, offering a third-party library written in Rust could take a further step forward.</li>
</ul>

<h2 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h2>

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h2 id="highlights">Highlights</h2>

<ul>
  <li>Architecture of cURL &amp; libcurl</li>
  <li>What brought Daniel to Rust? How long has he been using Rust?</li>
  <li>What language was Daniel working in before that?</li>
  <li>Third party libraries written in Rust?</li>
  <li>What benefits does Rust bring to cURL?</li>
</ul>

<h2 id="resources">Resources</h2>
<ul>
  <li><a href="https://curl.se/">Curl</a></li>
  <li><a href="https://daniel.haxx.se/blog/2021/08/09/nocais-apology/">Daniel’s Blog</a></li>
  <li><a href="https://gemini.circumlunar.space/">Project Gemini</a></li>
</ul>

<h2 id="timestamps">Timestamps</h2>
<ul>
  <li>[@05:10] - <a href="https://curl.se/download.html">cURL 7.78.0</a></li>
  <li>[@07:44] - Implementing Protocol</li>
  <li>[@09:25] - HTTP/3</li>
  <li>[@13:30] - Architecture of cURL &amp; libcurl</li>
  <li>[@17:40] - cURL as a hybrid library</li>
  <li>[@19:40] - Replacing C with Rust</li>
  <li>[@34:00] - Experience of using Rust</li>
  <li>[@35:40] - async/.await in rust</li>
  <li>[@40:45] - Anything dislike about Rust?</li>
  <li>[@42:35] - Challenge of integrating with Rust</li>
  <li>[@48:00] - Can Rust help curl survive?</li>
  <li>[@49:10] - Tips for beginners?</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/plangora">Plangora</a></p>

<p>Hosts: <a href="https://twitter.com/allenwyma">Allen Wyma</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e035-daniel-stenberg.mp3" length="53290745" type="audio/mpeg"/>
			<itunes:duration>55:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/034-rust-1.52-1.53/</link>
			<pubDate>Mon, 12 Jul 2021 23:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/034-rust-1.52-1.53/</guid>
			

			<title><![CDATA[ What's New in Rust 1.52 and 1.53 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben discuss the highlights of the 1.52 and 1.53 releases of Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben discuss the highlights of the 1.52 and 1.53 releases of Rust.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:31] - Rust 1.52


  [@01:31] - Stabilized APIs
  [@04:28] - All integer division and remainder APIs made const
  [@07:45] - Rust 1.52.1 and incremental compilation
  [@11:30] - LLVM 12
    
      Disable “mutable noalias”
      Bringing Stack Clash Protection to Clang/x86, the Open Source Way
    
  
  [@16:15] - unsafe_op_in_unsafe_fn lint


[@23:03] - Rust 1.53


  [@23:03] - IntoIterator for arrays
  [@26:45] - Unicode identifiers
  [@29:37] - Or patterns
  [@31:05] - Stabilized APIs
    
      BITS associated const on numeric primitives
    
  
  [@36:36] - {f32, f64}::from_str now parse and print special values (NaN, -0) according to IEEE RFC 754.
  [@38:05] - {f32, f64}::is_subnormal
  [@41:11] - Cargo changes
    
      RFC: Make the authors field optional
    
  


[@43:52] - Rust 2021 Edition Preview


  [@43:52] - What is an edition?
  [@47:33] - Additions to the prelude
  [@50:54] - Default Cargo feature resolver
  [@51:49] - IntoIterator for arrays
  [@53:09] - Disjoint capture in closures
  [@54:35] - Panic macro consistency
  [@56:00] - Reserving syntax
  [@1:01:38] - Or patterns in macro_rules
  [@1:03:16] - Promoting two warnings to hard errors


Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel

Transcript: Eric Seppanen
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben discuss the highlights of the 1.52 and 1.53 releases of Rust.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0131---rust-152">[@01:31] - <a href="https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html">Rust 1.52</a></h4>

<ul>
  <li>[@01:31] - <a href="https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html#stabilized-apis">Stabilized APIs</a></li>
  <li>[@04:28] - <a href="https://github.com/rust-lang/rust/pull/80962">All integer division and remainder APIs made const</a></li>
  <li>[@07:45] - <a href="https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html">Rust 1.52.1 and incremental compilation</a></li>
  <li>[@11:30] - <a href="https://github.com/rust-lang/rust/pull/81451">LLVM 12</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/84958">Disable “mutable noalias”</a></li>
      <li><a href="https://blog.llvm.org/posts/2021-01-05-stack-clash-protection/">Bringing Stack Clash Protection to Clang/x86, the Open Source Way</a></li>
    </ul>
  </li>
  <li>[@16:15] - <a href="https://github.com/rust-lang/rust/pull/79208"><code>unsafe_op_in_unsafe_fn</code> lint</a></li>
</ul>

<h4 id="2303---rust-153">[@23:03] - <a href="https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html">Rust 1.53</a></h4>

<ul>
  <li>[@23:03] - <a href="https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#intoiterator-for-arrays"><code>IntoIterator</code> for arrays</a></li>
  <li>[@26:45] - <a href="https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#unicode-identifiers">Unicode identifiers</a></li>
  <li>[@29:37] - <a href="https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#or-patterns">Or patterns</a></li>
  <li>[@31:05] - <a href="https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/81654"><code>BITS</code> associated const on numeric primitives</a></li>
    </ul>
  </li>
  <li>[@36:36] - <a href="https://github.com/rust-lang/rust/pull/78618"><code>{f32, f64}::from_str</code> now parse and print special values (NaN, -0) according to IEEE RFC 754.</a></li>
  <li>[@38:05] - <a href="https://doc.rust-lang.org/stable/std/primitive.f32.html#method.is_subnormal"><code>{f32, f64}::is_subnormal</code></a></li>
  <li>[@41:11] - Cargo changes
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/3052-optional-authors-field.html">RFC: Make the authors field optional</a></li>
    </ul>
  </li>
</ul>

<h4 id="4352---rust-2021-edition-preview">[@43:52] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html">Rust 2021 Edition Preview</a></h4>

<ul>
  <li>[@43:52] - What is an edition?</li>
  <li>[@47:33] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#additions-to-the-prelude">Additions to the prelude</a></li>
  <li>[@50:54] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#default-cargo-feature-resolver">Default Cargo feature resolver</a></li>
  <li>[@51:49] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#intoiterator-for-arrays"><code>IntoIterator</code> for arrays</a></li>
  <li>[@53:09] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#disjoint-capture-in-closures">Disjoint capture in closures</a></li>
  <li>[@54:35] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#panic-macro-consistency">Panic macro consistency</a></li>
  <li>[@56:00] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#reserving-syntax">Reserving syntax</a></li>
  <li>[@1:01:38] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#or-patterns-in-macro_rules">Or patterns in macro_rules</a></li>
  <li>[@1:03:16] - <a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html#promoting-two-warnings-to-hard-errors">Promoting two warnings to hard errors</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://www.softwaresessions.com">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>

<p>Transcript: <a href="https://github.com/ericseppanen">Eric Seppanen</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e034-rust-1.52-1.53.mp3" length="48336666" type="audio/mpeg"/>
			<itunes:duration>1:07:08</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/033-rust-1.50-1.51/</link>
			<pubDate>Sun, 18 Apr 2021 19:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/033-rust-1.50-1.51/</guid>
			

			<title><![CDATA[ What's New in Rust 1.50 and 1.51 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben take a look at the features of the Rust 1.50 and 1.51 releases.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben take a look at the features of the Rust 1.50 and 1.51 releases.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:47] - Rust 1.50


  [@03:02] - Const Generic Array Indexing
  [@04:30] - Const Value Repetition for Arrays
    
      Accidental Stabilization
    
  
  [@07:15] - Safe Assignment to ManuallyDrop in Unions
  [@09:40] - Niche for File on UNIX
    
      Niches for Non-Empty Variants
      Using Padding for Niches
    
  
  [@14:39] - Library Changes
    
      Mara Bos on the journey to bool::then
      bool::then PR
      The Clamp RFC
    
  
  [@20:27] - Changelog Deep-Dive
    
      Rust Changelog
      Cargo Changelog
      compare_and_swap deprecation
      Deterministic .crate files
    
  


[@25:11] - Rust 1.51


  [@25:24] - Const Generics MVP
    
      What Was and Wasn’t Stabilized
    
  
  [@30:00] - array::IntoIter stabilization
    
      Implementing IntoIterator for [T; N]
    
  
  [@37:53] - Cargo’s New Feature Resolver
    
      Resolver v2 RFC
      Resolver v2 in Cargo Book
      Issues Solved by New Resolver
    
  
  [@45:26] - Splitting Debug Information
    
      Why This Was Complicated
      split-debuginfo option
    
  
  [@51:34] - Stabilized APIs
    
      offset_of! is (was) Unsound
      ptr::addr_of!
      Raw pointer creation RFC
      Ergonomic string interpolation
      Unifying panic!
      Manual vTable for Wakers
    
  
  [@1:10:30] - Changelog Deep-Dive
    
      Rust Changelog
      Cargo Changelog
      Documenting Nested Derefs
      Smarter target-cpu=native
    
  


[@1:14:45] - Rust Async Vision Doc


  Async Foundations Working Group


Credits

Intro Theme: Aerocity

Audio Editing: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel

Transcript: Eric Seppanen
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben take a look at the features of the Rust 1.50 and 1.51 releases.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0147---rust-150">[@01:47] - <a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html">Rust 1.50</a></h4>

<ul>
  <li>[@03:02] - <a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#const-generic-array-indexing">Const Generic Array Indexing</a></li>
  <li>[@04:30] - <a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#const-value-repetition-for-arrays">Const Value Repetition for Arrays</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/49147#issuecomment-726796665">Accidental Stabilization</a></li>
    </ul>
  </li>
  <li>[@07:15] - <a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#safe-assignments-to-manuallydropt-union-fields">Safe Assignment to ManuallyDrop in Unions</a></li>
  <li>[@09:40] - <a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#a-niche-for-file-on-unix-platforms">Niche for File on UNIX</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/46213">Niches for Non-Empty Variants</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/70230">Using Padding for Niches</a></li>
    </ul>
  </li>
  <li>[@14:39] - <a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#library-changes">Library Changes</a>
    <ul>
      <li><a href="https://twitter.com/m_ou_se/status/1359941126925537281">Mara Bos on the journey to <code>bool::then</code></a></li>
      <li><a href="https://github.com/rust-lang/rfcs/pull/2757"><code>bool::then</code> PR</a></li>
      <li><a href="https://rust-lang.github.io/rfcs/1961-clamp.html">The Clamp RFC</a></li>
    </ul>
  </li>
  <li>[@20:27] - Changelog Deep-Dive
    <ul>
      <li><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1500-2021-02-11">Rust Changelog</a></li>
      <li><a href="https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-150-2021-02-11">Cargo Changelog</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/79261"><code>compare_and_swap</code> deprecation</a></li>
      <li><a href="https://github.com/rust-lang/cargo/pull/8864">Deterministic <code>.crate</code> files</a></li>
    </ul>
  </li>
</ul>

<h4 id="2511---rust-151">[@25:11] - <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html">Rust 1.51</a></h4>

<ul>
  <li>[@25:24] - <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#const-generics-mvp">Const Generics MVP</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html">What Was and Wasn’t Stabilized</a></li>
    </ul>
  </li>
  <li>[@30:00] - <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#arrayintoiter-stabilisation"><code>array::IntoIter</code> stabilization</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/65819">Implementing <code>IntoIterator</code> for <code>[T; N]</code></a></li>
    </ul>
  </li>
  <li>[@37:53] - <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver">Cargo’s New Feature Resolver</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/2957-cargo-features2.html">Resolver v2 RFC</a></li>
      <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2">Resolver v2 in Cargo Book</a></li>
      <li><a href="https://github.com/rust-lang/cargo/pull/8997">Issues Solved by New Resolver</a></li>
    </ul>
  </li>
  <li>[@45:26] - <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#splitting-debug-information">Splitting Debug Information</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/79361">Why This Was Complicated</a></li>
      <li><a href="https://doc.rust-lang.org/nightly/rustc/codegen-options/index.html#split-debuginfo"><code>split-debuginfo</code> option</a></li>
    </ul>
  </li>
  <li>[@51:34] - <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#stabilized-apis">Stabilized APIs</a>
    <ul>
      <li><a href="https://github.com/Gilnaa/memoffset/issues/24"><code>offset_of!</code> is (was) Unsound</a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/ptr/macro.addr_of.html"><code>ptr::addr_of!</code></a></li>
      <li><a href="https://rust-lang.github.io/rfcs/2582-raw-reference-mir-operator.html">Raw pointer creation RFC</a></li>
      <li><a href="https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html">Ergonomic string interpolation</a></li>
      <li><a href="https://rust-lang.github.io/rfcs/3007-panic-plan.html">Unifying <code>panic!</code></a></li>
      <li><a href="https://doc.rust-lang.org/stable/std/task/struct.RawWakerVTable.html">Manual vTable for Wakers</a></li>
    </ul>
  </li>
  <li>[@1:10:30] - Changelog Deep-Dive
    <ul>
      <li><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1510-2021-03-25">Rust Changelog</a></li>
      <li><a href="https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-151-2021-03-25">Cargo Changelog</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/80653">Documenting Nested Derefs</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/80749">Smarter <code>target-cpu=native</code></a></li>
    </ul>
  </li>
</ul>

<h4 id="11445---rust-async-vision-doc">[@1:14:45] - <a href="https://blog.rust-lang.org/2021/03/18/async-vision-doc.html">Rust Async Vision Doc</a></h4>

<ul>
  <li><a href="https://rust-lang.github.io/wg-async-foundations/welcome.html">Async Foundations Working Group</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>

<p>Transcript: <a href="https://github.com/ericseppanen">Eric Seppanen</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e033-rust-1.50-1.51.mp3" length="94705414" type="audio/mpeg"/>
			<itunes:duration>1:18:55</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/032-rust-1.48-1.49/</link>
			<pubDate>Wed, 13 Jan 2021 20:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/032-rust-1.48-1.49/</guid>
			

			<title><![CDATA[ What's New in Rust 1.48 and 1.49 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben take a look at the features of the Rust 1.48 and 1.49 releases.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben take a look at the features of the Rust 1.48 and 1.49 releases.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:10] - Rust 1.48


  [@01:10] - Easier linking in Rustdoc
  [@03:57] - Adding search aliases in Rustdoc
  [@07:03] - Implement TryFrom&lt;Vec&lt;T&gt;&gt; for fixed-length arrays
    
      slice::as_chunks
    
  
  [@10:51] - future::ready and future::pending
  [@15:21] - More stdlib APIs made const
  [@18:05] - mem::uninitialized will now panic if any inner types inside a struct or enum disallow zero-initialization
  [@20:18] - When trait bounds on associated types or opaque types are ambiguous, the compiler no longer makes an arbitrary choice on which bound to use


[@24:20] - Rust 1.49


  [@24:20] - 64-bit ARM Linux reaches Tier 1
  [@30:20] - Test framework captures output in threads
  [@33:36] - Library changes
    
      poll::is_ready and poll::is_pending made const
    
  
  [@34:36] - You can now bind by reference and by move in patterns
  [@38:09] - Unions can now implement Drop, and you can now have a field in a union with ManuallyDrop&lt;T&gt;


[@42:00] - Rust Survey 2020 Results



Credits

Intro Theme: Aerocity

Audio Editing: T.J. Telan

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben take a look at the features of the Rust 1.48 and 1.49 releases.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0110---rust-148">[@01:10] - <a href="https://blog.rust-lang.org/2020/11/19/Rust-1.48.html">Rust 1.48</a></h4>

<ul>
  <li>[@01:10] - <a href="https://blog.rust-lang.org/2020/11/19/Rust-1.48.html#easier-linking-in-rustdoc">Easier linking in Rustdoc</a></li>
  <li>[@03:57] - <a href="https://blog.rust-lang.org/2020/11/19/Rust-1.48.html#adding-search-aliases">Adding search aliases in Rustdoc</a></li>
  <li>[@07:03] - <a href="https://blog.rust-lang.org/2020/11/19/Rust-1.48.html#library-changes">Implement <code>TryFrom&lt;Vec&lt;T&gt;&gt;</code> for fixed-length arrays</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/std/primitive.slice.html#method.as_chunks"><code>slice::as_chunks</code></a></li>
    </ul>
  </li>
  <li>[@10:51] - <a href="https://doc.rust-lang.org/std/future/index.html#functions"><code>future::ready</code> and <code>future::pending</code></a></li>
  <li>[@15:21] - More stdlib APIs made <code>const</code></li>
  <li>[@18:05] - <a href="https://github.com/rust-lang/rust/pull/71274/"><code>mem::uninitialized</code> will now panic if any inner types inside a struct or enum disallow zero-initialization</a></li>
  <li>[@20:18] - <a href="https://github.com/rust-lang/rust/issues/54121/">When trait bounds on associated types or opaque types are ambiguous, the compiler no longer makes an arbitrary choice on which bound to use</a></li>
</ul>

<h4 id="2420---rust-149">[@24:20] - <a href="https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html">Rust 1.49</a></h4>

<ul>
  <li>[@24:20] - <a href="https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html#64-bit-arm-linux-reaches-tier-1">64-bit ARM Linux reaches Tier 1</a></li>
  <li>[@30:20] - <a href="https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html#test-framework-captures-output-in-threads">Test framework captures output in threads</a></li>
  <li>[@33:36] - <a href="https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html#library-changes">Library changes</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/task/enum.Poll.html#method.is_ready"><code>poll::is_ready</code> and <code>poll::is_pending</code> made <code>const</code></a></li>
    </ul>
  </li>
  <li>[@34:36] - <a href="https://github.com/rust-lang/rust/pull/76119">You can now bind by reference and by move in patterns</a></li>
  <li>[@38:09] - <a href="https://github.com/rust-lang/rust/pull/77547">Unions can now implement <code>Drop</code>, and you can now have a field in a union with <code>ManuallyDrop&lt;T&gt;</code></a></li>
</ul>

<h4 id="4200---rust-survey-2020-results">[@42:00] - <a href="https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html">Rust Survey 2020 Results</a></h4>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://tjtelan.com">T.J. Telan</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e032-rust-1.48-1.49.mp3" length="64291170" type="audio/mpeg"/>
			<itunes:duration>44:36</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/031-rust-1.46-1.47/</link>
			<pubDate>Tue, 01 Dec 2020 22:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/031-rust-1.46-1.47/</guid>
			

			<title><![CDATA[ What's New in Rust 1.46 and 1.47 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben take a look at the features of Rust 1.46 and 1.47.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben take a look at the features of Rust 1.46 and 1.47.

Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:55] - Rust 1.46


  [@01:55] - const fn improvements
  [@08:38] - The track_caller attribute
  [@11:51] - Minor changes
    
      1.46 pre-release testing
    
  


[@21:46] - Rust 1.47


  [@21:46] - Traits on larger arrays
    
      Tracking Issue for min_const_generics
    
  
  [@29:14] - Shorter backtraces
  [@30:26] - LLVM 11
  [@32:07] - Control Flow Guard on Windows
  [@34:28] - Library changes
    
      The Tau Manifesto
    
  
  [@40:04] - Minor changes
    
      SemVer Compatibility Guide
      Announcing the Error Handling Project Group
      Announcing the Portable SIMD Project Group
    
  




Credits

Intro Theme: Aerocity

Audio Editing: Cole

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben take a look at the features of Rust 1.46 and 1.47.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0155---rust-146">[@01:55] - <a href="https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html">Rust 1.46</a></h4>

<ul>
  <li>[@01:55] - <a href="https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html#const-fn-improvements"><code>const fn</code> improvements</a></li>
  <li>[@08:38] - <a href="https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html#track_caller">The <code>track_caller</code> attribute</a></li>
  <li>[@11:51] - <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1460-2020-08-27">Minor changes</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/inside-rust/2020/08/24/1.46.0-prerelease.html">1.46 pre-release testing</a></li>
    </ul>
  </li>
</ul>

<h4 id="2146---rust-147">[@21:46] - <a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html">Rust 1.47</a></h4>

<ul>
  <li>[@21:46] - <a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#traits-on-larger-arrays">Traits on larger arrays</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/74878">Tracking Issue for <code>min_const_generics</code></a></li>
    </ul>
  </li>
  <li>[@29:14] - <a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#shorter-backtraces">Shorter backtraces</a></li>
  <li>[@30:26] - <a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#llvm-11">LLVM 11</a></li>
  <li>[@32:07] - <a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#control-flow-guard-on-windows">Control Flow Guard on Windows</a></li>
  <li>[@34:28] - <a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#library-changes">Library changes</a>
    <ul>
      <li><a href="https://tauday.com/tau-manifesto">The Tau Manifesto</a></li>
    </ul>
  </li>
  <li>[@40:04] - <a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1470-2020-10-08">Minor changes</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/cargo/reference/semver.html">SemVer Compatibility Guide</a></li>
      <li><a href="https://blog.rust-lang.org/inside-rust/2020/09/18/error-handling-wg-announcement.html">Announcing the Error Handling Project Group</a></li>
      <li><a href="https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html">Announcing the Portable SIMD Project Group</a></li>
    </ul>
  </li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitch.tv/refactorordie">Cole</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>

<p>Hosts: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a> and <a href="https://twitter.com/bstrie">Ben Striegel</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e031-rust-1.46-1.47.mp3" length="70771937" type="audio/mpeg"/>
			<itunes:duration>49:08</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/030-krustlet/</link>
			<pubDate>Tue, 22 Sep 2020 00:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/030-krustlet/</guid>
			

			<title><![CDATA[ WebAssembly on the Server with Krustlet ]]></title>
			<itunes:summary><![CDATA[ Taylor Thomas explains how Krustlet runs WebAssembly modules in Kubernetes and why it’s a promising option for the future of server side applications.
 ]]></itunes:summary>
			<description><![CDATA[ Taylor Thomas explains how Krustlet runs WebAssembly modules in Kubernetes and why it’s a promising option for the future of server side applications.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:55] - Kubernetes
  [@07:37] - WebAssembly
  [@12:06] - WebAssembly Runtimes and WASI Specification
  [@15:42] - WebAssembly vs Containers vs Native Binaries
  [@25:11] - Krustlet and the case for writing it in Rust
  [@30:52] - Missing APIs in WASI
  [@33:38] - Wascc vs Wasmtime runtimes
  [@38:15] - Rust ecosystem for Kubernetes and WebAssembly
  [@40:23] - Comparing other languages to Rust
  [@45:09] - Rust learning curve, experiences as a beginner
  [@53:16] - Next steps for Krustlet and WebAssembly


Referenced Resources


  Krustlet
  Kubernetes
  Open Container Initiative
  WebAssembly
  WASI
  Wasmtime
  waSCC
  WebAssembly meets Kubernetes with Krustlet
  Introducing Krustlet, the WebAssembly Kubelet
  Kubernetes: A Rusty Friendship
  The Safety Boat: Kubernetes and Rust
  A Heaping Helping of Stacks


Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Jeremy Jung

Hosts: Jeremy Jung

Guests: Taylor Thomas
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://twitter.com/_oftaylor">Taylor Thomas</a> explains how <a href="https://github.com/deislabs/krustlet">Krustlet</a> runs WebAssembly modules in Kubernetes and why it’s a promising option for the future of server side applications.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps">Timestamps</h3>

<ul>
  <li>[@00:55] - Kubernetes</li>
  <li>[@07:37] - WebAssembly</li>
  <li>[@12:06] - WebAssembly Runtimes and WASI Specification</li>
  <li>[@15:42] - WebAssembly vs Containers vs Native Binaries</li>
  <li>[@25:11] - Krustlet and the case for writing it in Rust</li>
  <li>[@30:52] - Missing APIs in WASI</li>
  <li>[@33:38] - Wascc vs Wasmtime runtimes</li>
  <li>[@38:15] - Rust ecosystem for Kubernetes and WebAssembly</li>
  <li>[@40:23] - Comparing other languages to Rust</li>
  <li>[@45:09] - Rust learning curve, experiences as a beginner</li>
  <li>[@53:16] - Next steps for Krustlet and WebAssembly</li>
</ul>

<h3 id="referenced-resources">Referenced Resources</h3>

<ul>
  <li><a href="https://github.com/deislabs/krustlet">Krustlet</a></li>
  <li><a href="https://kubernetes.io/">Kubernetes</a></li>
  <li><a href="https://opencontainers.org/">Open Container Initiative</a></li>
  <li><a href="https://webassembly.org/">WebAssembly</a></li>
  <li><a href="https://wasi.dev/">WASI</a></li>
  <li><a href="https://wasmtime.dev/">Wasmtime</a></li>
  <li><a href="https://wascc.dev/">waSCC</a></li>
  <li><a href="https://cloudblogs.microsoft.com/opensource/2020/04/07/announcing-krustlet-kubernetes-rust-kubelet-webassembly-wasm/">WebAssembly meets Kubernetes with Krustlet</a></li>
  <li><a href="https://deislabs.io/posts/introducing-krustlet/">Introducing Krustlet, the WebAssembly Kubelet</a></li>
  <li><a href="https://deislabs.io/posts/kubernetes-a-rusty-friendship/">Kubernetes: A Rusty Friendship</a></li>
  <li><a href="https://msrc-blog.microsoft.com/2020/04/29/the-safety-boat-kubernetes-and-rust/">The Safety Boat: Kubernetes and Rust</a></li>
  <li><a href="https://deislabs.io/posts/a-heaping-helping-of-stacks/">A Heaping Helping of Stacks</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://www.softwaresessions.com">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: Jeremy Jung</p>

<p>Hosts: Jeremy Jung</p>

<p>Guests: <a href="https://twitter.com/_oftaylor">Taylor Thomas</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e030-krustlet.mp3" length="59390302" type="audio/mpeg"/>
			<itunes:duration>01:03:02</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/029-redisjson/</link>
			<pubDate>Sat, 29 Aug 2020 00:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/029-redisjson/</guid>
			

			<title><![CDATA[ RedisJSON ]]></title>
			<itunes:summary><![CDATA[ Jeremy talks with Christoph Zimmermann about Redislabs’ new JSON module, which is written in Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Jeremy talks with Christoph Zimmermann about Redislabs’ new JSON module, which is written in Rust.

Contributing to Rustacean Station

Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@15:12] - Why Rust
  [@18:57] - Mentioning Microsoft Presentation On Rust
  [@19:25] - Jeremy - Clarifying The Benefits Of Rust On Developer Productivity Compared To C++
  [@20:23] - Response To Productivity 00:21:12: Checking At Compile Time Helps
  [@23:29] - How have you found Rust as a Language For Interacting With Other Languages?
  [@24:28] - Were Most Bugs Around Unsafe Blocks?
  [@25:42] - Do You Think Rust Had Future With Redis Server?
  [@26:45] - Redis Labs Is Looking To Implement Further Modules In Rust Because Of Redis SDK
  [@27:39] - Overcoming Rust Learning Curve
  [@28:25] - Coming From 20 Years Of C To Rust
  [@28:52] - Jeremy - Rust As First Language
  [@31:30] - Comparing Languages
  [@32:24] - What Might An Application Look Like That Uses Redis-Json?
  [@33:45] - Performance Differences With Redis JSON 2
  [@35:14] - How Would You Overcome Rust’s Overhead Compared To C?
  [@36:32] - Do You Think (Concurrency Will Present Itself More Often In Future Redis Modules)?
  [@37:54] - Could Redis Move Towards A More Concurrent Multi-threaded Database?
  [@40:05] - What The Redis Community Does Do With Multicore To Increase Throughput
  [@43:27] - How Did Redis-JSON 2 Leverage Rust’s Type System?
  [@44:53] - Time Check
  [@45:10] - End Question: Distro &amp; Editors Of Choice
  [@46:40] - ARM &amp; Apple Chips
  [@48:17] - More Redis Resources And Community


Referenced Resources


  Christoph’s Podcast
  Christoph’s FOSDEM Talk
  RedisJSON on GitHub
  Redislabs


Credits

Intro Theme: Aerocity

Audio Editing: Cole

Hosting Infrastructure: Jon Gjengset

Show Notes: Cole and Jeremy Webb

Hosts: Jeremy Webb

Guests: Chrisoph Zimmermann
 ]]></description>
			<content:encoded><![CDATA[ <p>Jeremy talks with Christoph Zimmermann about Redislabs’ new JSON module, which is written in Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<p>Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps">Timestamps</h3>

<ul>
  <li>[@15:12] - Why Rust</li>
  <li>[@18:57] - Mentioning Microsoft Presentation On Rust</li>
  <li>[@19:25] - Jeremy - Clarifying The Benefits Of Rust On Developer Productivity Compared To C++</li>
  <li>[@20:23] - Response To Productivity 00:21:12: Checking At Compile Time Helps</li>
  <li>[@23:29] - How have you found Rust as a Language For Interacting With Other Languages?</li>
  <li>[@24:28] - Were Most Bugs Around Unsafe Blocks?</li>
  <li>[@25:42] - Do You Think Rust Had Future With Redis Server?</li>
  <li>[@26:45] - Redis Labs Is Looking To Implement Further Modules In Rust Because Of Redis SDK</li>
  <li>[@27:39] - Overcoming Rust Learning Curve</li>
  <li>[@28:25] - Coming From 20 Years Of C To Rust</li>
  <li>[@28:52] - Jeremy - Rust As First Language</li>
  <li>[@31:30] - Comparing Languages</li>
  <li>[@32:24] - What Might An Application Look Like That Uses Redis-Json?</li>
  <li>[@33:45] - Performance Differences With Redis JSON 2</li>
  <li>[@35:14] - How Would You Overcome Rust’s Overhead Compared To C?</li>
  <li>[@36:32] - Do You Think (Concurrency Will Present Itself More Often In Future Redis Modules)?</li>
  <li>[@37:54] - Could Redis Move Towards A More Concurrent Multi-threaded Database?</li>
  <li>[@40:05] - What The Redis Community Does Do With Multicore To Increase Throughput</li>
  <li>[@43:27] - How Did Redis-JSON 2 Leverage Rust’s Type System?</li>
  <li>[@44:53] - Time Check</li>
  <li>[@45:10] - End Question: Distro &amp; Editors Of Choice</li>
  <li>[@46:40] - ARM &amp; Apple Chips</li>
  <li>[@48:17] - More Redis Resources And Community</li>
</ul>

<h3 id="referenced-resources">Referenced Resources</h3>

<ul>
  <li><a href="https://linuxinlaws.eu/">Christoph’s Podcast</a></li>
  <li><a href="https://ftp.osuosl.org/pub/fosdem/2020/K.3.401/rust_redisjson.webm">Christoph’s FOSDEM Talk</a></li>
  <li><a href="https://github.com/RedisJSON/RedisJSON2">RedisJSON on GitHub</a></li>
  <li><a href="https://university.redislabs.com/">Redislabs</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitch.tv/refactorordie">Cole</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: Cole and Jeremy Webb</p>

<p>Hosts: Jeremy Webb</p>

<p>Guests: <a href="https://twitter.com/7immermann/">Chrisoph Zimmermann</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e029-redisjson.mp3" length="40940784" type="audio/mpeg"/>
			<itunes:duration>00:49:45</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/028-rust-1.44-1.45/</link>
			<pubDate>Wed, 19 Aug 2020 19:13:43 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/028-rust-1.44-1.45/</guid>
			

			<title><![CDATA[ What's New in Rust 1.44 and 1.45 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben examine the features of Rust 1.44 and Rust 1.45.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben examine the features of Rust 1.44 and Rust 1.45.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@01:21] - Rust 1.44 (Detailed Release Notes)


  [@01:50] - cargo tree subcommand
  [@04:52] - async/await in #[no_std] contexts
  [@12:16] - Unicode 13 is now supported
  [@17:16] - rustc now respects the -C codegen-units flag in incremental mode
  [@18:47] - Special cased vec![] to map directly to Vec::new()


[@28:51] - Rust 1.45


  [@29:14] - Fixing an unsoundness in float to integer casts
  [@39:16] - Stabilizing function-like procedural macros in expressions, patterns, and statements
  
    [@43:29] - str::strip_prefix and str::strip_suffix
  
  Bonus: Opening up the Rust Core Team agenda
    
      See also: The Inside Rust Blog
    
  




Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben examine the features of Rust 1.44 and Rust 1.45.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0121---rust-144-detailed-release-notes">[@01:21] - <a href="https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html">Rust 1.44</a> (<a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1440-2020-06-04">Detailed Release Notes</a>)</h4>

<ul>
  <li>[@01:50] - <a href="https://github.com/rust-lang/cargo/pull/8062/"><code>cargo tree</code> subcommand</a></li>
  <li>[@04:52] - <a href="https://github.com/rust-lang/rust/pull/69033/"><code>async</code>/<code>await</code> in <code>#[no_std]</code> contexts</a></li>
  <li>[@12:16] - <a href="https://github.com/rust-lang/rust/pull/69929/">Unicode 13 is now supported</a></li>
  <li>[@17:16] - <a href="https://github.com/rust-lang/rust/pull/70156/">rustc now respects the -C codegen-units flag in incremental mode</a></li>
  <li>[@18:47] - <a href="https://github.com/rust-lang/rust/pull/70632/">Special cased <code>vec![]</code> to map directly to <code>Vec::new()</code></a></li>
</ul>

<h4 id="2851---rust-145">[@28:51] - <a href="https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html">Rust 1.45</a></h4>

<ul>
  <li>[@29:14] - <a href="https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#fixing-unsoundness-in-casts">Fixing an unsoundness in float to integer casts</a></li>
  <li>[@39:16] - <a href="https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#stabilizing-function-like-procedural-macros-in-expressions-patterns-and-statements">Stabilizing function-like procedural macros in expressions, patterns, and statements</a></li>
  <li>
    <p>[@43:29] - <a href="https://doc.rust-lang.org/std/primitive.str.html#method.strip_prefix"><code>str::strip_prefix</code></a> and <a href="https://doc.rust-lang.org/std/primitive.str.html#method.strip_suffix"><code>str::strip_suffix</code></a></p>
  </li>
  <li>Bonus: <a href="https://blog.rust-lang.org/inside-rust/2020/07/27/opening-up-the-core-team-agenda.html">Opening up the Rust Core Team agenda</a>
    <ul>
      <li>See also: <a href="https://blog.rust-lang.org/inside-rust/index.html">The Inside Rust Blog</a></li>
    </ul>
  </li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://www.softwaresessions.com/">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e027-rust-1.44-1.45.mp3" length="33787656" type="audio/mpeg"/>
			<itunes:duration>46:56</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/028-twir-352/</link>
			<pubDate>Tue, 18 Aug 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/028-twir-352/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 352 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 352, published on August 18, 2020, as well as short interviews with upcoming RustConf speakers Harrison Bachrach, Esteban Kuber, and Jam.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 352, published on August 18, 2020, as well as short interviews with upcoming RustConf speakers Harrison Bachrach, Esteban Kuber, and Jam.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Laying the foundation for Rust’s future
  Learning Rust: The Compiler is your Friend
  Why Rust is a great fit for embedded software
  Why Rust’s Unsafe Works
  I am a Java, C#, C or C++ developer, time to do some Rust
  Async Unicorns love Rust
  Linux Packages For Rust (2/3) - Building with GitHub Actions using Custom Actions and Docker Container Images
  Rust RFCs Repo
  RustConf
  This Week in Rust GitHub Repo


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 352, published on August 18, 2020, as well as short interviews with upcoming RustConf speakers Harrison Bachrach, Esteban Kuber, and Jam.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html">Laying the foundation for Rust’s future</a></li>
  <li><a href="https://ferrous-systems.com/blog/the-compiler-is-your-friend/">Learning Rust: The Compiler is your Friend</a></li>
  <li><a href="https://tweedegolf.nl/blog/39/why-rust-is-a-great-fit-for-embedded-software">Why Rust is a great fit for embedded software</a></li>
  <li><a href="https://jam1.re/blog/why-rusts-unsafe-works">Why Rust’s Unsafe Works</a></li>
  <li><a href="https://fasterthanli.me/articles/i-am-a-java-csharp-c-or-cplusplus-dev-time-to-do-some-rust">I am a Java, C#, C or C++ developer, time to do some Rust</a></li>
  <li><a href="https://blog.kdubovikov.ml/articles/rust/async-unicorns-love-rust">Async Unicorns love Rust</a></li>
  <li><a href="https://ebbflow.io/blog/vending-linux-2">Linux Packages For Rust (2/3) - Building with GitHub Actions using Custom Actions and Docker Container Images</a></li>
  <li><a href="https://github.com/rust-lang/rfcs">Rust RFCs Repo</a></li>
  <li><a href="https://rustconf.com/">RustConf</a></li>
  <li><a href="https://github.com/emberian/this-week-in-rust/">This Week in Rust GitHub Repo</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-08-19.mp3" length="30072080" type="audio/mpeg"/>
			<itunes:duration>20:53</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/027-twir-351/</link>
			<pubDate>Wed, 12 Aug 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/027-twir-351/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 351 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 351, published on August 11, 2020, as well as short interviews with upcoming RustConf speakers Micah Tigley, Rebecca Turner, and Samuel Lim.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 351, published on August 11, 2020, as well as short interviews with upcoming RustConf speakers Micah Tigley, Rebecca Turner, and Samuel Lim.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Announcing Rust 1.45.1
  Announcing Rust 1.45.2
  Headcrab: July 2020 progress report
  This Month in Rust OSDev (July 2020)
  Learning Rust: Mindsets and Expectations
  Blue Team Rust: What is “Memory Safety”, really?
  Creating Linux Packages for Rust Projects (1/2)
  Reverse Engineering a USB Device with Rust
  Some Learnings from Implementing a Normalizing Rust Representer
  [video]Learning Rust by Working Through the Rustlings Exercises
  Rust Language Cheat Sheet 2019 -&gt; 2020
  [audio]The State of Rust 2 with Alex Chrichton
  [audio]The State of Rust with Steve Klabnik
  RFC: ‘C unwind’ ABI
  Procedural vtables and wide ptr metadata
  Edition 2021 and beyond


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 351, published on August 11, 2020, as well as short interviews with upcoming RustConf speakers Micah Tigley, Rebecca Turner, and Samuel Lim.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/07/30/Rust-1.45.1.html">Announcing Rust 1.45.1</a></li>
  <li><a href="https://blog.rust-lang.org/2020/08/03/Rust-1.45.2.html">Announcing Rust 1.45.2</a></li>
  <li><a href="https://headcrab.rs/2020/07/31/july-update.html">Headcrab: July 2020 progress report</a></li>
  <li><a href="https://rust-osdev.com/this-month/2020-07/">This Month in Rust OSDev (July 2020)</a></li>
  <li><a href="https://ferrous-systems.com/blog/mindsets-and-expectations/">Learning Rust: Mindsets and Expectations</a></li>
  <li><a href="https://tiemoko.com/blog/blue-team-rust/">Blue Team Rust: What is “Memory Safety”, really?</a></li>
  <li><a href="https://ebbflow.io/blog/vending-linux-1">Creating Linux Packages for Rust Projects (1/2)</a></li>
  <li><a href="https://gill.net.in/posts/reverse-engineering-a-usb-device-with-rust/">Reverse Engineering a USB Device with Rust</a></li>
  <li><a href="https://seanchen1991.github.io/posts/rust-representer/">Some Learnings from Implementing a Normalizing Rust Representer</a></li>
  <li>[video]<a href="https://egghead.io/playlists/learning-rust-by-solving-the-rustlings-exercises-a722">Learning Rust by Working Through the Rustlings Exercises</a></li>
  <li><a href="https://github.com/ralfbiedert/cheats.rs/issues/100">Rust Language Cheat Sheet 2019 -&gt; 2020</a></li>
  <li>[audio]<a href="https://anchor.fm/the-virtual-world/episodes/Ep-7--The-State-of-Rust-2-with-Alex-Crichton-ehjpsq">The State of Rust 2 with Alex Chrichton</a></li>
  <li>[audio]<a href="https://anchor.fm/the-virtual-world/episodes/Ep-6--The-State-of-Rust-with-Steve-Klabnik-ehf8mk">The State of Rust with Steve Klabnik</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2945">RFC: ‘C unwind’ ABI</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2967">Procedural vtables and wide ptr metadata</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2966">Edition 2021 and beyond</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-08-11.mp3" length="28752374" type="audio/mpeg"/>
			<itunes:duration>19:58</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/025-katharina-florian/</link>
			<pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/025-katharina-florian/</guid>
			

			<title><![CDATA[ RustFest 2019 Interview Series: Burnout in Open Source Software; The Rust Roadmap ]]></title>
			<itunes:summary><![CDATA[ Two more long-awaited interviews from RustFest 2019: Katharina Fey on the phenomenon of burnout in software and in open source communities and Florian Gilcher on Rust’s annual roadmaps.
 ]]></itunes:summary>
			<description><![CDATA[ Two more long-awaited interviews from RustFest 2019: Katharina Fey on the phenomenon of burnout in software and in open source communities and Florian Gilcher on Rust’s annual roadmaps.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:50] Part 1: Burnout w/ Katharina Fey


  [@01:54] - How common is burnout in software?
  [@03:24] - How does burnout manifest in volunteer endeavors like open source software?
  [@08:10] - How does rotation of responsibilities alleviate burnout?
  [@13:41] - What communities succeed at combating burnout?
  [@16:44] - Final thoughts on burnout and governance


[@19:50] Part 2: The Rust Roadmap w/ Florian Gilcher


  Rust 2019 roadmap
  Rust 2020 roadmap


Credits

Intro Theme: Aerocity

Audio Editing: Eddy Petrisor

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Two more long-awaited interviews from RustFest 2019: <a href="https://twitter.com/spacekookie">Katharina Fey</a> on the phenomenon of burnout in software and in open source communities and <a href="https://twitter.com/Argorak">Florian Gilcher</a> on Rust’s annual roadmaps.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0050-part-1-burnout-w-katharina-fey">[@00:50] Part 1: Burnout w/ Katharina Fey</h4>

<ul>
  <li>[@01:54] - How common is burnout in software?</li>
  <li>[@03:24] - How does burnout manifest in volunteer endeavors like open source software?</li>
  <li>[@08:10] - How does rotation of responsibilities alleviate burnout?</li>
  <li>[@13:41] - What communities succeed at combating burnout?</li>
  <li>[@16:44] - Final thoughts on burnout and governance</li>
</ul>

<h4 id="1950-part-2-the-rust-roadmap-w-florian-gilcher">[@19:50] Part 2: The Rust Roadmap w/ Florian Gilcher</h4>

<ul>
  <li><a href="https://blog.rust-lang.org/2019/04/23/roadmap.html">Rust 2019 roadmap</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/blob/master/text/2857-roadmap-2020.md">Rust 2020 roadmap</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/eddypetrisor">Eddy Petrisor</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e025-rustfest-katharina-florian.mp3" length="35318701" type="audio/mpeg"/>
			<itunes:duration>49:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/026-twir-350/</link>
			<pubDate>Mon, 03 Aug 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/026-twir-350/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 350 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 350, published on July 28, 2020, as well as short interviews with upcoming RustConf speakers Siân Griffin, Jane Lusby, and Ashley Hauck.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 350, published on July 28, 2020, as well as short interviews with upcoming RustConf speakers Siân Griffin, Jane Lusby, and Ashley Hauck.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Announcing Rust 1.45.1
  Announcing Rust 1.45.2
  Headcrab: July 2020 progress report
  This Month in Rust OSDev (July 2020)
  Learning Rust: Mindsets and Expectations
  Blue Team Rust: What is “Memory Safety”, really?
  Creating Linux Packages for Rust Projects (1/2)
  Reverse Engineering a USB Device with Rust
  Some Learnings from Implementing a Normalizing Rust Representer
  [video]Learning Rust by Working Through the Rustlings Exercises
  Rust Language Cheat Sheet 2019 -&gt; 2020
  [audio]The State of Rust 2 with Alex Chrichton
  [audio]The State of Rust with Steve Klabnik
  RFC: ‘C unwind’ ABI
  Procedural vtables and wide ptr metadata
  Edition 2021 and beyond


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 350, published on July 28, 2020, as well as short interviews with upcoming RustConf speakers Siân Griffin, Jane Lusby, and Ashley Hauck.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/07/30/Rust-1.45.1.html">Announcing Rust 1.45.1</a></li>
  <li><a href="https://blog.rust-lang.org/2020/08/03/Rust-1.45.2.html">Announcing Rust 1.45.2</a></li>
  <li><a href="https://headcrab.rs/2020/07/31/july-update.html">Headcrab: July 2020 progress report</a></li>
  <li><a href="https://rust-osdev.com/this-month/2020-07/">This Month in Rust OSDev (July 2020)</a></li>
  <li><a href="https://ferrous-systems.com/blog/mindsets-and-expectations/">Learning Rust: Mindsets and Expectations</a></li>
  <li><a href="https://tiemoko.com/blog/blue-team-rust/">Blue Team Rust: What is “Memory Safety”, really?</a></li>
  <li><a href="https://ebbflow.io/blog/vending-linux-1">Creating Linux Packages for Rust Projects (1/2)</a></li>
  <li><a href="https://gill.net.in/posts/reverse-engineering-a-usb-device-with-rust/">Reverse Engineering a USB Device with Rust</a></li>
  <li><a href="https://seanchen1991.github.io/posts/rust-representer/">Some Learnings from Implementing a Normalizing Rust Representer</a></li>
  <li>[video]<a href="https://egghead.io/playlists/learning-rust-by-solving-the-rustlings-exercises-a722">Learning Rust by Working Through the Rustlings Exercises</a></li>
  <li><a href="https://github.com/ralfbiedert/cheats.rs/issues/100">Rust Language Cheat Sheet 2019 -&gt; 2020</a></li>
  <li>[audio]<a href="https://anchor.fm/the-virtual-world/episodes/Ep-7--The-State-of-Rust-2-with-Alex-Crichton-ehjpsq">The State of Rust 2 with Alex Chrichton</a></li>
  <li>[audio]<a href="https://anchor.fm/the-virtual-world/episodes/Ep-6--The-State-of-Rust-with-Steve-Klabnik-ehf8mk">The State of Rust with Steve Klabnik</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2945">RFC: ‘C unwind’ ABI</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2967">Procedural vtables and wide ptr metadata</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2966">Edition 2021 and beyond</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-08-03.mp3" length="33638735" type="audio/mpeg"/>
			<itunes:duration>23:21</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/024-twir-349/</link>
			<pubDate>Tue, 28 Jul 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/024-twir-349/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 349 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 349, published on July 28, 2020.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 349, published on July 28, 2020.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  This Week in Rust #349
  Opening up the Core Team agenda
  Rust’s CI is Moving to GitHub Actions
  IntelliJ Rust Changelog #127
  Rust Analyzer Changelog #35
  Notes on A Smaller Rust
  Rust Explained using Easy English
  Tutorial for Tokio and async Rust
  Cell, RefCell, and Interior Mutability in Rust
  Async/Await for AVR with Rust
  Making a Game in 48 hours with Rust and WebAssembly
  Inline assembly
  Add a new #[instruction_set(...)] attribute for supporting per-function instruction set changes
  RFC: ‘C unwind’ ABI
  RFC: Add JSON backend to Rustdoc
  RFC: Named arguments
  Establish a new error handling project group


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 349, published on July 28, 2020.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://this-week-in-rust.org/blog/2020/07/28/this-week-in-rust-349/">This Week in Rust #349</a></li>
  <li><a href="https://blog.rust-lang.org/inside-rust/2020/07/27/opening-up-the-core-team-agenda.html">Opening up the Core Team agenda</a></li>
  <li><a href="https://blog.rust-lang.org/inside-rust/2020/07/23/rust-ci-is-moving-to-github-actions.html">Rust’s CI is Moving to GitHub Actions</a></li>
  <li><a href="https://intellij-rust.github.io/2020/07/27/changelog-127.html">IntelliJ Rust Changelog #127</a></li>
  <li><a href="https://rust-analyzer.github.io/thisweek/2020/07/27/changelog-35.html">Rust Analyzer Changelog #35</a></li>
  <li><a href="https://without.boats/blog/notes-on-a-smaller-rust/">Notes on A Smaller Rust</a></li>
  <li><a href="https://github.com/Dhghomon/easy_rust">Rust Explained using Easy English</a></li>
  <li><a href="https://tokio.rs/tokio/tutorial">Tutorial for Tokio and async Rust</a></li>
  <li><a href="https://badboi.dev/rust/2020/07/17/cell-refcell.html">Cell, RefCell, and Interior Mutability in Rust</a></li>
  <li><a href="https://lights0123.com/blog/2020/07/25/async-await-for-avr-with-rust/">Async/Await for AVR with Rust</a></li>
  <li><a href="https://ianjk.com/rust-gamejam/">Making a Game in 48 hours with Rust and WebAssembly</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2873">Inline assembly</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2867">Add a new <code>#[instruction_set(...)]</code> attribute for supporting per-function instruction set changes</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2945">RFC: ‘C unwind’ ABI</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2963">RFC: Add JSON backend to Rustdoc</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2964">RFC: Named arguments</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2965">Establish a new error handling project group</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-07-28.mp3" length="14949690" type="audio/mpeg"/>
			<itunes:duration>10:23</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/023-twir-348/</link>
			<pubDate>Tue, 21 Jul 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/023-twir-348/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 348 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 348, published on July 21, 2020.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 348, published on July 21, 2020.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Announcing Rust 1.45.0
  Learn how to make a Sokoban game in Rust
  Clear Explanation of Rust’s module system
  Rewriting FORTRAN Software in Rust
  Writing a kernel driver with Rust
  Packaging and Vendoring Production Rust Software - Windows
  Async Rust, but less intimidating
  Rust: What is Ownership and Borrowing
  Boiled Down Crate: OnceCell
  Curso Rust
  zbus is looking for contributors
  just: Add extensible recipe and justfile attributes
  libnet: Segfault in icmp send
  rust: fs::remove_dir_all rarely succeeds for large directories on window
  RFC: C unwind ABI
  Add oneof configuration predicate to support exclusive features
  RFC: Promote aarch64-unknown-linux-gnu to a Tier-1 Rust target
  Add Drop::poll_drop_ready for asynchronous destructors
  Stabilize Cargo’s new feature resolver
  Add the partial-closure-args RFC


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 348, published on July 21, 2020.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html">Announcing Rust 1.45.0</a></li>
  <li><a href="https://sokoban.iolivia.me/c01-00-intro.html">Learn how to make a Sokoban game in Rust</a></li>
  <li><a href="http://www.sheshbabu.com/posts/rust-module-system/">Clear Explanation of Rust’s module system</a></li>
  <li><a href="https://mckeogh.tech/post/shallow-water/">Rewriting FORTRAN Software in Rust</a></li>
  <li><a href="https://not-matthias.github.io/kernel-driver-with-rust/">Writing a kernel driver with Rust</a></li>
  <li><a href="https://ebbflow.io/blog/vending-win">Packaging and Vendoring Production Rust Software - Windows</a></li>
  <li><a href="https://dev.to/dotxlem/async-rust-but-less-intimidating-2c13">Async Rust, but less intimidating</a></li>
  <li><a href="https://www.youtube.com/watch?v=79phqVpE7cU">Rust: What is Ownership and Borrowing</a></li>
  <li><a href="https://www.youtube.com/watch?v=YBG8QTO8fNI&amp;feature=youtu.be">Boiled Down Crate: OnceCell</a></li>
  <li><a href="https://www.twitch.tv/videos/681897847">Curso Rust</a></li>
  <li><a href="https://gitlab.freedesktop.org/zeenix/zbus">zbus is looking for contributors</a></li>
  <li><a href="https://github.com/casey/just/issues/604">just: Add extensible recipe and justfile attributes</a></li>
  <li><a href="https://github.com/libpnet/libpnet/issues/449">libnet: Segfault in icmp send</a></li>
  <li><a href="https://github.com/rust-lang/rust/issues/29497">rust: fs::remove_dir_all rarely succeeds for large directories on window</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2945">RFC: <code>C unwind</code> ABI</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2962">Add <code>oneof</code> configuration predicate to support exclusive features</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2959">RFC: Promote aarch64-unknown-linux-gnu to a Tier-1 Rust target</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2958">Add Drop::poll_drop_ready for asynchronous destructors</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2957">Stabilize Cargo’s new feature resolver</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2956">Add the partial-closure-args RFC</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-07-21.mp3" length="16626124" type="audio/mpeg"/>
			<itunes:duration>11:32</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/022-twir-347/</link>
			<pubDate>Tue, 14 Jul 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/022-twir-347/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 347 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 347, published on July 14, 2020.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 347, published on July 14, 2020.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Announcing Rustup 1.22.1
  Lang Team Design Meeting: Path to Membership
  Perspective on Rust Community Moderation
  The Soul of a New Debugger
  Async Interview #8: Stjepan Glavina
  Using RabbitMQ in Rust
  Rust Analyzer Changelog #33
  IntelliJ Rust Changelog #126
  This Month in Rust OSDev
  Rust es orientado a objeto?
  Fuzzing Rust with Shnatsel
  Two Sum Problem - Leet Code + Rust
  Rust and WebAssembly - EdgeXR @ Netlight
  Opt-in Stable Trait VTables


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 347, published on July 14, 2020.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/07/08/Rustup-1.22.1.html">Announcing Rustup 1.22.1</a></li>
  <li><a href="https://blog.rust-lang.org/inside-rust/2020/07/09/lang-team-path-to-membership.html">Lang Team Design Meeting: Path to Membership</a></li>
  <li><a href="https://www.reddit.com/r/rust/comments/hnfnti/where_is_the_rust_community_allowed_to_talk_about/fxf65nf/">Perspective on Rust Community Moderation</a></li>
  <li><a href="https://nbaksalyar.github.io/2020/07/12/soul-of-a-new-debugger.html">The Soul of a New Debugger</a></li>
  <li><a href="https://smallcultfollowing.com/babysteps/blog/2020/07/09/async-interview-8-stjepan-glavina/">Async Interview #8: Stjepan Glavina</a></li>
  <li><a href="https://www.zupzup.org/rmq-in-rust/">Using RabbitMQ in Rust</a></li>
  <li><a href="https://rust-analyzer.github.io/thisweek/2020/07/13/changelog-33.html">Rust Analyzer Changelog #33</a></li>
  <li><a href="https://intellij-rust.github.io/2020/07/13/changelog-126.html">IntelliJ Rust Changelog #126</a></li>
  <li><a href="https://rust-osdev.com/this-month/2020-06/">This Month in Rust OSDev</a></li>
  <li><a href="https://emanuelpeg.blogspot.com/2020/07/rust-es-orientado-objeto.html#.XwsegbMr_EQ.reddit">Rust es orientado a objeto?</a></li>
  <li><a href="https://medium.com/@social_62682/fuzzing-rust-with-shnatsel-podcast-e1fa0dbc28a">Fuzzing Rust with Shnatsel</a></li>
  <li><a href="https://www.youtube.com/watch?v=CMlHbAGkXjA&amp;list=PLK_g1a_cAfaZuTXzDoQUAFEHCalKSCv9G&amp;index=2">Two Sum Problem - Leet Code + Rust</a></li>
  <li><a href="https://www.youtube.com/watch?v=dmbqpg5BuBY">Rust and WebAssembly - EdgeXR @ Netlight</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2955">Opt-in Stable Trait VTables</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-07-14.mp3" length="12346013" type="audio/mpeg"/>
			<itunes:duration>08:34</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/021-twir-346/</link>
			<pubDate>Tue, 07 Jul 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/021-twir-346/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 346 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 346, published on July 6, 2020.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 346, published on July 6, 2020.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Announcing Rustup 1.22.0
  Ownership of the standard library implementation
  Choosing a Rust web framework, 2020 edition
  Simple Rocket Web Framework Tutorial POST Request
  Transpiling a Kernel Module to Rust: The Good, the Bad and the Ugly
  Ringbahn II: The Central State Machine
  What is a Dangling Pointer?
  Super Hero Rust fuzzing
  RFC: IndexGet and IndexSet
  RFC: Add a new #[instruction_set(...)] attribute for supporting per-function instruction set changes
  Inline const expressions and patterns
  Inline Assembly
  This Week in Rust GitHub Repo


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 346, published on July 6, 2020.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html">Announcing Rustup 1.22.0</a></li>
  <li><a href="https://blog.rust-lang.org/inside-rust/2020/07/02/Ownership-Std-Implementation.html">Ownership of the standard library implementation</a></li>
  <li><a href="https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/">Choosing a Rust web framework, 2020 edition</a></li>
  <li><a href="https://frogtok.com/simple-rocket-web-framework-tutorial-part-2in/">Simple Rocket Web Framework Tutorial POST Request</a></li>
  <li><a href="https://immunant.com/blog/2020/06/kernel_modules/">Transpiling a Kernel Module to Rust: The Good, the Bad and the Ugly</a></li>
  <li><a href="https://without.boats/blog/ringbahn-ii/">Ringbahn II: The Central State Machine</a></li>
  <li><a href="https://medium.com/swlh/what-is-a-dangling-pointer-2773d49cf86c">What is a Dangling Pointer?</a></li>
  <li><a href="https://blog.firosolutions.com/2020/07/superhero-rust-fuzzing/">Super Hero Rust fuzzing</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2953">RFC: IndexGet and IndexSet</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2867">RFC: Add a new <code>#[instruction_set(...)]</code> attribute for supporting per-function instruction set changes</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2920">Inline <code>const</code> expressions and patterns</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2873">Inline Assembly</a></li>
  <li><a href="https://github.com/emberian/this-week-in-rust/">This Week in Rust GitHub Repo</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-07-06.mp3" length="11311564" type="audio/mpeg"/>
			<itunes:duration>07:51</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/020-twir-345/</link>
			<pubDate>Tue, 30 Jun 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/020-twir-345/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 345 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWir 345, published on June 29, 2020.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWir 345, published on June 29, 2020.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Faster Rust Development on AWS EC2 with VSCode
  Rust Verification Tools
  Extremely Simple Rust Rocket Framework Tutorial
  Build a Smart Bookmarking Tool with Rust and Rocket
  Secure Rust Guidelines
  Examining ARM vs x86 Memory Models with Rust
  Rust Stream: Iterators
  Manipulating ports, virtual ports and pseudo terminals
  Database Project
  Gooseberry
  Ruma
  Crates.io token scopes
  Linking modifiers for native libraries
  Portable packed SIMD vector types
  Hierarchic anonymous life-time
  Inline const expressions and patterns
  Inline Assembly
  Deduplicate Cargo workspace information


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWir 345, published on June 29, 2020.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://dev.to/rimutaka/faster-rust-development-on-aws-ec2-with-vscode-4hno">Faster Rust Development on AWS EC2 with VSCode</a></li>
  <li><a href="https://alastairreid.github.io/rust-verification-tools/">Rust Verification Tools</a></li>
  <li><a href="https://frogtok.com/extremely-simple-rust-rocket-framework-tutorial/">Extremely Simple Rust Rocket Framework Tutorial</a></li>
  <li><a href="https://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/">Build a Smart Bookmarking Tool with Rust and Rocket</a></li>
  <li><a href="https://anssi-fr.github.io/rust-guide/">Secure Rust Guidelines</a></li>
  <li><a href="https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/">Examining ARM vs x86 Memory Models with Rust</a></li>
  <li><a href="https://www.youtube.com/watch?v=lQt0adYPdfQ&amp;feature=youtu.be">Rust Stream: Iterators</a></li>
  <li><a href="https://www.youtube.com/watch?v=_cYz03jS7tk&amp;feature=youtu.be">Manipulating ports, virtual ports and pseudo terminals</a></li>
  <li><a href="https://github.com/alex-dukhno/database">Database Project</a></li>
  <li><a href="https://github.com/out-of-cheese-error/gooseberry">Gooseberry</a></li>
  <li><a href="https://github.com/ruma/ruma">Ruma</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2947">Crates.io token scopes</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2951">Linking modifiers for native libraries</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2948">Portable packed SIMD vector types</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2949">Hierarchic anonymous life-time</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2920">Inline <code>const</code> expressions and patterns</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2873">Inline Assembly</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2906">Deduplicate Cargo workspace information</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-06-29.mp3" length="13986712" type="audio/mpeg"/>
			<itunes:duration>09:43</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/020-mun/</link>
			<pubDate>Fri, 26 Jun 2020 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/020-mun/</guid>
			

			<title><![CDATA[ Mun ]]></title>
			<itunes:summary><![CDATA[ First time host, long time editor Jeremy talks with Bas and Remco, creators of the Mun project. Mun is a programming language empowering creation through speedy, hot reloading iteration written in Rust. Why Rust for a project like this? That’s what we explore in this episode.
 ]]></itunes:summary>
			<description><![CDATA[ First time host, long time editor Jeremy talks with Bas and Remco, creators of the Mun project. Mun is a programming language empowering creation through speedy, hot reloading iteration written in Rust. Why Rust for a project like this? That’s what we explore in this episode.

Contributing to Rustacean Station
Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  The Mun Website
  The Mun github repo
  Pull Requests
  The Mozilla Grant
  The Amethyst Project
  The Mun community Discorrd


Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Webb and Jeremy Jung Huge thanks to him for denoising the guests’ tracks.

Hosting Infrastructure: Jon Gjengset

Show Notes: Jeremy Webb

Hosts: Jeremy Webb

Guests: Remco Kuijper and Bas Zalmstra
 ]]></description>
			<content:encoded><![CDATA[ <p>First time host, long time editor Jeremy talks with Bas and Remco, creators of the Mun project. Mun is a programming language empowering creation through speedy, hot reloading iteration written in Rust. Why Rust for a project like this? That’s what we explore in this episode.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>
<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://mun-lang.org/">The Mun Website</a></li>
  <li><a href="https://github.com/mun-lang">The Mun github repo</a></li>
  <li><a href="https://github.com/mun-lang/mun/issues/220">Pull Requests</a></li>
  <li><a href="https://www.mozilla.org/en-US/moss/">The Mozilla Grant</a></li>
  <li><a href="https://amethyst.rs/">The Amethyst Project</a></li>
  <li><a href="https://discordapp.com/channels/@me/536489746571198484/724567836097249290">The Mun community Discorrd</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/alphastrata">Jeremy Webb</a> and <a href="https://www.softwaresessions.com/">Jeremy Jung</a> Huge thanks to him for denoising the guests’ tracks.</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: Jeremy Webb</p>

<p>Hosts: Jeremy Webb</p>

<p>Guests: <a href="https://www.linkedin.com/in/remco-k-13a669ba/">Remco Kuijper</a> and <a href="https://www.linkedin.com/in/baszalmstra/">Bas Zalmstra</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e016-mun.mp3" length="40029157" type="audio/mpeg"/>
			<itunes:duration>00:50:38</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/019-twir-344/</link>
			<pubDate>Tue, 23 Jun 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/019-twir-344/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 344 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Announcing Rust 1.44.1
  Writing Non-Trivial Macros in Rust
  How to Design For Panic Resilience in Rust
  Tour of Rust - Chapter 8 - Smart Pointers
  Thread-local Storage - Part 13 of Making our own executable packer
  RISC-V OS using Rust - Chapter 11
  Zero To Production #2: Learn By Building An Email Newsletter
  [video] Crust of Rust: Smart Pointers and Interior Mutability
  [video] CS 196 at Illinois
  [video] Rust Stream: The Guard Pattern and Interior Mutability
  [video] Ask Me Anything with Felix Klock
  GitUI
  Ruma
  RFC: ‘C unwind’ ABI
  impl From&lt;char&gt; for String
  stabilize leading_trailing_ones
  Add TryFrom&lt;{int}&gt; for NonZero{int}
  Stabilize #[track_caller]


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/06/18/Rust.1.44.1.html">Announcing Rust 1.44.1</a></li>
  <li><a href="http://adventures.michaelfbryan.com/posts/non-trivial-macros/">Writing Non-Trivial Macros in Rust</a></li>
  <li><a href="https://towardsdatascience.com/how-to-design-for-panic-resilience-in-rust-55d5fd2478b9">How to Design For Panic Resilience in Rust</a></li>
  <li><a href="https://tourofrust.com/chapter_8_en.html">Tour of Rust - Chapter 8 - Smart Pointers</a></li>
  <li><a href="https://fasterthanli.me/blog/2020/thread-local-storage/">Thread-local Storage - Part 13 of Making our own executable packer</a></li>
  <li><a href="http://osblog.stephenmarz.com/ch11.html">RISC-V OS using Rust - Chapter 11</a></li>
  <li><a href="https://www.lpalmieri.com/posts/2020-06-21-zero-to-production-2-learn-by-building-an-email-newsletter/">Zero To Production #2: Learn By Building An Email Newsletter</a></li>
  <li>[video] <a href="https://www.youtube.com/watch?v=8O0Nt9qY_vo">Crust of Rust: Smart Pointers and Interior Mutability</a></li>
  <li>[video] <a href="https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos">CS 196 at Illinois</a></li>
  <li>[video] <a href="https://www.youtube.com/watch?v=lmEKIvLh9D4&amp;feature=youtu.be">Rust Stream: The Guard Pattern and Interior Mutability</a></li>
  <li>[video] <a href="https://www.youtube.com/watch?v=jGgQmnPH0dQ&amp;feature=youtu.be&amp;t=28792">Ask Me Anything with Felix Klock</a></li>
  <li><a href="https://github.com/extrawurst/gitui">GitUI</a></li>
  <li><a href="https://github.com/ruma/ruma">Ruma</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2945">RFC: ‘C unwind’ ABI</a></li>
  <li><a href="https://github.com/rust-lang/rust/pull/73466">impl <code>From&lt;char&gt;</code> for String</a></li>
  <li><a href="https://github.com/rust-lang/rust/pull/73032">stabilize leading_trailing_ones</a></li>
  <li><a href="https://github.com/rust-lang/rust/pull/72717">Add <code>TryFrom&lt;{int}&gt;</code> for <code>NonZero{int}</code></a></li>
  <li><a href="https://github.com/rust-lang/rust/pull/72445">Stabilize <code>#[track_caller]</code></a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-06-23.mp3" length="17410425" type="audio/mpeg"/>
			<itunes:duration>12:05</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/018-twir-343/</link>
			<pubDate>Tue, 16 Jun 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/018-twir-343/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 343 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  2020 Event Lineup - Update
  Announcing RustFest Global 2020 🎉
  RustConf 2020 Registration is Open
  Understanding the Rust Ecosystem
  Errors in Rust: A Deep Dive
  Getting Started With The STM32 Nucleo-F302R8 and Rust
  Rustls Security Review &amp; Audit Report
  [audio] AreWePodcastYet - Interview with Tim McNamara, author of Rust in Action
  [video] Rust Notebooks (Jupyter and Evcxr) - Getting Started
  RFC: add the Freeze trait to libcore/libstd
  add Windows system error codes that should map to io::ErrorKind::TimedOut
  impl PartialEq&lt;Vec&lt;B&gt;&gt; for &amp;[A], &amp;mut [A]


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/06/10/event-lineup-update.html">2020 Event Lineup - Update</a></li>
  <li><a href="https://blog.rustfest.eu/announcing-rustfest-2020">Announcing RustFest Global 2020 🎉</a></li>
  <li><a href="https://rustconf.com/">RustConf 2020 Registration is Open</a></li>
  <li><a href="https://joeprevite.com/rust-lang-ecosystem">Understanding the Rust Ecosystem</a></li>
  <li><a href="https://www.halcyon.hr/posts/error-handling-in-rust/">Errors in Rust: A Deep Dive</a></li>
  <li><a href="https://blue42.net/code/rust/examples/embedded/nucleo-f30248/getting-started/post/">Getting Started With The STM32 Nucleo-F302R8 and Rust</a></li>
  <li><a href="https://github.com/ctz/rustls/blob/master/audit/TLS-01-report.pdf">Rustls Security Review &amp; Audit Report</a></li>
  <li>[audio] <a href="https://soundcloud.com/arewepodcastyet/awpy-05-tim-mcnamara-timclicks">AreWePodcastYet - Interview with Tim McNamara, author of Rust in Action</a></li>
  <li>[video] <a href="https://www.youtube.com/watch?v=SZKEzNL9als">Rust Notebooks (Jupyter and Evcxr) - Getting Started</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2944">RFC: add the Freeze trait to libcore/libstd</a></li>
  <li><a href="https://github.com/rust-lang/rust/pull/71756">add Windows system error codes that should map to io::ErrorKind::TimedOut</a></li>
  <li><a href="https://github.com/rust-lang/rust/pull/71660">impl <code>PartialEq&lt;Vec&lt;B&gt;&gt; for &amp;[A], &amp;mut [A]</code></a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-06-16.mp3" length="8743623" type="audio/mpeg"/>
			<itunes:duration>06:04</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/017-twir-341-342/</link>
			<pubDate>Tue, 09 Jun 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/017-twir-341-342/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 341 and 342 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources

Issue 341


  This Week in Rust 341
  RustConf
  Rust Contributor Survey
  A Retrospective on the 2018 rust-lang.org redesign
  Contributing to Rust
  How to build a WebSocket server with Rust
  Custom Types in Diesel
  Fuzzing Sequoia-PGP
  Sorting algorithms in Rust
  3D boids swimming in perfect harmony: Implementing the boids flocking algorithm in Rust
  Aprende Rust en español
  A Rust and WASM tutorial on building Bitcoin infrastructure
  Crust of Rust: Iterators
  Rust and Tell Berlin - May 2020


Issue 342


  Announcing Rust 1.44.0
  So What’s Up with Microsoft’s (and Everyone Else’s) Love of Rust?
  Why the developers who use Rust love it so much
  Zero To Production #1: Setup - Toolchain, IDEs, CI
  This Month in Rust OSDev (May 2020)
  This Month in Rust GameDev #10 - May 2020
  This month in rustsim #11 (April - May 2020)
  RiB Newsletter #12 - ZK-Rustups
  Graph &amp; Tree Traversals in Rust
  Memory-Safety Challenge Considered Solved? An Empirical Study with All Rust CVEs
  Simple sorting algorithms in Rust
  Berbagai alasan melakukan Programming dalam Rust
  
    
      
        
          [Rust Web development
          Boilerplate free with Rocket](https://youtu.be/tjH0Mye8U_A)
        
      
    
  
  Educational Rust Live Coding - Building a web app - Part 4
  Iterators - Rust
  Browser computation with WebAssembly Live Stream
  Jonathan Teaches Jason Rust!
  Ruma-events project
  Database project
  Maud project


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<h4 id="issue-341">Issue 341</h4>

<ul>
  <li><a href="https://this-week-in-rust.org/blog/2020/06/02/this-week-in-rust-341/">This Week in Rust 341</a></li>
  <li><a href="https://rustconf.com/">RustConf</a></li>
  <li><a href="https://docs.google.com/forms/d/e/1FAIpQLSek3vddlYf3YFbV1RVavm9qAJhGxw-Zi_XJ8RBIhNUuuf34Pw/viewform">Rust Contributor Survey</a></li>
  <li><a href="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html">A Retrospective on the 2018 rust-lang.org redesign</a></li>
  <li><a href="https://blog.elinvynia.com/posts/2020-05-26-contributing-to-rust.html">Contributing to Rust</a></li>
  <li><a href="https://blog.logrocket.com/how-to-build-a-websocket-server-with-rust/">How to build a WebSocket server with Rust</a></li>
  <li><a href="https://kitsu.me/posts/2020_05_24_custom_types_in_diesel">Custom Types in Diesel</a></li>
  <li><a href="https://blog.hackeriet.no/fuzzing-sequoia/">Fuzzing Sequoia-PGP</a></li>
  <li><a href="https://dev.to/jlkiri/sorting-algorithms-in-rust-1386">Sorting algorithms in Rust</a></li>
  <li><a href="https://www.reddit.com/r/rust/comments/gsldbi/3d_boids_swimming_along_in_perfect_harmony/">3D boids swimming in perfect harmony: Implementing the boids flocking algorithm in Rust</a></li>
  <li><a href="https://dev.to/robertohuertasm/aprende-rust-en-espanol-1pea">Aprende Rust en español</a></li>
  <li><a href="https://www.youtube.com/watch?v=qaykNPHJcyw">A Rust and WASM tutorial on building Bitcoin infrastructure</a></li>
  <li><a href="https://www.youtube.com/watch?v=yozQ9C69pNs&amp;feature=emb_logo">Crust of Rust: Iterators</a></li>
  <li><a href="https://www.youtube.com/watch?v=rpilJV-eIVw&amp;feature=emb_logo">Rust and Tell Berlin - May 2020</a></li>
</ul>

<h4 id="issue-342">Issue 342</h4>

<ul>
  <li><a href="https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html">Announcing Rust 1.44.0</a></li>
  <li><a href="https://visualstudiomagazine.com/articles/2020/06/02/rust-love.aspx?m=1">So What’s Up with Microsoft’s (and Everyone Else’s) Love of Rust?</a></li>
  <li><a href="https://stackoverflow.blog/2020/06/05/why-the-developers-who-use-rust-love-it-so-much/?cb=1">Why the developers who use Rust love it so much</a></li>
  <li><a href="https://www.lpalmieri.com/posts/2020-06-06-zero-to-production-1-setup-toolchain-ides-ci/">Zero To Production #1: Setup - Toolchain, IDEs, CI</a></li>
  <li><a href="https://rust-osdev.com/this-month/2020-05/">This Month in Rust OSDev (May 2020)</a></li>
  <li><a href="https://rust-gamedev.github.io/posts/newsletter-010/">This Month in Rust GameDev #10 - May 2020</a></li>
  <li><a href="https://www.rustsim.org/blog/2020/06/01/this-month-in-rustsim/">This month in rustsim #11 (April - May 2020)</a></li>
  <li><a href="https://rustinblockchain.org/newsletters/2020-06-03-zk-rustups/">RiB Newsletter #12 - ZK-Rustups</a></li>
  <li><a href="https://sachanganesh.com/programming/graph-tree-traversals-in-rust/">Graph &amp; Tree Traversals in Rust</a></li>
  <li><a href="https://arxiv.org/abs/2003.03296">Memory-Safety Challenge Considered Solved? An Empirical Study with All Rust CVEs</a></li>
  <li><a href="https://www.bilibili.com/read/cv4991161">Simple sorting algorithms in Rust</a></li>
  <li><a href="https://dev.to/rizki96/berbagai-alasan-melakukan-programming-dalam-rust-p67">Berbagai alasan melakukan Programming dalam Rust</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>[Rust Web development</td>
          <td>Boilerplate free with Rocket](https://youtu.be/tjH0Mye8U_A)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li><a href="https://www.youtube.com/watch?v=Dj8i3rM8FIQ">Educational Rust Live Coding - Building a web app - Part 4</a></li>
  <li><a href="https://www.youtube.com/watch?time_continue=1&amp;v=HZftwxCIXqE&amp;feature=emb_logo">Iterators - Rust</a></li>
  <li><a href="https://www.twitch.tv/occupy_paul_st">Browser computation with WebAssembly Live Stream</a></li>
  <li><a href="https://www.youtube.com/watch?v=Y5-ZgxfQvpc">Jonathan Teaches Jason Rust!</a></li>
  <li><a href="https://github.com/ruma/ruma-events">Ruma-events project</a></li>
  <li><a href="https://alex-dukhno.github.io/2020-05-30-Writing-database-management-system-in-Rust.-When-the-flame-is-born-from-the-ashes/">Database project</a></li>
  <li><a href="https://github.com/lambda-fairy/maud">Maud project</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-06-09.mp3" length="16340240" type="audio/mpeg"/>
			<itunes:duration>11:21</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/016-twir-340/</link>
			<pubDate>Wed, 27 May 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/016-twir-340/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 340 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced resources


  Compiling Rust binaries for Windows 98 SE and more: a journey]
  Conway’s Game of Life on the NES in Rust
  Writing Python inside your Rust code — Part 4
  Zero To Production #0: Foreword
  How to organize your Rust tests
  Rust Macro Rules in Practice
  Bringing WebAssembly outside the web with WASI by Lin Clark
  Microsoft’s Safe Systems Programming Languages Effort
  3 Part Video for Beginners to Rust Programming on Iteration


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced resources</h3>

<ul>
  <li><a href="https://seri.tools/blog/compiling-rust-for-legacy-windows/">Compiling Rust binaries for Windows 98 SE and more: a journey</a>]</li>
  <li><a href="https://gridbugs.org/conways-game-of-life-on-the-nes-in-rust/">Conway’s Game of Life on the NES in Rust</a></li>
  <li><a href="https://blog.m-ou.se/writing-python-inside-rust-4/">Writing Python inside your Rust code — Part 4</a></li>
  <li><a href="https://www.lpalmieri.com/posts/2020-05-24-zero-to-production-0-foreword/">Zero To Production #0: Foreword</a></li>
  <li><a href="https://blog.logrocket.com/how-to-organize-your-rust-tests/">How to organize your Rust tests</a></li>
  <li><a href="https://dev.to/sassman/rust-macro-rules-in-practice-40ne">Rust Macro Rules in Practice</a></li>
  <li><a href="https://www.youtube.com/watch?v=fh9WXPu0hw8">Bringing WebAssembly outside the web with WASI by Lin Clark</a></li>
  <li><a href="https://mybuild.microsoft.com/sessions/61de34c5-b111-4ece-928f-541854875862?source=sessions">Microsoft’s Safe Systems Programming Languages Effort</a></li>
  <li><a href="https://tim.mcnamara.nz/post/618982870485172224/rust-iteration">3 Part Video for Beginners to Rust Programming on Iteration</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-05-26.mp3" length="7780645" type="audio/mpeg"/>
			<itunes:duration>05:24</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/015-twir-339/</link>
			<pubDate>Tue, 19 May 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/015-twir-339/</guid>
			

			<title><![CDATA[ This Week in Rust - Issue 339 ]]></title>
			<itunes:summary><![CDATA[ Nell Shamrell-Harrington - lead editor of This Week in Rust - takes you through highlights from this week’s issue of TWiR.
 ]]></itunes:summary>
			<description><![CDATA[ Nell Shamrell-Harrington - lead editor of This Week in Rust - takes you through highlights from this week’s issue of TWiR.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Referenced Resources


  This Week in Rust GitHub Repository
  Five Years of Rust
  The case for using Rust for Automotive Software
  Rust releases for single and multiple targets with GitHub Actions
  Rust and C++ Cardiff Virtual Meetup
  Jonathan Teaches Jason Rust!
  RFC: Transition to rust-analyzer as our official LSP (Language Server Protocol) implementation
  RFC: Reading into uninitialized buffers


Credits

Hosting Infrastructure: Jon Gjengset

Show Notes: Nell Shamrell-Harrington

Hosts: Nell Shamrell-Harrington
 ]]></description>
			<content:encoded><![CDATA[ <p>Nell Shamrell-Harrington - lead editor of This Week in Rust - takes you through highlights from this week’s issue of TWiR.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="referenced-resources">Referenced Resources</h3>

<ul>
  <li><a href="https://github.com/emberian/this-week-in-rust">This Week in Rust GitHub Repository</a></li>
  <li><a href="https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html">Five Years of Rust</a></li>
  <li><a href="https://medium.com/@sojan.james/the-case-for-using-rust-for-automotive-software-19400779f126">The case for using Rust for Automotive Software</a></li>
  <li><a href="https://mateuscosta.me/rust-releases-with-github-actions">Rust releases for single and multiple targets with GitHub Actions</a></li>
  <li><a href="https://www.youtube.com/watch?v=s8WMaVU3EBs&amp;feature=youtu.be">Rust and C++ Cardiff Virtual Meetup</a></li>
  <li><a href="https://www.youtube.com/watch?v=EzQ7YIIo1rY&amp;feature=youtu.be">Jonathan Teaches Jason Rust!</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2912">RFC: Transition to rust-analyzer as our official LSP (Language Server Protocol) implementation</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/pull/2930">RFC: Reading into uninitialized buffers</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/nellshamrell">Nell Shamrell-Harrington</a></p>

<p>Hosts: Nell Shamrell-Harrington</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/twir-2020-05-19.mp3" length="5267717" type="audio/mpeg"/>
			<itunes:duration>07:34</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/014-rust-1.42-1.43/</link>
			<pubDate>Fri, 08 May 2020 14:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/014-rust-1.42-1.43/</guid>
			

			<title><![CDATA[ What's New in Rust 1.42 and 1.43 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben examine the features of Rust 1.42 and Rust 1.43.

 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben examine the features of Rust 1.42 and Rust 1.43.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@01:45] - Useful line numbers on unwrap
    
      #[track_caller]
    
  
  [@04:22] - Subslice patterns
    
      Stabilization report
      Ignoring with ..
      @-patterns
      struct updates with ..
    
  
  [@16:09] - matches!
    
      Macro documentation
      Jon proposes assert_matches
    
  
  [@18:13] - Error::description deprecation
    
      RFC
      Soft deprecation in 1.27
      failure
      thiserror
      anyhow
      eyre
      Jane expermenting with track_caller in eyre
    
  
  [@24:23] - Other changes in 1.42
    
      Documentation improvements to cargo
    
  
  [@26:47] - Rust 1.43
  [@27:17] - item macro fragments and parser improvements in general
    
      More details about the problem
      PR that fixed this
    
  
  [@33:30] - Primitive type inference
  [@36:22] - Smaller changes surfacing in release notes
    
      Steve Klabnik’s blog post
      Rust 2020 roadmap on “finishing things”
    
  
  [@39:00] - New cargo environment variables
    
      Cargo target directory
      assert_cmd
      Environment variables set by cargo
    
  
  [@43:39] - Associated consts on numeric types
    
      Ben’s RFC
      Issue from way back when
      The associated constants PR (2015)
      max_value PR (2015)
      PR for Ben’s RFC
    
  
  [@51:54] - What can we do in an edition?
    
      Error::source RFC
    
  
  [@54:20] - The primitive module
    
      use paths
      The Rust prelude
      Next edition prelude
    
  
  [@57:50] - String implements AsMut&lt;str&gt;
  [@59:40] - cargo profile in config
    
      cargo global configuration
    
  
  [@1:02:03] - New feature resolver
    
      cargo merges features between dependency types
    
  
  [@1:05:30] - Lots of new clippy lints: 1.42, 1.43
    
      All the clippy lints
      Pruning unwanted clippy lints
    
  
  [@1:08:52] - Rustfest postponed


Credits

Intro Theme: Aerocity

Audio Editing: @alphastrata

Hosting Infrastructure: Jon Gjengset

Show Notes: Jon Gjengset

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben examine the features of <a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html">Rust 1.42</a> and <a href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html">Rust 1.43</a>.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@01:45] - <a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#useful-line-numbers-in-option-and-result-panic-messages">Useful line numbers on <code>unwrap</code></a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/47809"><code>#[track_caller]</code></a></li>
    </ul>
  </li>
  <li>[@04:22] - <a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#subslice-patterns">Subslice patterns</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/pull/67712/">Stabilization report</a></li>
      <li><a href="https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#ignoring-remaining-parts-of-a-value-with-">Ignoring with <code>..</code></a></li>
      <li><a href="https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#-bindings"><code>@</code>-patterns</a></li>
      <li><a href="https://doc.rust-lang.org/book/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax">struct updates with <code>..</code></a></li>
    </ul>
  </li>
  <li>[@16:09] - <a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#matches"><code>matches!</code></a>
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/std/macro.matches.html">Macro documentation</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/65721#issuecomment-566158398">Jon proposes <code>assert_matches</code></a></li>
    </ul>
  </li>
  <li>[@18:13] - <a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#errordescription-is-deprecated"><code>Error::description</code> deprecation</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/2504-fix-error.html">RFC</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/50163">Soft deprecation in 1.27</a></li>
      <li><a href="https://crates.io/crates/failure"><code>failure</code></a></li>
      <li><a href="https://crates.io/crates/thiserror"><code>thiserror</code></a></li>
      <li><a href="https://crates.io/crates/anyhow"><code>anyhow</code></a></li>
      <li><a href="https://crates.io/crates/eyre"><code>eyre</code></a></li>
      <li><a href="https://twitter.com/yaahc_/status/1253771822920634369">Jane expermenting with <code>track_caller</code> in <code>eyre</code></a></li>
    </ul>
  </li>
  <li>[@24:23] - <a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#other-changes">Other changes in 1.42</a>
    <ul>
      <li><a href="https://github.com/rust-lang/cargo/pull/7733">Documentation improvements to cargo</a></li>
    </ul>
  </li>
  <li>[@26:47] - <a href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html">Rust 1.43</a></li>
  <li>[@27:17] - <a href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#item-fragments"><code>item</code> macro fragments</a> and parser improvements in general
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues/48137">More details about the problem</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/69366">PR that fixed this</a></li>
    </ul>
  </li>
  <li>[@33:30] - <a href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#type-inference-around-primitives">Primitive type inference</a></li>
  <li>[@36:22] - Smaller changes surfacing in release notes
    <ul>
      <li><a href="https://words.steveklabnik.com/how-often-does-rust-change">Steve Klabnik’s blog post</a></li>
      <li><a href="https://github.com/rust-lang/rfcs/blob/master/text/2857-roadmap-2020.md#follow-through-with-in-progress-designs-and-efforts">Rust 2020 roadmap on “finishing things”</a></li>
    </ul>
  </li>
  <li>[@39:00] - <a href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#new-cargo-environment-variable-for-tests">New cargo environment variables</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/cargo/reference/config.html#buildtarget-dir">Cargo target directory</a></li>
      <li><a href="https://crates.io/crates/assert_cmd"><code>assert_cmd</code></a></li>
      <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates">Environment variables set by cargo</a></li>
    </ul>
  </li>
  <li>[@43:39] - <a href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#library-changes">Associated consts on numeric types</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rfcs/pull/2700">Ben’s RFC</a></li>
      <li><a href="https://github.com/rust-lang/rfcs/issues/1099">Issue from way back when</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/23606">The associated constants PR (2015)</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/23947"><code>max_value</code> PR (2015)</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/68952/">PR for Ben’s RFC</a></li>
    </ul>
  </li>
  <li>[@51:54] - What can we do in an edition?
    <ul>
      <li><a href="https://rust-lang.github.io/rfcs/2504-fix-error.html"><code>Error::source</code> RFC</a></li>
    </ul>
  </li>
  <li>[@54:20] - <a href="https://doc.rust-lang.org/std/primitive/index.html">The <code>primitive</code> module</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/reference/items/use-declarations.html#use-paths"><code>use</code> paths</a></li>
      <li><a href="https://doc.rust-lang.org/std/prelude/index.html">The Rust prelude</a></li>
      <li><a href="https://github.com/rust-lang/rust/issues/65512">Next edition prelude</a></li>
    </ul>
  </li>
  <li>[@57:50] - <a href="https://github.com/rust-lang/rust/pull/68742/"><code>String</code> implements <code>AsMut&lt;str&gt;</code></a></li>
  <li>[@59:40] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/config.html#profile">cargo profile in config</a>
    <ul>
      <li><a href="https://doc.rust-lang.org/nightly/cargo/reference/config.html">cargo global configuration</a></li>
    </ul>
  </li>
  <li>[@1:02:03] - <a href="https://github.com/rust-lang/cargo/pull/7820">New feature resolver</a>
    <ul>
      <li><a href="https://github.com/rust-lang/cargo/issues/4866">cargo merges features between dependency types</a></li>
    </ul>
  </li>
  <li>[@1:05:30] - Lots of new clippy lints: <a href="https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-142">1.42</a>, <a href="https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-143">1.43</a>
    <ul>
      <li><a href="https://rust-lang.github.io/rust-clippy/master/index.html">All the clippy lints</a></li>
      <li><a href="https://github.com/rust-lang/rust-clippy/issues/5418">Pruning unwanted clippy lints</a></li>
    </ul>
  </li>
  <li>[@1:08:52] - <a href="https://blog.rustfest.eu/postponing-rustfest-nl">Rustfest postponed</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/alphastrata">@alphastrata</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e014-rust-1.42-1.43.mp3" length="51040384" type="audio/mpeg"/>
			<itunes:duration>1:10:53</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/013-rust-1.41.0/</link>
			<pubDate>Wed, 19 Feb 2020 19:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/013-rust-1.41.0/</guid>
			

			<title><![CDATA[ What's New in Rust 1.41 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben examine the features of Rust 1.41.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben examine the features of Rust 1.41.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@02:39] - Relaxed restrictions when implementing traits
  [@09:54] - cargo install updates packages when outdated
  [@12:20] - Less conflict-prone Cargo.lock format
  [@20:27] - More guarantees when using Box&lt;T&gt; in FFI
    
      Rust Unsafe Code Guidelines Working Group
    
  
  [@26:22] - NonZero* numeric types now implement From&lt;NonZero*&gt; for smaller integer widths
  [@30:40] - Reducing support for 32-bit Apple targets soon
  [@31:47] - Compiler frontend support for constant propagation
    
      Inside Rust Blog - Constant propagation is now on by default
    
  
  [@35:06] - Cargo profile overrides
  [@39:52] - Nested custom Self receivers




Credits

Intro Theme: Aerocity

Audio Editing: Zoran Zaric

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben examine the features of <a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html">Rust 1.41</a>.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@02:39] - <a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#relaxed-restrictions-when-implementing-traits">Relaxed restrictions when implementing traits</a></li>
  <li>[@09:54] - <a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#cargo-install-updates-packages-when-outdated"><code>cargo install</code> updates packages when outdated</a></li>
  <li>[@12:20] - <a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#less-conflict-prone-cargolock-format">Less conflict-prone Cargo.lock format</a></li>
  <li>[@20:27] - <a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#more-guarantees-when-using-boxt%3E-in-ffi">More guarantees when using <code>Box&lt;T&gt;</code> in FFI</a>
    <ul>
      <li><a href="https://github.com/rust-lang/unsafe-code-guidelines">Rust Unsafe Code Guidelines Working Group</a></li>
    </ul>
  </li>
  <li>[@26:22] - <code>NonZero*</code> numeric types now implement <code>From&lt;NonZero*&gt;</code> for smaller integer widths</li>
  <li>[@30:40] - <a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#reducing-support-for-32-bit-apple-targets-soon">Reducing support for 32-bit Apple targets soon</a></li>
  <li>[@31:47] - Compiler frontend support for constant propagation
    <ul>
      <li><a href="https://blog.rust-lang.org/inside-rust/2019/12/02/const-prop-on-by-default.html">Inside Rust Blog - Constant propagation is now on by default</a></li>
    </ul>
  </li>
  <li>[@35:06] - <a href="https://doc.rust-lang.org/nightly/cargo/reference/profiles.html#overrides">Cargo profile overrides</a></li>
  <li>[@39:52] - <a href="https://github.com/rust-lang/rust/pull/64325">Nested custom <code>Self</code> receivers</a></li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/zoranzaric">Zoran Zaric</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e013-rust-1.41.0.mp3" length="32615549" type="audio/mpeg"/>
			<itunes:duration>45:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/012-pietro-pascal-santiago/</link>
			<pubDate>Fri, 07 Feb 2020 20:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/012-pietro-pascal-santiago/</guid>
			

			<title><![CDATA[ RustFest Interviews Triple Feature: Rust Release Engineering; Developing the Developer Tools; Rust in Latin America ]]></title>
			<itunes:summary><![CDATA[ Another trio of interviews from RustFest 2019: Pietro Albini on Crater and the Rust Infrastructure Team; Pascal Hertleif on the Rust Developer Tools Team; and Santiago Pastorino on the Rust Latam conference in Latin America.
 ]]></itunes:summary>
			<description><![CDATA[ Another trio of interviews from RustFest 2019: Pietro Albini on Crater and the Rust Infrastructure Team; Pascal Hertleif on the Rust Developer Tools Team; and Santiago Pastorino on the Rust Latam conference in Latin America.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:00] Part 1: Crater &amp; Rust Release Infrastructure w/ Pietro Albini


  [@01:01] - What is your role in the Rust project?
  [@01:46] - What lessons did the infrastructure team learn from the Rust 2018 release?
  [@03:29] - How do you feel about potential future Rust editions in 2021 or beyond?
  [@06:26] - Do you think Rust’s regular release cycle too fast or too slow?
  [@08:56] - How does Crater guard against language regressions, and what things doesn’t it catch?
    
      rust-lang/crater
    
  
  [@11:12] - How has Crater scaled as the ecosystem has grown, and is it at risk of becoming infeasible to run?
  [@16:17] - How can someone get involved with the Infrastructure Team?
    
      #infra Discord channel
    
  


[@17:25] Part 2: Developer Tools w/ Pascal Hertleif


  [@18:23] - What is the Developer Tools Team?
  [@19:39] - What tools is the Developer Tools Team responsible for, and what purposes do they serve?
  [@24:46] - Which tools in particular would you like to draw attention to?
  [@26:19] - How does rust-analyzer compare to RLS?
    
      rust-lang/rls
      rust-analyzer/rust-analyzer
    
  
  [@29:42] - How does the Developer Tools Team coordinate?
  [@32:00] - How was your experience at RustFest this year?


[@36:21] Part 3: Rust Latam w/ Santiago Pastorino


  [@36:46] - What is Rust Latam?
  [@37:42] - What inspired you to start a Rust conference in Latin America?
  [@39:06] - How big is Rust Latam?
  [@40:15] - What is interest in Rust like in Latin America?
  [@42:42] - What is the broader software industry like in Latin America?
  [@44:59] - What’s next for Rust Latam?
  [@45:42] - How did you get into Rust?
  [@50:17] - What venues are there for Spanish or Portuguese-speaking Rust users?
    
      Rust Brazilian Telegram Group
    
  
  [@51:34] - How can someone learn more about Rust Latam?




Credits

Intro Theme: Aerocity

Audio Editing: Zoran Zaric

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Another trio of interviews from RustFest 2019: <a href="https://twitter.com/pietroalbini">Pietro Albini</a> on Crater and the Rust Infrastructure Team; <a href="https://twitter.com/killercup">Pascal Hertleif</a> on the Rust Developer Tools Team; and <a href="https://twitter.com/spastorino">Santiago Pastorino</a> on the <a href="https://rustlatam.org/">Rust Latam</a> conference in Latin America.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0000-part-1-crater--rust-release-infrastructure-w-pietro-albini">[@00:00] Part 1: Crater &amp; Rust Release Infrastructure w/ Pietro Albini</h4>

<ul>
  <li>[@01:01] - What is your role in the Rust project?</li>
  <li>[@01:46] - What lessons did the infrastructure team learn from the Rust 2018 release?</li>
  <li>[@03:29] - How do you feel about potential future Rust editions in 2021 or beyond?</li>
  <li>[@06:26] - Do you think Rust’s regular release cycle too fast or too slow?</li>
  <li>[@08:56] - How does Crater guard against language regressions, and what things doesn’t it catch?
    <ul>
      <li><a href="https://github.com/rust-lang/crater">rust-lang/crater</a></li>
    </ul>
  </li>
  <li>[@11:12] - How has Crater scaled as the ecosystem has grown, and is it at risk of becoming infeasible to run?</li>
  <li>[@16:17] - How can someone get involved with the Infrastructure Team?
    <ul>
      <li><a href="https://discord.gg/AxXmxzN">#infra Discord channel</a></li>
    </ul>
  </li>
</ul>

<h4 id="1725-part-2-developer-tools-w-pascal-hertleif">[@17:25] Part 2: Developer Tools w/ Pascal Hertleif</h4>

<ul>
  <li>[@18:23] - What is the Developer Tools Team?</li>
  <li>[@19:39] - What tools is the Developer Tools Team responsible for, and what purposes do they serve?</li>
  <li>[@24:46] - Which tools in particular would you like to draw attention to?</li>
  <li>[@26:19] - How does rust-analyzer compare to RLS?
    <ul>
      <li><a href="https://github.com/rust-lang/rls">rust-lang/rls</a></li>
      <li><a href="https://github.com/rust-analyzer/rust-analyzer">rust-analyzer/rust-analyzer</a></li>
    </ul>
  </li>
  <li>[@29:42] - How does the Developer Tools Team coordinate?</li>
  <li>[@32:00] - How was your experience at RustFest this year?</li>
</ul>

<h4 id="3621-part-3-rust-latam-w-santiago-pastorino">[@36:21] Part 3: Rust Latam w/ Santiago Pastorino</h4>

<ul>
  <li>[@36:46] - What is <a href="https://rustlatam.org/">Rust Latam</a>?</li>
  <li>[@37:42] - What inspired you to start a Rust conference in Latin America?</li>
  <li>[@39:06] - How big is Rust Latam?</li>
  <li>[@40:15] - What is interest in Rust like in Latin America?</li>
  <li>[@42:42] - What is the broader software industry like in Latin America?</li>
  <li>[@44:59] - What’s next for Rust Latam?</li>
  <li>[@45:42] - How did you get into Rust?</li>
  <li>[@50:17] - What venues are there for Spanish or Portuguese-speaking Rust users?
    <ul>
      <li><a href="https://t.me/rustlangbr">Rust Brazilian Telegram Group</a></li>
    </ul>
  </li>
  <li>[@51:34] - How can someone learn more about Rust Latam?</li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/zoranzaric">Zoran Zaric</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Hosts: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e012-rustfest-pietro-pascal-santiago.mp3" length="38542001" type="audio/mpeg"/>
			<itunes:duration>53:32</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/011-jake-yoshua-stjepan/</link>
			<pubDate>Wed, 22 Jan 2020 23:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/011-jake-yoshua-stjepan/</guid>
			

			<title><![CDATA[ RustFest Interviews Triple Feature: Rust for AAA Game Development; Async Foundations with `async-std`; and Powerful Concurrency Primitives with `crossbeam` ]]></title>
			<itunes:summary><![CDATA[ Three more interviews from RustFest 2019: Jake Shadle on using Rust for high-performance game engines at Embark, applying lessons learned from working on EA DICE’s Frostbite engine; Yoshua Wuyts on async-std and Rust’s async ecosystem; and Stjepan Glavina on crossbeam, Rust’s foundational library for powerful concurrency primitives.
 ]]></itunes:summary>
			<description><![CDATA[ Three more interviews from RustFest 2019: Jake Shadle on using Rust for high-performance game engines at Embark, applying lessons learned from working on EA DICE’s Frostbite engine; Yoshua Wuyts on async-std and Rust’s async ecosystem; and Stjepan Glavina on crossbeam, Rust’s foundational library for powerful concurrency primitives.

Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:00] Part 1: Game Development @ Embark Studios w/ Jake Shadle


  [@01:25] - What is yours (and Embark’s) background in game development?
  [@02:14] - What is the relevance of the Frostbite engine and what is your experience with it?
  [@04:15] - What makes you think that Rust as a language is suitable for game development?
  [@06:13] - How is parallelism employed in a game engine on the scale of Frostbite?
  [@07:07] - Where is the Rust library ecosystem lacking for your use case, and what crates are you making use of?
  [@11:13] - Why is Embark interested in WebAssembly?
  [@14:20] - How can someone get in touch or learn more about Embark?
    
      embark.dev
      Inside Rust at Embark
    
  


[@15:09] Part 2: async-std w/ Yoshua Wuyts


  [@15:48] - How much of the Rust standard library is async-std intended to emulate?
  [@17:12] - Is there anything from async-std that ought to be upstreamed into the standard library?
  [@19:20] - Does async-std run into any conflicts with the types or traits defined in futures-rs or the standard library?
  [@22:21] - How complete or incomplete is Rust’s async ecosystem and async language support?
    
      async-trait: a procedural macro for providing async trait methods on stable Rust
    
  
  [@26:21] - How close is async-std to being a drop-in replacement for the standard library?
  [@28:32] - What’s next for the development of async-std?
  [@30:07] - With the advent of async-std version 1.0, what would an eventual 2.0 release look like?
  [@32:09] - Who is using async-std?
  [@32:54] - How can someone get in touch or get involved?
    
      async.rs
      github.com/async-rs
    
  


[@34:02] Part 3: crossbeam w/ Stjepan Glavina


  [@34:29] - What is crossbeam and what is its history?
  [@36:41] - What is epoch-based garbage collection, and why would a Rust user want to use it?
  [@38:17] - How does epoch-based garbage collection compare to std::sync::Arc?
  [@41:30] - What is your background in concurrent programming?
  [@42:59] - How do crossbeam’s channels compare to those in the standard library?
  [@44:33] - How much research was involved in writing crossbeam?
  [@45:35] - Do crossbeam’s channels provide a selection interface?
  [@46:34] - What other primitives does crossbeam provide?
  [@48:37] - How confident are you in the correctness of crossbeam’s implementation?
  [@49:46] - How is crossbeam related to rayon and async-std?
  [@51:53] - What’s next for crossbeam?


Credits

Intro Theme: Aerocity

Audio Editing: Zoran Zaric

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel, Zoran Zaric

Hosts: Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Three more interviews from RustFest 2019: <a href="https://twitter.com/Ca1ne">Jake Shadle</a> on using Rust for high-performance game engines at <a href="https://www.embark-studios.com/">Embark</a>, applying lessons learned from working on EA DICE’s Frostbite engine; <a href="https://twitter.com/yoshuawuyts">Yoshua Wuyts</a> on <code>async-std</code> and Rust’s async ecosystem; and <a href="https://twitter.com/stjepang">Stjepan Glavina</a> on <code>crossbeam</code>, Rust’s foundational library for powerful concurrency primitives.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0000-part-1-game-development--embark-studios-w-jake-shadle">[@00:00] Part 1: Game Development @ Embark Studios w/ Jake Shadle</h4>

<ul>
  <li>[@01:25] - What is yours (and Embark’s) background in game development?</li>
  <li>[@02:14] - What is the relevance of the Frostbite engine and what is your experience with it?</li>
  <li>[@04:15] - What makes you think that Rust as a language is suitable for game development?</li>
  <li>[@06:13] - How is parallelism employed in a game engine on the scale of Frostbite?</li>
  <li>[@07:07] - Where is the Rust library ecosystem lacking for your use case, and what crates are you making use of?</li>
  <li>[@11:13] - Why is Embark interested in WebAssembly?</li>
  <li>[@14:20] - How can someone get in touch or learn more about Embark?
    <ul>
      <li><a href="https://www.embark.dev/">embark.dev</a></li>
      <li><a href="https://medium.com/embarkstudios/inside-rust-at-embark-b82c06d1d9f4">Inside Rust at Embark</a></li>
    </ul>
  </li>
</ul>

<h4 id="1509-part-2-async-std-w-yoshua-wuyts">[@15:09] Part 2: <code>async-std</code> w/ Yoshua Wuyts</h4>

<ul>
  <li>[@15:48] - How much of the Rust standard library is <code>async-std</code> intended to emulate?</li>
  <li>[@17:12] - Is there anything from <code>async-std</code> that ought to be upstreamed into the standard library?</li>
  <li>[@19:20] - Does <code>async-std</code> run into any conflicts with the types or traits defined in <code>futures-rs</code> or the standard library?</li>
  <li>[@22:21] - How complete or incomplete is Rust’s async ecosystem and async language support?
    <ul>
      <li><a href="https://crates.io/crates/async-trait"><code>async-trait</code>: a procedural macro for providing async trait methods on stable Rust</a></li>
    </ul>
  </li>
  <li>[@26:21] - How close is <code>async-std</code> to being a drop-in replacement for the standard library?</li>
  <li>[@28:32] - What’s next for the development of <code>async-std</code>?</li>
  <li>[@30:07] - With the advent of <code>async-std</code> version 1.0, what would an eventual 2.0 release look like?</li>
  <li>[@32:09] - Who is using <code>async-std</code>?</li>
  <li>[@32:54] - How can someone get in touch or get involved?
    <ul>
      <li><a href="https://async.rs/">async.rs</a></li>
      <li><a href="https://github.com/async-rs/">github.com/async-rs</a></li>
    </ul>
  </li>
</ul>

<h4 id="3402-part-3-crossbeam-w-stjepan-glavina">[@34:02] Part 3: <code>crossbeam</code> w/ Stjepan Glavina</h4>

<ul>
  <li>[@34:29] - What is <code>crossbeam</code> and what is its history?</li>
  <li>[@36:41] - What is epoch-based garbage collection, and why would a Rust user want to use it?</li>
  <li>[@38:17] - How does epoch-based garbage collection compare to <code>std::sync::Arc</code>?</li>
  <li>[@41:30] - What is your background in concurrent programming?</li>
  <li>[@42:59] - How do <code>crossbeam</code>’s channels compare to those in the standard library?</li>
  <li>[@44:33] - How much research was involved in writing <code>crossbeam</code>?</li>
  <li>[@45:35] - Do <code>crossbeam</code>’s channels provide a selection interface?</li>
  <li>[@46:34] - What other primitives does <code>crossbeam</code> provide?</li>
  <li>[@48:37] - How confident are you in the correctness of <code>crossbeam</code>’s implementation?</li>
  <li>[@49:46] - How is <code>crossbeam</code> related to <code>rayon</code> and <code>async-std</code>?</li>
  <li>[@51:53] - What’s next for <code>crossbeam</code>?</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/zoranzaric">Zoran Zaric</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a>, <a href="https://twitter.com/zoranzaric">Zoran Zaric</a></p>

<p>Hosts: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e011-rustfest-jake-yoshua-stjepan.mp3" length="38682435" type="audio/mpeg"/>
			<itunes:duration>53:43</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/010-rust-1.40.0/</link>
			<pubDate>Mon, 13 Jan 2020 21:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/010-rust-1.34.0/</guid>
			

			<title><![CDATA[ What's New in Rust 1.40 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben review the changes introduced in Rust 1.40.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben review the changes introduced in Rust 1.40.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:52] - #[non_exhaustive] structs, enums, and variants
  [@12:31] - Macro and attribute improvements
    
      StackOverflow: How do I create a function-like procedural macro?
    
  
  [@24:33] - Borrow check migration warnings are hard errors in Rust 2015
  [@25:21] - More const fns in the standard library
    
      const-hack issue label
      Rustacean Station: Compile-Time Evaluation, Interpreted Rust, and UB Sanitizing: Talking to Oliver Scherer about Miri
    
  
  [@28:31] - The todo! macro
  [@34:28] - slice::repeat
  [@35:09] - mem::take
  [@36:55] - BTreeMap::get_key_value and HashMap::get_key_value
    
      Ivan Dubrov: Tricking the HashMap
    
  
  [@40:24] - Standardized functions for converting floating-point types to byte arrays of specific endianness
    
      Proposed Rust RFC: Standard lazy types
      Rust PR: Stabilize the matches! macro
    
  
  [@45:55] - Cargo tweaks




Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben review the changes introduced in <a href="https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html">Rust 1.40</a>.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:52] - <a href="https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#[non_exhaustive]-structs,-enums,-and-variants"><code>#[non_exhaustive]</code> structs, enums, and variants</a></li>
  <li>[@12:31] - <a href="https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#macro-and-attribute-improvements">Macro and attribute improvements</a>
    <ul>
      <li><a href="https://stackoverflow.com/questions/58922119/how-do-i-create-a-function-like-procedural-macro">StackOverflow: How do I create a function-like procedural macro?</a></li>
    </ul>
  </li>
  <li>[@24:33] - <a href="https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#borrow-check-migration-warnings-are-hard-errors-in-rust-2015">Borrow check migration warnings are hard errors in Rust 2015</a></li>
  <li>[@25:21] - <a href="https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#macro-and-attribute-improvements">More const fns in the standard library</a>
    <ul>
      <li><a href="https://github.com/rust-lang/rust/issues?q=label%3Aconst-hack"><code>const-hack</code> issue label</a></li>
      <li><a href="https://rustacean-station.org/episode/008-oli-miri/">Rustacean Station: Compile-Time Evaluation, Interpreted Rust, and UB Sanitizing: Talking to Oliver Scherer about Miri</a></li>
    </ul>
  </li>
  <li>[@28:31] - <a href="https://doc.rust-lang.org/std/macro.todo.html">The <code>todo!</code> macro</a></li>
  <li>[@34:28] - <a href="https://doc.rust-lang.org/std/primitive.slice.html#method.repeat"><code>slice::repeat</code></a></li>
  <li>[@35:09] - <a href="https://doc.rust-lang.org/std/mem/fn.take.html"><code>mem::take</code></a></li>
  <li>[@36:55] - <a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get_key_value"><code>BTreeMap::get_key_value</code></a> and <a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_key_value"><code>HashMap::get_key_value</code></a>
    <ul>
      <li><a href="http://idubrov.name/rust/2018/06/01/tricking-the-hashmap.html">Ivan Dubrov: Tricking the HashMap</a></li>
    </ul>
  </li>
  <li>[@40:24] - Standardized functions for converting floating-point types to byte arrays of specific endianness
    <ul>
      <li><a href="https://github.com/rust-lang/rfcs/pull/2788">Proposed Rust RFC: Standard lazy types</a></li>
      <li><a href="https://github.com/rust-lang/rust/pull/67659">Rust PR: Stabilize the <code>matches!</code> macro</a></li>
    </ul>
  </li>
  <li>[@45:55] - Cargo tweaks</li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/jertype">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e010-rust-1.40.0.mp3" length="35514200" type="audio/mpeg"/>
			<itunes:duration>49:19</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/009-jan-lucio/</link>
			<pubDate>Fri, 10 Jan 2020 19:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/009-jan-lucio/</guid>
			

			<title><![CDATA[ Double Feature: Jan-Erik Rediger on RustFest & Lucio Franco on the Tonic gRPC framework ]]></title>
			<itunes:summary><![CDATA[ Two more interviews from RustFest 2019, first with lead RustFest organizer Jan-Erik Rediger and second with Tokio contributor Lucio Franco on the Tower gRPC framework.
 ]]></itunes:summary>
			<description><![CDATA[ Two more interviews from RustFest 2019, first with lead RustFest organizer Jan-Erik Rediger and second with Tokio contributor Lucio Franco on the Tower gRPC framework.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help with hosting or audio editing!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources

[@00:00] Part 1: RustFest w/ Jan-Erik Rediger


  [@00:43] - Who were the original founders of RustFest and what is the history of the conference?
  [@06:04] - What is timeline like for organizing a conference of this scale and what has been your experience with organizing RustFest?


[@12:04] Part 2: Tonic w/ Lucio Franco


  [@12:52] - What is Tonic?
  [@13:38] - What is gRPC?
  [@14:57] - What is Tonic/gRPC useful for?
  [@16:05] - How is Tonic related to Tower and Tokio?
  [@22:11] - What are you using Tonic for?
  [@25:13] - How can people learn more about Tonic and get involved?




Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Host: Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Two more interviews from RustFest 2019, first with lead RustFest organizer Jan-Erik Rediger and second with Tokio contributor Lucio Franco on the Tower gRPC framework.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help with hosting or audio editing!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<h4 id="0000-part-1-rustfest-w-jan-erik-rediger">[@00:00] Part 1: RustFest w/ Jan-Erik Rediger</h4>

<ul>
  <li>[@00:43] - Who were the original founders of RustFest and what is the history of the conference?</li>
  <li>[@06:04] - What is timeline like for organizing a conference of this scale and what has been your experience with organizing RustFest?</li>
</ul>

<h4 id="1204-part-2-tonic-w-lucio-franco">[@12:04] Part 2: Tonic w/ Lucio Franco</h4>

<ul>
  <li>[@12:52] - What is Tonic?</li>
  <li>[@13:38] - What is gRPC?</li>
  <li>[@14:57] - What is Tonic/gRPC useful for?</li>
  <li>[@16:05] - How is Tonic related to Tower and Tokio?</li>
  <li>[@22:11] - What are you using Tonic for?</li>
  <li>[@25:13] - How can people learn more about Tonic and get involved?</li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/jertype">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Host: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e009-rustfest-jan-erik-rediger.mp3" length="18710674" type="audio/mpeg"/>
			<itunes:duration>25:59</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/008-oli-miri/</link>
			<pubDate>Mon, 23 Dec 2019 18:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/008-oli-miri/</guid>
			

			<title><![CDATA[ Compile-Time Evaluation, Interpreted Rust, and UB Sanitizing: Talking to Oliver Scherer about Miri ]]></title>
			<itunes:summary><![CDATA[ In the first of our mini-interviews from RustFest 2019, we talk to Oliver Scherer about Miri, an interpreter for rustc’s internal bytecode, its use in const-evaluation, and its potential as an external tool for sanitizing unsafe code.
 ]]></itunes:summary>
			<description><![CDATA[ In the first of our mini-interviews from RustFest 2019, we talk to Oliver Scherer about Miri, an interpreter for rustc’s internal bytecode, its use in const-evaluation, and its potential as an external tool for sanitizing unsafe code.



Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@01:15] - What is const-evaluation and what can you do with it?
  [@03:23] - What is Miri and how long has it been in development?
  [@07:05] - What does the future hold for Miri?
  [@07:54] - How long have you been working on rustc and Miri?
  [@12:22] - How much of Miri does rustc use today?
  [@13:33] - How does Miri help people detect undefined behavior in unsafe code?
  [@16:46] - How would a user begin using Miri directly to test their unsafe code?
  [@19:15] - What happens if you try to const-evaluate unsafe code?
  [@20:33] - What’s next for const-evaluation in rustc?
  [@21:58] - Who else is helping to develop Miri?




Credits

Intro Theme: Aerocity

Audio Editing: alphastrata

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>In the first of our mini-interviews from RustFest 2019, we talk to <a href="https://twitter.com/oli_obk">Oliver Scherer</a> about <a href="https://github.com/rust-lang/miri">Miri</a>, an interpreter for rustc’s internal bytecode, its use in <code>const</code>-evaluation, and its potential as an external tool for sanitizing <code>unsafe</code> code.</p>

<!--
The episode introduction goes here.
The first paragraph should ideally be short, and is used in various
places as a "short description" for the episode. Any subsequent
paragraphs show up as "expanded description".
-->

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@01:15] - What is <code>const</code>-evaluation and what can you do with it?</li>
  <li>[@03:23] - What is Miri and how long has it been in development?</li>
  <li>[@07:05] - What does the future hold for Miri?</li>
  <li>[@07:54] - How long have you been working on rustc and Miri?</li>
  <li>[@12:22] - How much of Miri does rustc use today?</li>
  <li>[@13:33] - How does Miri help people detect undefined behavior in <code>unsafe</code> code?</li>
  <li>[@16:46] - How would a user begin using Miri directly to test their <code>unsafe</code> code?</li>
  <li>[@19:15] - What happens if you try to <code>const</code>-evaluate <code>unsafe</code> code?</li>
  <li>[@20:33] - What’s next for <code>const</code>-evaluation in rustc?</li>
  <li>[@21:58] - Who else is helping to develop Miri?</li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: alphastrata</p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>

<p>Hosts: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e008-miri-oli-obk.mp3" length="23497525" type="audio/mpeg"/>
			<itunes:duration>24:29</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/007-zola/</link>
			<pubDate>Thu, 19 Dec 2019 23:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station/episode/007-zola/</guid>
			

			<title><![CDATA[ Creating Static Sites in Rust with Vincent Prouillet ]]></title>
			<itunes:summary><![CDATA[ Vincent Prouillet talks about his experience building the Zola static site generator (formerly known as Gutenberg) and reflects on five years of working with Rust.
 ]]></itunes:summary>
			<description><![CDATA[ Vincent Prouillet talks about his experience building the Zola static site generator (formerly known as Gutenberg) and reflects on five years of working with Rust.

Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps


  [@00:59] - What’s a static site generator?
  [@03:52] - How easy is it to build and edit a site?
  [@07:58] - Why create a new static site generator?
  [@12:35] - The Tera template engine and Vincent’s experience building it
  [@17:53] - Creating filters and tests to use with Tera
  [@24:29] - What’s a taxonomy?
  [@25:48] - Mapping content to URLs
  [@30:53] - The experience of being an open source maintainer
  [@33:57] - Rust crates and features used by Zola
  [@36:57] - How the Rust ecosystem ensured fast performance
  [@40:35] - Is Rust ready for web applications?
  [@43:25] - What applications are best suited to Rust now?
  [@46:50] - Issues or things you wish existed in Rust?
  [@51:08] - Helping out with Zola




References and Resources

Vincent Prouillet

  Personal Site
  @20100Prouillet


Zola

  Zola Website
  Zola Forum


Tools/Crates used by Zola

  pulldown-cmark (Markdown)
  syntec (Syntax highlighting using Sublime Text definitions)
  rayon (Parallel computation)
  heaptrack (Memory Profiler)


Static Site Hosts

  Github Pages
  Netlify


Crates for Web Applications

  jsonwebtoken
  Bcrypt
  Validator


Compiled Template Engines

  askama
  maud
  horrowshow


Runtime Template Engines

  Tera (Jinja2-like HTML template engine)
  ramhorns
  rust-mustache


Static Site Generators

  Hugo
  Jekyll
  Pelican


Other links

  Forestry (WYSIWYG CMS for Static Sites)
  Keyword Arguments RFC
  kickstart (Scaffolding tool)


Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jeremy Jung
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://www.vincentprouillet.com/">Vincent Prouillet</a> talks about his experience building the <a href="https://twitter.com/jertype">Zola</a> static site generator (formerly known as Gutenberg) and reflects on five years of working with Rust.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps">Timestamps</h3>

<ul>
  <li>[@00:59] - What’s a static site generator?</li>
  <li>[@03:52] - How easy is it to build and edit a site?</li>
  <li>[@07:58] - Why create a new static site generator?</li>
  <li>[@12:35] - The Tera template engine and Vincent’s experience building it</li>
  <li>[@17:53] - Creating filters and tests to use with Tera</li>
  <li>[@24:29] - What’s a taxonomy?</li>
  <li>[@25:48] - Mapping content to URLs</li>
  <li>[@30:53] - The experience of being an open source maintainer</li>
  <li>[@33:57] - Rust crates and features used by Zola</li>
  <li>[@36:57] - How the Rust ecosystem ensured fast performance</li>
  <li>[@40:35] - Is Rust ready for web applications?</li>
  <li>[@43:25] - What applications are best suited to Rust now?</li>
  <li>[@46:50] - Issues or things you wish existed in Rust?</li>
  <li>[@51:08] - Helping out with Zola</li>
</ul>

<!--
In this section, leave timestamped notes of the form:

 - [@HH:MM:SS] - Topic at first timestamp
 - [@HH:MM:SS] - Topic at second timestamp
     - A link to additional material discussed during the preceding topic

-->

<h3 id="references-and-resources">References and Resources</h3>

<h4 id="vincent-prouillet">Vincent Prouillet</h4>
<ul>
  <li><a href="https://www.vincentprouillet.com/">Personal Site</a></li>
  <li><a href="https://twitter.com/20100Prouillet">@20100Prouillet</a></li>
</ul>

<h4 id="zola">Zola</h4>
<ul>
  <li><a href="https://www.getzola.org">Zola Website</a></li>
  <li><a href="https://zola.discourse.group/">Zola Forum</a></li>
</ul>

<h4 id="toolscrates-used-by-zola">Tools/Crates used by Zola</h4>
<ul>
  <li><a href="https://github.com/raphlinus/pulldown-cmark">pulldown-cmark</a> (Markdown)</li>
  <li><a href="https://github.com/trishume/syntect">syntec</a> (Syntax highlighting using Sublime Text definitions)</li>
  <li><a href="https://github.com/rayon-rs/rayon">rayon</a> (Parallel computation)</li>
  <li><a href="https://github.com/KDE/heaptrack">heaptrack</a> (Memory Profiler)</li>
</ul>

<h4 id="static-site-hosts">Static Site Hosts</h4>
<ul>
  <li><a href="https://pages.github.com/">Github Pages</a></li>
  <li><a href="https://www.netlify.com/">Netlify</a></li>
</ul>

<h4 id="crates-for-web-applications">Crates for Web Applications</h4>
<ul>
  <li><a href="https://github.com/Keats/jsonwebtoken">jsonwebtoken</a></li>
  <li><a href="https://github.com/Keats/rust-bcrypt">Bcrypt</a></li>
  <li><a href="https://github.com/Keats/validator">Validator</a></li>
</ul>

<h4 id="compiled-template-engines">Compiled Template Engines</h4>
<ul>
  <li><a href="https://github.com/djc/askama">askama</a></li>
  <li><a href="https://maud.lambda.xyz/">maud</a></li>
  <li><a href="https://github.com/Stebalien/horrorshow-rs">horrowshow</a></li>
</ul>

<h4 id="runtime-template-engines">Runtime Template Engines</h4>
<ul>
  <li><a href="https://github.com/Keats/tera">Tera</a> (<a href="https://www.palletsprojects.com/p/jinja/">Jinja2</a>-like HTML template engine)</li>
  <li><a href="https://github.com/maciejhirsz/ramhorns">ramhorns</a></li>
  <li><a href="https://github.com/nickel-org/rust-mustache">rust-mustache</a></li>
</ul>

<h4 id="static-site-generators">Static Site Generators</h4>
<ul>
  <li><a href="https://www.gohugo.io">Hugo</a></li>
  <li><a href="https://www.jekyllrb.com">Jekyll</a></li>
  <li><a href="https://blog.getpelican.com/">Pelican</a></li>
</ul>

<h4 id="other-links">Other links</h4>
<ul>
  <li><a href="https://forestry.io/">Forestry</a> (WYSIWYG CMS for Static Sites)</li>
  <li><a href="https://github.com/rust-lang/rfcs/issues/323">Keyword Arguments RFC</a></li>
  <li><a href="https://github.com/Keats/kickstart">kickstart</a> (Scaffolding tool)</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/jertype">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie">Ben Striegel</a></p>

<p>Hosts: <a href="https://twitter.com/jertype">Jeremy Jung</a></p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e007-zola-vincent-prouillet.mp3" length="52224834" type="audio/mpeg"/>
			<itunes:duration>54:24</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/006-rust-1.39.0/</link>
			<pubDate>Tue, 26 Nov 2019 18:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/006-rust-1.29.0/</guid>
			

			<title><![CDATA[ What's New in Rust 1.39 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben review the long-awaited changes in Rust 1.39.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben review the long-awaited changes in Rust 1.39.

Contributing to Rustacean Station



Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@1:03] - References to by-move bindings in match guards
  [@2:44] - Attributes on function parameters
  [@7:01] - Borrow check migration warnings are hard errors in Rust 2018
    
      “NLL for Rust 2015” in Rustacean Station episode on Rust 1.36 (timestamp: 36:24)
    
  
  [@10:15] - More const fns in the standard library
    
      Inside Rust Blog: if and match in constants on nightly Rust
    
  
  [@14:16] - Improvements to std::time::Instant
  [@16:22] - rustup 1.20.0
  [@19:32] - Stable async/await
    
      “std::future” in Rustacean Station episode on Rust 1.36 (timestamp: 4:27)
      How Rust optimizes async/await I
      How Rust optimizes async/await II
      Rust Blog: Async-await on stable Rust!
      Announcing the Async Interviews
      wasm-bindgen-futures
    
  
  [@34:42] - What’s next in Rust?
    
      Polonius
      Chalk
    
  
  [@36:20] - A public call for feedback for the Rust 2020 Development Roadmap


Credits

Intro Theme: Aerocity

Audio Editing: Jeremy Jung

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben review the long-awaited changes in <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html">Rust 1.39</a>.</p>

<h3 id="contributing-to-rustacean-station">Contributing to Rustacean Station</h3>

<!-- You can probably leave this as-is -->

<p>Rustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@1:03] - <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#references-to-by-move-bindings-in-match-guards">References to by-move bindings in match guards</a></li>
  <li>[@2:44] - <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#attributes-on-function-parameters">Attributes on function parameters</a></li>
  <li>[@7:01] - <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#borrow-check-migration-warnings-are-hard-errors-in-rust-2018">Borrow check migration warnings are hard errors in Rust 2018</a>
    <ul>
      <li><a href="https://rustacean-station.org/episode/000-rust-1.36.0/">“NLL for Rust 2015” in Rustacean Station episode on Rust 1.36 (timestamp: 36:24)</a></li>
    </ul>
  </li>
  <li>[@10:15] - <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#more-const-fns-in-the-standard-library">More const fns in the standard library</a>
    <ul>
      <li><a href="https://blog.rust-lang.org/inside-rust/2019/11/25/const-if-match.html">Inside Rust Blog: <code>if</code> and <code>match</code> in constants on nightly Rust</a></li>
    </ul>
  </li>
  <li>[@14:16] - <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#additions-to-the-standard-library">Improvements to <code>std::time::Instant</code></a></li>
  <li>[@16:22] - <a href="https://blog.rust-lang.org/2019/10/15/Rustup-1.20.0.html">rustup 1.20.0</a></li>
  <li>[@19:32] - <a href="https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#the-await-is-over,-async-fns-are-here">Stable async/await</a>
    <ul>
      <li><a href="https://rustacean-station.org/episode/000-rust-1.36.0/">“<code>std::future</code>” in Rustacean Station episode on Rust 1.36 (timestamp: 4:27)</a></li>
      <li><a href="https://tmandry.gitlab.io/blog/posts/optimizing-await-1/">How Rust optimizes async/await I</a></li>
      <li><a href="https://tmandry.gitlab.io/blog/posts/optimizing-await-2/">How Rust optimizes async/await II</a></li>
      <li><a href="https://blog.rust-lang.org/2019/11/07/Async-await-stable.html">Rust Blog: Async-await on stable Rust!</a></li>
      <li><a href="https://smallcultfollowing.com/babysteps/blog/2019/11/22/announcing-the-async-interviews/">Announcing the Async Interviews</a></li>
      <li><a href="https://crates.io/crates/wasm-bindgen-futures"><code>wasm-bindgen-futures</code></a></li>
    </ul>
  </li>
  <li>[@34:42] - What’s next in Rust?
    <ul>
      <li><a href="https://github.com/rust-lang/polonius">Polonius</a></li>
      <li><a href="https://github.com/rust-lang/chalk">Chalk</a></li>
    </ul>
  </li>
  <li>[@36:20] - <a href="https://blog.rust-lang.org/2019/10/29/A-call-for-blogs-2020.html">A public call for feedback for the Rust 2020 Development Roadmap</a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://www.softwaresessions.com">Jeremy Jung</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e006-rust-1.39.0.mp3" length="30996793" type="audio/mpeg"/>
			<itunes:duration>43:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/005-rust-1.38.0/</link>
			<pubDate>Mon, 14 Oct 2019 19:50:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/005-rust-1.38.0/</guid>
			

			<title><![CDATA[ What's new in Rust 1.38 ]]></title>
			<itunes:summary><![CDATA[ Jon and Ben review the changes introduced by the Rust 1.38 release.
 ]]></itunes:summary>
			<description><![CDATA[ Jon and Ben review the changes introduced by the Rust 1.38 release.

Get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help out!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@1:15] - Pipelined compilation
  [@3:25] - Linting some incorrect uses of mem::uninitialized
    
      Rustacean Station episode on Rust 1.36 with discussion on std::mem::MaybeUninit
    
  
  [@6:30] - #[deprecated] attribute on macros
    
      Rust reference: Diagnostic attributes
    
  
  [@11:30] - std::any::type_name
    
      Security advisory for the destabilization of std::error::Error::type_id in Rust 1.34.2
    
  
  [@16:00] - slice::{concat, connect, join} now accepts &amp;[T] in addition to &amp;T
  [@18:10] - *const T and *mut T now implement std::marker::Unpin
  [@20:55] - New convenience methods for working with std::time::Duration
  [@22:25] - cargo fix --clippy
  [@23:40] - Diff-friendly format for Cargo.lock
  [@25:00] - Looking forward to Rust 1.39
    
      futures v0.3 milestone
      tokio v0.2 milestone
      tower v0.1 milestone
      hyper v0.13 milestone
    
  


Credits

Intro Theme: Aerocity

Audio Editing: Zoran Zaric

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjengset and Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>Jon and Ben review the changes introduced by <a href="https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html">the Rust 1.38 release</a>.</p>

<p>Get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help out!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@1:15] - Pipelined compilation</li>
  <li>[@3:25] - Linting some incorrect uses of <code>mem::uninitialized</code>
    <ul>
      <li><a href="https://rustacean-station.org/episode/000-rust-1.36.0/">Rustacean Station episode on Rust 1.36 with discussion on <code>std::mem::MaybeUninit</code></a></li>
    </ul>
  </li>
  <li>[@6:30] - <code>#[deprecated]</code> attribute on macros
    <ul>
      <li><a href="https://doc.rust-lang.org/stable/reference/attributes/diagnostics.html">Rust reference: Diagnostic attributes</a></li>
    </ul>
  </li>
  <li>[@11:30] - <code>std::any::type_name</code>
    <ul>
      <li><a href="https://groups.google.com/d/msg/rustlang-security-announcements/aZabeCMUv70/-2Y6-SL6AQAJ">Security advisory for the destabilization of <code>std::error::Error::type_id</code> in Rust 1.34.2</a></li>
    </ul>
  </li>
  <li>[@16:00] - <code>slice::{concat, connect, join}</code> now accepts <code>&amp;[T]</code> in addition to <code>&amp;T</code></li>
  <li>[@18:10] - <code>*const T</code> and <code>*mut T</code> now implement <code>std::marker::Unpin</code></li>
  <li>[@20:55] - New convenience methods for working with <code>std::time::Duration</code></li>
  <li>[@22:25] - <code>cargo fix --clippy</code></li>
  <li>[@23:40] - Diff-friendly format for Cargo.lock</li>
  <li>[@25:00] - Looking forward to Rust 1.39
    <ul>
      <li><a href="https://github.com/rust-lang-nursery/futures-rs/milestone/2">futures v0.3 milestone</a></li>
      <li><a href="https://github.com/tokio-rs/tokio/milestone/2">tokio v0.2 milestone</a></li>
      <li><a href="https://github.com/tower-rs/tower/milestone/1">tower v0.1 milestone</a></li>
      <li><a href="https://github.com/hyperium/hyper/milestone/5">hyper v0.13 milestone</a></li>
    </ul>
  </li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: <a href="https://twitter.com/AerocityMusic">Aerocity</a></p>

<p>Audio Editing: <a href="https://twitter.com/zoranzaric">Zoran Zaric</a></p>

<p>Hosting Infrastructure: <a href="https://twitter.com/jonhoo/">Jon Gjengset</a></p>

<p>Show Notes: <a href="https://twitter.com/bstrie/">Ben Striegel</a></p>

<p>Hosts: Jon Gjengset and Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e005-rust-1.38.0.mp3" length="24517728" type="audio/mpeg"/>
			<itunes:duration>34:03</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/004-rust-in-production-armin-ronacher/</link>
			<pubDate>Tue, 17 Sep 2019 18:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/004-rust-in-production-armin-ronacher/</guid>
			

			<title><![CDATA[ Rust in Production: An Interview with Armin Ronacher ]]></title>
			<itunes:summary><![CDATA[ Armin Ronacher talks about getting into Rust, when to use it, writing Rust extensions for Python, building the Symbolicator web application with actix, creating debugging libraries, and the Rust ecosystem.
 ]]></itunes:summary>
			<description><![CDATA[ Armin Ronacher talks about getting into Rust, when to use it, writing Rust extensions for Python, building the Symbolicator web application with actix, creating debugging libraries, and the Rust ecosystem.

Get in touch with us if you’d like to be interviewed, propose a topic, or help out!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@01:16] - What got you interested in Rust?
  [@02:58] - Abstraction with good performance in Rust vs Python
  [@04:50] - Rust doesn’t need asynchronous code
  [@06:10] - Building thread safe applications
  [@07:05] - What excited you about using Rust?
  [@08:59] - Sentry
  [@11:41] - Introducing Rust to Sentry
  [@13:49] - Anything easier to write in Rust vs Python?
  [@16:53] - Writing extensions vs writing services
  [@20:01] - Flow of sending a minidump to Symbolicator
  [@22:35] - Symbolicator makes sense as a service
  [@24:05] - Building a better debugging world
  [@25:12] - More things symbolicator does
  [@26:06] - What’s Milksnake
  [@28:43] - Other ways to embed Rust in Python
  [@30:47] - Why use Actix for Symbolicator?
  [@35:23] - Is it too early to write web applications?
  [@38:09] - What would you do differently in hindsight?
  [@42:59] - Don’t want a Django or Rails
  [@44:37] - When to write a web application?
  [@48:13] - What do you wish existed in Rust?
  [@50:36] - Game backends
  [@52:23] - Anything else?
  [@54:05] - Why companies aren’t using Rust for web development
  [@54:52] - Why async/await is not the only blocker for web development
  [@57:22] - Resources for web development in Rust
  [@59:03] - Wrap Up


Credits

Intro Theme: Aerocity

Hosting Infrastructure: Jon Gjengset

Show Notes: Jeremy Jung

Host: Jeremy Jung
 ]]></description>
			<content:encoded><![CDATA[ <p><a href="https://twitter.com/mitsuhiko">Armin Ronacher</a> talks about getting into Rust, when to use it, writing Rust extensions for Python, building the <a href="https://github.com/getsentry/symbolicator">Symbolicator</a> web application with actix, creating debugging libraries, and the Rust ecosystem.</p>

<p>Get in touch with us if you’d like to be interviewed, propose a topic, or help out!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@01:16] - What got you interested in Rust?</li>
  <li>[@02:58] - Abstraction with good performance in Rust vs Python</li>
  <li>[@04:50] - Rust doesn’t need asynchronous code</li>
  <li>[@06:10] - Building thread safe applications</li>
  <li>[@07:05] - What excited you about using Rust?</li>
  <li>[@08:59] - <a href="https://sentry.io/welcome/">Sentry</a></li>
  <li>[@11:41] - Introducing Rust to Sentry</li>
  <li>[@13:49] - Anything easier to write in Rust vs Python?</li>
  <li>[@16:53] - Writing extensions vs writing services</li>
  <li>[@20:01] - Flow of sending a minidump to Symbolicator</li>
  <li>[@22:35] - Symbolicator makes sense as a service</li>
  <li>[@24:05] - Building a better debugging world</li>
  <li>[@25:12] - More things symbolicator does</li>
  <li>[@26:06] - What’s Milksnake</li>
  <li>[@28:43] - Other ways to embed Rust in Python</li>
  <li>[@30:47] - Why use Actix for Symbolicator?</li>
  <li>[@35:23] - Is it too early to write web applications?</li>
  <li>[@38:09] - What would you do differently in hindsight?</li>
  <li>[@42:59] - Don’t want a Django or Rails</li>
  <li>[@44:37] - When to write a web application?</li>
  <li>[@48:13] - What do you wish existed in Rust?</li>
  <li>[@50:36] - Game backends</li>
  <li>[@52:23] - Anything else?</li>
  <li>[@54:05] - Why companies aren’t using Rust for web development</li>
  <li>[@54:52] - Why async/await is not the only blocker for web development</li>
  <li>[@57:22] - Resources for web development in Rust</li>
  <li>[@59:03] - Wrap Up</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: Aerocity</p>

<p>Hosting Infrastructure: Jon Gjengset</p>

<p>Show Notes: Jeremy Jung</p>

<p>Host: Jeremy Jung</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e004-rust-in-production-armin-ronacher.mp3" length="44940667" type="audio/mpeg"/>
			<itunes:duration>01:02:25</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/003-rust-1.37.0/</link>
			<pubDate>Sat, 31 Aug 2019 17:30:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/003-rust-1.37.0/</guid>
			

			<title><![CDATA[ What's New in Rust 1.37 ]]></title>
			<itunes:summary><![CDATA[ We review the new features in the Rust 1.37 release and give shout-outs to all the volunteers who have helped make Rustacean Station so far.
 ]]></itunes:summary>
			<description><![CDATA[ We review the new features in the Rust 1.37 release and give shout-outs to all the volunteers who have helped make Rustacean Station so far.

Get in touch with us if you’d like to be interviewed, propose a topic, or help out!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@01:21] - Referring to enum variants through type aliases
  [@02:55] - Built-in Cargo support for vendored dependencies
  [@04:08] - Using unnamed const items for macros
  [@06:41] - Profile-guided optimization
  [@09:06] - Choosing a default binary in Cargo projects
  [@10:17] - #[repr(align(N))] on enums
  [@11:06] - Library changes
  [@16:48] - New sponsors of Rust infrastructure
    
      Async/Await in Libra Core
    
  
  [@19:58] - async/await stabilization in Rust 1.39
  [@22:08] - Miscellaneous new features
  [@26:06] - Thanking the people who make Rustacean Station possible!


Credits

Intro Theme: Aerocity

Audio Editing: Jon Gjenset

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Jon Gjenset &amp; Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>We review the new features in <a href="https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html">the Rust 1.37 release</a> and give shout-outs to all the volunteers who have helped make Rustacean Station so far.</p>

<p>Get in touch with us if you’d like to be interviewed, propose a topic, or help out!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@01:21] - Referring to enum variants through type aliases</li>
  <li>[@02:55] - Built-in Cargo support for vendored dependencies</li>
  <li>[@04:08] - Using unnamed const items for macros</li>
  <li>[@06:41] - Profile-guided optimization</li>
  <li>[@09:06] - Choosing a default binary in Cargo projects</li>
  <li>[@10:17] - <code>#[repr(align(N))]</code> on enums</li>
  <li>[@11:06] - Library changes</li>
  <li>[@16:48] - New sponsors of Rust infrastructure
    <ul>
      <li><a href="https://community.libra.org/t/async-await-in-libra-core/1566">Async/Await in Libra Core</a></li>
    </ul>
  </li>
  <li>[@19:58] - <code>async</code>/<code>await</code> stabilization in Rust 1.39</li>
  <li>[@22:08] - Miscellaneous new features</li>
  <li>[@26:06] - Thanking the people who make Rustacean Station possible!</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: Aerocity</p>

<p>Audio Editing: Jon Gjenset</p>

<p>Hosting Infrastructure: Jon Gjengset</p>

<p>Show Notes: Ben Striegel</p>

<p>Hosts: Jon Gjenset &amp; Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e003-rust-1.37.0.mp3" length="26728938" type="audio/mpeg"/>
			<itunes:duration>0:33:18</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/002-colorado-gold-rust/</link>
			<pubDate>Sun, 25 Aug 2019 17:00:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/002-colorado-gold-rust/</guid>
			

			<title><![CDATA[ Organizing Colorado Gold Rust: An interview with conference founder J Haigh ]]></title>
			<itunes:summary><![CDATA[ We interview J Haigh about their experience organizing this year’s first-ever Colorado Gold Rust conference, what brought them to Rust, and what inspired them to give back to Rust’s community.
 ]]></itunes:summary>
			<description><![CDATA[ We interview J Haigh about their experience organizing this year’s first-ever Colorado Gold Rust conference, what brought them to Rust, and what inspired them to give back to Rust’s community.


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@00:41] - Colorado Gold Rust
  [@01:48] - What got you into Rust?
    
      RustConf
      @ag_dubs (Ashley Williams)
      @carols10cents (Carol Nichols)
    
  
  [@03:01] - Getting involved with the Rust community
    
      Rust Boulder/Denver Meetup
      @focusaurus (Peter Lyons)
    
  
  [@07:50] - What is the Recurse Center?
  [@09:21] - Organizing a conference
    
      Auraria Campus
      @argorak (Florian Gilcher)
      Rust Fest
      Rust Community Events Team’s example timeline for organizing a conference
      Rust Belt Rust
      Rust Belt Rust 2018’s budgeting report
    
  
  [@17:27] - What have you learned for next time?
  [@19:36] - Who is helping with the conference?
    
      Nicholas Young
    
  
  [@22:05] - Community Inclusivity
  [@24:44] - CFP software
  [@25:34] - Finding a venue for a conference


Credits

Intro Theme: Aerocity

Audio Editing: Reece McMillin

Hosting Infrastructure: Jon Gjengset

Show Notes: Jeremy Jung

Hosts: Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>We interview J Haigh about their experience organizing this year’s first-ever <a href="https://www.cogoldrust.com/">Colorado Gold Rust</a> conference, what brought them to Rust, and what inspired them to give back to Rust’s community.</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@00:41] - <a href="https://www.cogoldrust.com/">Colorado Gold Rust</a></li>
  <li>[@01:48] - What got you into Rust?
    <ul>
      <li><a href="https://rustconf.com/">RustConf</a></li>
      <li><a href="https://twitter.com/ag_dubs">@ag_dubs (Ashley Williams)</a></li>
      <li><a href="https://twitter.com/carols10cents">@carols10cents (Carol Nichols)</a></li>
    </ul>
  </li>
  <li>[@03:01] - Getting involved with the Rust community
    <ul>
      <li><a href="https://www.meetup.com/Rust-Boulder-Denver/">Rust Boulder/Denver Meetup</a></li>
      <li><a href="https://twitter.com/focusaurus">@focusaurus (Peter Lyons)</a></li>
    </ul>
  </li>
  <li>[@07:50] - What is the <a href="https://www.recurse.com/">Recurse Center</a>?</li>
  <li>[@09:21] - Organizing a conference
    <ul>
      <li><a href="https://www.ahec.edu/">Auraria Campus</a></li>
      <li><a href="https://twitter.com/Argorak">@argorak (Florian Gilcher)</a></li>
      <li><a href="https://www.rustfest.eu">Rust Fest</a></li>
      <li><a href="https://github.com/rust-community/events-team/blob/master/guidelines/timeline.md">Rust Community Events Team’s example timeline for organizing a conference</a></li>
      <li><a href="https://www.rust-belt-rust.com/">Rust Belt Rust</a></li>
      <li><a href="https://www.integer32.com/2018/11/29/2018-rust-belt-rust-finance-report.html">Rust Belt Rust 2018’s budgeting report</a></li>
    </ul>
  </li>
  <li>[@17:27] - What have you learned for next time?</li>
  <li>[@19:36] - Who is helping with the conference?
    <ul>
      <li><a href="https://www.secretfader.com/">Nicholas Young</a></li>
    </ul>
  </li>
  <li>[@22:05] - Community Inclusivity</li>
  <li>[@24:44] - <a href="https://github.com/rubycentral/cfp-app">CFP software</a></li>
  <li>[@25:34] - Finding a venue for a conference</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: Aerocity</p>

<p>Audio Editing: Reece McMillin</p>

<p>Hosting Infrastructure: Jon Gjengset</p>

<p>Show Notes: Jeremy Jung</p>

<p>Hosts: Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e002-colorado-gold-rust.mp3" length="26982651" type="audio/mpeg"/>
			<itunes:duration>0:28:06</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/001-ruma/</link>
			<pubDate>Thu, 08 Aug 2019 11:45:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/001-ruma</guid>
			

			<title><![CDATA[ Ruma and the Matrix Communication Protocol: An Interview with Jimmy Cuadra ]]></title>
			<itunes:summary><![CDATA[ We interview Jimmy Cuadra about Matrix, an open and decentralized communication protocol, and his implementation in Rust known as Ruma.
 ]]></itunes:summary>
			<description><![CDATA[ We interview Jimmy Cuadra about Matrix, an open and decentralized communication protocol, and his implementation in Rust known as Ruma.


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


Timestamps &amp; referenced resources


  [@01:35] - Meet Jimmy Cuadra
  [@04:46] - How did you get into Rust?
    
      @bascule (Tony Arcieri)
      The Rust Programming Language Book
    
  
  [@08:47] - What is Matrix?
    
      Matrix: an open network for secure, decentralized communication
      libpurple
      Ruma: Introduction to Matrix
    
  
  [@14:32] - Why “Matrix”?
  [@16:44] - What forms of communication does Matrix enable?
  [@17:59] - What pieces of Matrix does Ruma implement?
  [@20:27] - Why did you decide to use Rust?
  [@23:52] - How challenging has Ruma been to implement?
  [@30:27] - What libraries does Ruma leverage?
    
      Serde: a framework for serializing and deserializing data structures efficiently and generically
      Diesel: a safe, extensible ORM and query builder
    
  
  [@34:02] - If you could start all over again, what would you do differently?
  [@38:57] - Does Ruma use any unstable Rust features? Has it previously?
  [@42:30] - What other implementations of Matrix exist?
  [@46:42] - How difficult to implement is the Matrix specification?
  [@52:59] - How close to maturity is Ruma?


Credits

Intro Theme: Aerocity

Audio Editing: Reece McMillin

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Abdou Seck, Ben Striegel
 ]]></description>
			<content:encoded><![CDATA[ <p>We interview Jimmy Cuadra about <a href="https://matrix.org/">Matrix</a>, an open and decentralized communication protocol, and his implementation in Rust known as <a href="https://github.com/ruma/ruma">Ruma</a>.</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="timestamps--referenced-resources">Timestamps &amp; referenced resources</h3>

<ul>
  <li>[@01:35] - Meet Jimmy Cuadra</li>
  <li>[@04:46] - How did you get into Rust?
    <ul>
      <li><a href="https://twitter.com/bascule">@bascule (Tony Arcieri)</a></li>
      <li><a href="https://doc.rust-lang.org/book/">The Rust Programming Language Book</a></li>
    </ul>
  </li>
  <li>[@08:47] - What is Matrix?
    <ul>
      <li><a href="https://matrix.org/">Matrix: an open network for secure, decentralized communication</a></li>
      <li><a href="https://developer.pidgin.im/wiki/WhatIsLibpurple">libpurple</a></li>
      <li><a href="https://www.ruma.io/docs/matrix/">Ruma: Introduction to Matrix</a></li>
    </ul>
  </li>
  <li>[@14:32] - Why “Matrix”?</li>
  <li>[@16:44] - What forms of communication does Matrix enable?</li>
  <li>[@17:59] - What pieces of Matrix does Ruma implement?</li>
  <li>[@20:27] - Why did you decide to use Rust?</li>
  <li>[@23:52] - How challenging has Ruma been to implement?</li>
  <li>[@30:27] - What libraries does Ruma leverage?
    <ul>
      <li><a href="https://crates.io/crates/serde">Serde: a framework for serializing and deserializing data structures efficiently and generically</a></li>
      <li><a href="https://crates.io/crates/diesel">Diesel: a safe, extensible ORM and query builder</a></li>
    </ul>
  </li>
  <li>[@34:02] - If you could start all over again, what would you do differently?</li>
  <li>[@38:57] - Does Ruma use any unstable Rust features? Has it previously?</li>
  <li>[@42:30] - What other implementations of Matrix exist?</li>
  <li>[@46:42] - How difficult to implement is the Matrix specification?</li>
  <li>[@52:59] - How close to maturity is Ruma?</li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: Aerocity</p>

<p>Audio Editing: Reece McMillin</p>

<p>Hosting Infrastructure: Jon Gjengset</p>

<p>Show Notes: Ben Striegel</p>

<p>Hosts: Abdou Seck, Ben Striegel</p>
 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e001-ruma-matrix-jimmy-cuadra.mp3" length="60946851" type="audio/mpeg"/>
			<itunes:duration>1:03:29</itunes:duration>
		</item>
		
		<item>
			<link>https://rustacean-station.org/episode/000-rust-1.36.0/</link>
			<pubDate>Fri, 12 Jul 2019 17:54:00 +0000</pubDate>
			
			<guid isPermaLink="false">rustacean-station//episode/000-rust-1.36.0/</guid>
			

			<title><![CDATA[ Announcing Rustacean Station and Rust 1.36 ]]></title>
			<itunes:summary><![CDATA[ Meet Rustacean Station, a new Rust “meta podcast”, and take a dive into the new 1.36.0 Rust release with Ben and Jon.
 ]]></itunes:summary>
			<description><![CDATA[ Meet Rustacean Station, a new Rust “meta podcast”, and take a dive into the new 1.36.0 Rust release with Ben and Jon.

If you would like to offer Rust-related podcast content for us to host, or would like advice and resources on making your own Rust podcast, get in touch with us via the venues below!


  Twitter: @rustaceanfm
  Discord: Rustacean Station
  Github: @rustacean-station
  Email: hello@rustacean-station.org


In the episode


  [@4:27] - std::future
  [@11:29] - std::task
  [@14:22] - the alloc crate
  [@18:52] - std::collections::HashMap and hashbrown
  [@22:50] - std::mem::MaybeUninit and the deprecation of std::mem::uninitialized  (mentioned: Error::type_id destabilization and std::pin discussion)
  [@36:24] - NLL for Rust 2015 (mentioned: MIR)
  [@44:45] - cargo --offline and cargo fetch
  [@46:50] - ongoing stdlib constification
  [@47:25] - read_vectored and write_vectored
  [@49:05] - Iterator::copied
  [@49:58] - dbg! enhancements
  [@51:19] - #[must_use] for is_err and is_ok


Credits

Intro Theme: Aerocity

Audio Editing: Reece McMillin

Hosting Infrastructure: Jon Gjengset

Show Notes: Ben Striegel

Hosts: Ben Striegel, Jon Gjengset

Special Thanks: Chris Krycho, Andrew Gallant, Mae McCauley

 ]]></description>
			<content:encoded><![CDATA[ <p>Meet Rustacean Station, a new Rust “meta podcast”, and take a dive into the new 1.36.0 Rust release with Ben and Jon.</p>

<p>If you would like to offer Rust-related podcast content for us to host, or would like advice and resources on making your own Rust podcast, get in touch with us via the venues below!</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/rustaceanfm">@rustaceanfm</a></li>
  <li>Discord: <a href="https://discord.gg/cHc3Gyc">Rustacean Station</a></li>
  <li>Github: <a href="https://github.com/rustacean-station/">@rustacean-station</a></li>
  <li>Email: <a href="mailto:hello@rustacean-station.org">hello@rustacean-station.org</a></li>
</ul>

<h3 id="in-the-episode">In the episode</h3>

<ul>
  <li>[@4:27] - <a href="https://doc.rust-lang.org/std/future/trait.Future.html"><code>std::future</code></a></li>
  <li>[@11:29] - <a href="https://doc.rust-lang.org/std/task/struct.Waker.html"><code>std::task</code></a></li>
  <li>[@14:22] - the <a href="https://doc.rust-lang.org/alloc/index.html">alloc</a> crate</li>
  <li>[@18:52] - <code>std::collections::HashMap</code> and <a href="https://github.com/rust-lang/hashbrown">hashbrown</a></li>
  <li>[@22:50] - <a href="https://doc.rust-lang.org/std/mem/union.MaybeUninit.html"><code>std::mem::MaybeUninit</code></a> and <a href="https://gankro.github.io/blah/initialize-me-maybe/">the deprecation</a> of <a href="https://gankro.github.io/blah/initialize-me-maybe/"><code>std::mem::uninitialized</code></a>  (mentioned: <a href="https://github.com/rust-lang/rust/issues/60784"><code>Error::type_id</code></a> destabilization and <a href="https://github.com/rust-lang/rust/issues/49150"><code>std::pin</code></a> discussion)</li>
  <li>[@36:24] - <a href="http://blog.pnkfx.org/blog/2019/06/26/breaking-news-non-lexical-lifetimes-arrives-for-everyone/">NLL for Rust 2015</a> (mentioned: <a href="https://blog.rust-lang.org/2016/04/19/MIR.html">MIR</a>)</li>
  <li>[@44:45] - <a href="https://github.com/rust-lang/cargo/issues/4686"><code>cargo --offline</code></a> and <a href="https://doc.rust-lang.org/cargo/commands/cargo-fetch.html"><code>cargo fetch</code></a></li>
  <li>[@46:50] - ongoing stdlib constification</li>
  <li>[@47:25] - <a href="https://doc.rust-lang.org/std/io/trait.Read.html#method.read_vectored"><code>read_vectored</code></a> and <a href="https://doc.rust-lang.org/std/io/trait.Write.html#method.write_vectored"><code>write_vectored</code></a></li>
  <li>[@49:05] - <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.copied"><code>Iterator::copied</code></a></li>
  <li>[@49:58] - <a href="https://doc.rust-lang.org/std/macro.dbg.html"><code>dbg!</code></a> enhancements</li>
  <li>[@51:19] - <a href="https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute"><code>#[must_use]</code></a> for <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err"><code>is_err</code></a> and <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok"><code>is_ok</code></a></li>
</ul>

<h3 id="credits">Credits</h3>

<p>Intro Theme: Aerocity</p>

<p>Audio Editing: Reece McMillin</p>

<p>Hosting Infrastructure: Jon Gjengset</p>

<p>Show Notes: Ben Striegel</p>

<p>Hosts: Ben Striegel, Jon Gjengset</p>

<p>Special Thanks: Chris Krycho, Andrew Gallant, Mae McCauley</p>

 ]]></content:encoded>

			<enclosure url="https://dts.podtrac.com/redirect.mp3/audio.rustacean-station.org/file/rustacean-station/rustacean-station-e000-rust-1.36.0.mp3" length="130740766" type="audio/mpeg"/>
			<itunes:duration>00:54:28</itunes:duration>
		</item>
		
	</channel>
</rss>
